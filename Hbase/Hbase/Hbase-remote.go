/* Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package main

import (
        "flag"
        "fmt"
        "http"
        "net"
        "os"
        "strconv"
        "thrift"
        "thriftlib/Hbase"
)

func Usage() {
  fmt.Fprint(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:\n")
  flag.PrintDefaults()
  fmt.Fprint(os.Stderr, "Functions:\n")
  fmt.Fprint(os.Stderr, "  enableTable(tableName Bytes) (io *IOError, err error)\n")
  fmt.Fprint(os.Stderr, "  disableTable(tableName Bytes) (io *IOError, err error)\n")
  fmt.Fprint(os.Stderr, "  isTableEnabled(tableName Bytes) (retval1058 bool, io *IOError, err error)\n")
  fmt.Fprint(os.Stderr, "  compact(tableNameOrRegionName Bytes) (io *IOError, err error)\n")
  fmt.Fprint(os.Stderr, "  majorCompact(tableNameOrRegionName Bytes) (io *IOError, err error)\n")
  fmt.Fprint(os.Stderr, "  getTableNames() (retval1061 thrift.TList, io *IOError, err error)\n")
  fmt.Fprint(os.Stderr, "  getColumnDescriptors(tableName Text) (retval1062 thrift.TMap, io *IOError, err error)\n")
  fmt.Fprint(os.Stderr, "  getTableRegions(tableName Text) (retval1063 thrift.TList, io *IOError, err error)\n")
  fmt.Fprint(os.Stderr, "  createTable(tableName Text, columnFamilies thrift.TList) (io *IOError, ia *IllegalArgument, exist *AlreadyExists, err error)\n")
  fmt.Fprint(os.Stderr, "  deleteTable(tableName Text) (io *IOError, err error)\n")
  fmt.Fprint(os.Stderr, "  get(tableName Text, row Text, column Text) (retval1066 thrift.TList, io *IOError, err error)\n")
  fmt.Fprint(os.Stderr, "  getVer(tableName Text, row Text, column Text, numVersions int32) (retval1067 thrift.TList, io *IOError, err error)\n")
  fmt.Fprint(os.Stderr, "  getVerTs(tableName Text, row Text, column Text, timestamp int64, numVersions int32) (retval1068 thrift.TList, io *IOError, err error)\n")
  fmt.Fprint(os.Stderr, "  getRow(tableName Text, row Text) (retval1069 thrift.TList, io *IOError, err error)\n")
  fmt.Fprint(os.Stderr, "  getRowWithColumns(tableName Text, row Text, columns thrift.TList) (retval1070 thrift.TList, io *IOError, err error)\n")
  fmt.Fprint(os.Stderr, "  getRowTs(tableName Text, row Text, timestamp int64) (retval1071 thrift.TList, io *IOError, err error)\n")
  fmt.Fprint(os.Stderr, "  getRowWithColumnsTs(tableName Text, row Text, columns thrift.TList, timestamp int64) (retval1072 thrift.TList, io *IOError, err error)\n")
  fmt.Fprint(os.Stderr, "  getRows(tableName Text, rows thrift.TList) (retval1073 thrift.TList, io *IOError, err error)\n")
  fmt.Fprint(os.Stderr, "  getRowsWithColumns(tableName Text, rows thrift.TList, columns thrift.TList) (retval1074 thrift.TList, io *IOError, err error)\n")
  fmt.Fprint(os.Stderr, "  getRowsTs(tableName Text, rows thrift.TList, timestamp int64) (retval1075 thrift.TList, io *IOError, err error)\n")
  fmt.Fprint(os.Stderr, "  getRowsWithColumnsTs(tableName Text, rows thrift.TList, columns thrift.TList, timestamp int64) (retval1076 thrift.TList, io *IOError, err error)\n")
  fmt.Fprint(os.Stderr, "  mutateRow(tableName Text, row Text, mutations thrift.TList) (io *IOError, ia *IllegalArgument, err error)\n")
  fmt.Fprint(os.Stderr, "  mutateRowTs(tableName Text, row Text, mutations thrift.TList, timestamp int64) (io *IOError, ia *IllegalArgument, err error)\n")
  fmt.Fprint(os.Stderr, "  mutateRows(tableName Text, rowBatches thrift.TList) (io *IOError, ia *IllegalArgument, err error)\n")
  fmt.Fprint(os.Stderr, "  mutateRowsTs(tableName Text, rowBatches thrift.TList, timestamp int64) (io *IOError, ia *IllegalArgument, err error)\n")
  fmt.Fprint(os.Stderr, "  atomicIncrement(tableName Text, row Text, column Text, value int64) (retval1081 int64, io *IOError, ia *IllegalArgument, err error)\n")
  fmt.Fprint(os.Stderr, "  deleteAll(tableName Text, row Text, column Text) (io *IOError, err error)\n")
  fmt.Fprint(os.Stderr, "  deleteAllTs(tableName Text, row Text, column Text, timestamp int64) (io *IOError, err error)\n")
  fmt.Fprint(os.Stderr, "  deleteAllRow(tableName Text, row Text) (io *IOError, err error)\n")
  fmt.Fprint(os.Stderr, "  deleteAllRowTs(tableName Text, row Text, timestamp int64) (io *IOError, err error)\n")
  fmt.Fprint(os.Stderr, "  scannerOpen(tableName Text, startRow Text, columns thrift.TList) (retval1086 ScannerID, io *IOError, err error)\n")
  fmt.Fprint(os.Stderr, "  scannerOpenWithStop(tableName Text, startRow Text, stopRow Text, columns thrift.TList) (retval1087 ScannerID, io *IOError, err error)\n")
  fmt.Fprint(os.Stderr, "  scannerOpenWithPrefix(tableName Text, startAndPrefix Text, columns thrift.TList) (retval1088 ScannerID, io *IOError, err error)\n")
  fmt.Fprint(os.Stderr, "  scannerOpenTs(tableName Text, startRow Text, columns thrift.TList, timestamp int64) (retval1089 ScannerID, io *IOError, err error)\n")
  fmt.Fprint(os.Stderr, "  scannerOpenWithStopTs(tableName Text, startRow Text, stopRow Text, columns thrift.TList, timestamp int64) (retval1090 ScannerID, io *IOError, err error)\n")
  fmt.Fprint(os.Stderr, "  scannerGet(id ScannerID) (retval1091 thrift.TList, io *IOError, ia *IllegalArgument, err error)\n")
  fmt.Fprint(os.Stderr, "  scannerGetList(id ScannerID, nbRows int32) (retval1092 thrift.TList, io *IOError, ia *IllegalArgument, err error)\n")
  fmt.Fprint(os.Stderr, "  scannerClose(id ScannerID) (io *IOError, ia *IllegalArgument, err error)\n")
  fmt.Fprint(os.Stderr, "\n")
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var help bool
  var url http.URL
  var trans thrift.TTransport
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.BoolVar(&help, "help", false, "See usage string")
  flag.Parse()
  if help || flag.NArg() == 0 {
    flag.Usage()
  }
  
  if len(urlString) > 0 {
    url, err := http.ParseURL(urlString)
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.Error(), "\n")
      flag.Usage()
    }
    host = url.Host
    useHttp = len(url.Scheme) <= 0 || url.Scheme == "http"
  } else if useHttp {
    _, err := http.ParseURL(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.Error(), "\n")
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(url.Raw)
  } else {
    addr, err := net.ResolveTCPAddr("tcp", fmt.Sprint(host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error resolving address", err.Error())
      os.Exit(1)
    }
    trans, err = thrift.NewTNonblockingSocketAddr(addr)
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprint(os.Stderr, "Error creating transport", err.Error())
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid protocol specified: ", protocol, "\n")
    Usage()
    os.Exit(1)
  }
  client := Hbase.NewHbaseClientFactory(trans, protocolFactory)
  if err = trans.Open(); err != nil {
    fmt.Fprint(os.Stderr, "Error opening socket to ", host, ":", port, " ", err.Error())
    os.Exit(1)
  }
  
  switch cmd {
  case "enableTable":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "EnableTable requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Bytes(argvalue0)
    fmt.Print(client.EnableTable(value0))
    fmt.Print("\n")
    break
  case "disableTable":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "DisableTable requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Bytes(argvalue0)
    fmt.Print(client.DisableTable(value0))
    fmt.Print("\n")
    break
  case "isTableEnabled":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "IsTableEnabled requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Bytes(argvalue0)
    fmt.Print(client.IsTableEnabled(value0))
    fmt.Print("\n")
    break
  case "compact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "Compact requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Bytes(argvalue0)
    fmt.Print(client.Compact(value0))
    fmt.Print("\n")
    break
  case "majorCompact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "MajorCompact requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Bytes(argvalue0)
    fmt.Print(client.MajorCompact(value0))
    fmt.Print("\n")
    break
  case "getTableNames":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetTableNames requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetTableNames())
    fmt.Print("\n")
    break
  case "getColumnDescriptors":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetColumnDescriptors requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Text(argvalue0)
    fmt.Print(client.GetColumnDescriptors(value0))
    fmt.Print("\n")
    break
  case "getTableRegions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetTableRegions requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Text(argvalue0)
    fmt.Print(client.GetTableRegions(value0))
    fmt.Print("\n")
    break
  case "createTable":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "CreateTable requires 2 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Text(argvalue0)
    arg1102 := flag.Arg(2)
    mbTrans1103 := thrift.NewTMemoryBufferLen(len(arg1102))
    defer mbTrans1103.Close()
    _, err1104 := mbTrans1103.WriteString(arg1102)
    if err1104 != nil { 
      Usage()
      return
    }
    factory1105 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1106 := factory1105.GetProtocol(mbTrans1103)
    containerStruct1 := Hbase.NewCreateTableArgs()
    err1107 := containerStruct1.ReadField2(jsProt1106)
    if err1107 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.ColumnFamilies
    value1 := argvalue1
    fmt.Print(client.CreateTable(value0, value1))
    fmt.Print("\n")
    break
  case "deleteTable":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "DeleteTable requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Text(argvalue0)
    fmt.Print(client.DeleteTable(value0))
    fmt.Print("\n")
    break
  case "get":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "Get requires 3 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Text(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := Hbase.Text(argvalue1)
    argvalue2 := flag.Arg(3)
    value2 := Hbase.Text(argvalue2)
    fmt.Print(client.Get(value0, value1, value2))
    fmt.Print("\n")
    break
  case "getVer":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "GetVer requires 4 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Text(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := Hbase.Text(argvalue1)
    argvalue2 := flag.Arg(3)
    value2 := Hbase.Text(argvalue2)
    tmp3, err1115 := (strconv.Atoi(flag.Arg(4)))
    if err1115 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetVer(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getVerTs":
    if flag.NArg() - 1 != 5 {
      fmt.Fprint(os.Stderr, "GetVerTs requires 5 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Text(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := Hbase.Text(argvalue1)
    argvalue2 := flag.Arg(3)
    value2 := Hbase.Text(argvalue2)
    argvalue3, err1119 := (strconv.Atoi64(flag.Arg(4)))
    if err1119 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    tmp4, err1120 := (strconv.Atoi(flag.Arg(5)))
    if err1120 != nil {
      Usage()
      return
    }
    argvalue4 := int32(tmp4)
    value4 := argvalue4
    fmt.Print(client.GetVerTs(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "getRow":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetRow requires 2 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Text(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := Hbase.Text(argvalue1)
    fmt.Print(client.GetRow(value0, value1))
    fmt.Print("\n")
    break
  case "getRowWithColumns":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetRowWithColumns requires 3 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Text(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := Hbase.Text(argvalue1)
    arg1125 := flag.Arg(3)
    mbTrans1126 := thrift.NewTMemoryBufferLen(len(arg1125))
    defer mbTrans1126.Close()
    _, err1127 := mbTrans1126.WriteString(arg1125)
    if err1127 != nil { 
      Usage()
      return
    }
    factory1128 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1129 := factory1128.GetProtocol(mbTrans1126)
    containerStruct2 := Hbase.NewGetRowWithColumnsArgs()
    err1130 := containerStruct2.ReadField3(jsProt1129)
    if err1130 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Columns
    value2 := argvalue2
    fmt.Print(client.GetRowWithColumns(value0, value1, value2))
    fmt.Print("\n")
    break
  case "getRowTs":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetRowTs requires 3 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Text(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := Hbase.Text(argvalue1)
    argvalue2, err1133 := (strconv.Atoi64(flag.Arg(3)))
    if err1133 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.GetRowTs(value0, value1, value2))
    fmt.Print("\n")
    break
  case "getRowWithColumnsTs":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "GetRowWithColumnsTs requires 4 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Text(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := Hbase.Text(argvalue1)
    arg1136 := flag.Arg(3)
    mbTrans1137 := thrift.NewTMemoryBufferLen(len(arg1136))
    defer mbTrans1137.Close()
    _, err1138 := mbTrans1137.WriteString(arg1136)
    if err1138 != nil { 
      Usage()
      return
    }
    factory1139 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1140 := factory1139.GetProtocol(mbTrans1137)
    containerStruct2 := Hbase.NewGetRowWithColumnsTsArgs()
    err1141 := containerStruct2.ReadField3(jsProt1140)
    if err1141 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Columns
    value2 := argvalue2
    argvalue3, err1142 := (strconv.Atoi64(flag.Arg(4)))
    if err1142 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.GetRowWithColumnsTs(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getRows":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "GetRows requires 2 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Text(argvalue0)
    arg1144 := flag.Arg(2)
    mbTrans1145 := thrift.NewTMemoryBufferLen(len(arg1144))
    defer mbTrans1145.Close()
    _, err1146 := mbTrans1145.WriteString(arg1144)
    if err1146 != nil { 
      Usage()
      return
    }
    factory1147 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1148 := factory1147.GetProtocol(mbTrans1145)
    containerStruct1 := Hbase.NewGetRowsArgs()
    err1149 := containerStruct1.ReadField2(jsProt1148)
    if err1149 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Rows
    value1 := argvalue1
    fmt.Print(client.GetRows(value0, value1))
    fmt.Print("\n")
    break
  case "getRowsWithColumns":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetRowsWithColumns requires 3 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Text(argvalue0)
    arg1151 := flag.Arg(2)
    mbTrans1152 := thrift.NewTMemoryBufferLen(len(arg1151))
    defer mbTrans1152.Close()
    _, err1153 := mbTrans1152.WriteString(arg1151)
    if err1153 != nil { 
      Usage()
      return
    }
    factory1154 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1155 := factory1154.GetProtocol(mbTrans1152)
    containerStruct1 := Hbase.NewGetRowsWithColumnsArgs()
    err1156 := containerStruct1.ReadField2(jsProt1155)
    if err1156 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Rows
    value1 := argvalue1
    arg1157 := flag.Arg(3)
    mbTrans1158 := thrift.NewTMemoryBufferLen(len(arg1157))
    defer mbTrans1158.Close()
    _, err1159 := mbTrans1158.WriteString(arg1157)
    if err1159 != nil { 
      Usage()
      return
    }
    factory1160 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1161 := factory1160.GetProtocol(mbTrans1158)
    containerStruct2 := Hbase.NewGetRowsWithColumnsArgs()
    err1162 := containerStruct2.ReadField3(jsProt1161)
    if err1162 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Columns
    value2 := argvalue2
    fmt.Print(client.GetRowsWithColumns(value0, value1, value2))
    fmt.Print("\n")
    break
  case "getRowsTs":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "GetRowsTs requires 3 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Text(argvalue0)
    arg1164 := flag.Arg(2)
    mbTrans1165 := thrift.NewTMemoryBufferLen(len(arg1164))
    defer mbTrans1165.Close()
    _, err1166 := mbTrans1165.WriteString(arg1164)
    if err1166 != nil { 
      Usage()
      return
    }
    factory1167 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1168 := factory1167.GetProtocol(mbTrans1165)
    containerStruct1 := Hbase.NewGetRowsTsArgs()
    err1169 := containerStruct1.ReadField2(jsProt1168)
    if err1169 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Rows
    value1 := argvalue1
    argvalue2, err1170 := (strconv.Atoi64(flag.Arg(3)))
    if err1170 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.GetRowsTs(value0, value1, value2))
    fmt.Print("\n")
    break
  case "getRowsWithColumnsTs":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "GetRowsWithColumnsTs requires 4 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Text(argvalue0)
    arg1172 := flag.Arg(2)
    mbTrans1173 := thrift.NewTMemoryBufferLen(len(arg1172))
    defer mbTrans1173.Close()
    _, err1174 := mbTrans1173.WriteString(arg1172)
    if err1174 != nil { 
      Usage()
      return
    }
    factory1175 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1176 := factory1175.GetProtocol(mbTrans1173)
    containerStruct1 := Hbase.NewGetRowsWithColumnsTsArgs()
    err1177 := containerStruct1.ReadField2(jsProt1176)
    if err1177 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Rows
    value1 := argvalue1
    arg1178 := flag.Arg(3)
    mbTrans1179 := thrift.NewTMemoryBufferLen(len(arg1178))
    defer mbTrans1179.Close()
    _, err1180 := mbTrans1179.WriteString(arg1178)
    if err1180 != nil { 
      Usage()
      return
    }
    factory1181 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1182 := factory1181.GetProtocol(mbTrans1179)
    containerStruct2 := Hbase.NewGetRowsWithColumnsTsArgs()
    err1183 := containerStruct2.ReadField3(jsProt1182)
    if err1183 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Columns
    value2 := argvalue2
    argvalue3, err1184 := (strconv.Atoi64(flag.Arg(4)))
    if err1184 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.GetRowsWithColumnsTs(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "mutateRow":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "MutateRow requires 3 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Text(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := Hbase.Text(argvalue1)
    arg1187 := flag.Arg(3)
    mbTrans1188 := thrift.NewTMemoryBufferLen(len(arg1187))
    defer mbTrans1188.Close()
    _, err1189 := mbTrans1188.WriteString(arg1187)
    if err1189 != nil { 
      Usage()
      return
    }
    factory1190 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1191 := factory1190.GetProtocol(mbTrans1188)
    containerStruct2 := Hbase.NewMutateRowArgs()
    err1192 := containerStruct2.ReadField3(jsProt1191)
    if err1192 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Mutations
    value2 := argvalue2
    fmt.Print(client.MutateRow(value0, value1, value2))
    fmt.Print("\n")
    break
  case "mutateRowTs":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "MutateRowTs requires 4 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Text(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := Hbase.Text(argvalue1)
    arg1195 := flag.Arg(3)
    mbTrans1196 := thrift.NewTMemoryBufferLen(len(arg1195))
    defer mbTrans1196.Close()
    _, err1197 := mbTrans1196.WriteString(arg1195)
    if err1197 != nil { 
      Usage()
      return
    }
    factory1198 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1199 := factory1198.GetProtocol(mbTrans1196)
    containerStruct2 := Hbase.NewMutateRowTsArgs()
    err1200 := containerStruct2.ReadField3(jsProt1199)
    if err1200 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Mutations
    value2 := argvalue2
    argvalue3, err1201 := (strconv.Atoi64(flag.Arg(4)))
    if err1201 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.MutateRowTs(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "mutateRows":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "MutateRows requires 2 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Text(argvalue0)
    arg1203 := flag.Arg(2)
    mbTrans1204 := thrift.NewTMemoryBufferLen(len(arg1203))
    defer mbTrans1204.Close()
    _, err1205 := mbTrans1204.WriteString(arg1203)
    if err1205 != nil { 
      Usage()
      return
    }
    factory1206 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1207 := factory1206.GetProtocol(mbTrans1204)
    containerStruct1 := Hbase.NewMutateRowsArgs()
    err1208 := containerStruct1.ReadField2(jsProt1207)
    if err1208 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.RowBatches
    value1 := argvalue1
    fmt.Print(client.MutateRows(value0, value1))
    fmt.Print("\n")
    break
  case "mutateRowsTs":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "MutateRowsTs requires 3 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Text(argvalue0)
    arg1210 := flag.Arg(2)
    mbTrans1211 := thrift.NewTMemoryBufferLen(len(arg1210))
    defer mbTrans1211.Close()
    _, err1212 := mbTrans1211.WriteString(arg1210)
    if err1212 != nil { 
      Usage()
      return
    }
    factory1213 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1214 := factory1213.GetProtocol(mbTrans1211)
    containerStruct1 := Hbase.NewMutateRowsTsArgs()
    err1215 := containerStruct1.ReadField2(jsProt1214)
    if err1215 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.RowBatches
    value1 := argvalue1
    argvalue2, err1216 := (strconv.Atoi64(flag.Arg(3)))
    if err1216 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.MutateRowsTs(value0, value1, value2))
    fmt.Print("\n")
    break
  case "atomicIncrement":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "AtomicIncrement requires 4 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Text(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := Hbase.Text(argvalue1)
    argvalue2 := flag.Arg(3)
    value2 := Hbase.Text(argvalue2)
    argvalue3, err1220 := (strconv.Atoi64(flag.Arg(4)))
    if err1220 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AtomicIncrement(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "deleteAll":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "DeleteAll requires 3 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Text(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := Hbase.Text(argvalue1)
    argvalue2 := flag.Arg(3)
    value2 := Hbase.Text(argvalue2)
    fmt.Print(client.DeleteAll(value0, value1, value2))
    fmt.Print("\n")
    break
  case "deleteAllTs":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "DeleteAllTs requires 4 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Text(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := Hbase.Text(argvalue1)
    argvalue2 := flag.Arg(3)
    value2 := Hbase.Text(argvalue2)
    argvalue3, err1227 := (strconv.Atoi64(flag.Arg(4)))
    if err1227 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DeleteAllTs(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "deleteAllRow":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "DeleteAllRow requires 2 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Text(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := Hbase.Text(argvalue1)
    fmt.Print(client.DeleteAllRow(value0, value1))
    fmt.Print("\n")
    break
  case "deleteAllRowTs":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "DeleteAllRowTs requires 3 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Text(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := Hbase.Text(argvalue1)
    argvalue2, err1232 := (strconv.Atoi64(flag.Arg(3)))
    if err1232 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.DeleteAllRowTs(value0, value1, value2))
    fmt.Print("\n")
    break
  case "scannerOpen":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "ScannerOpen requires 3 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Text(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := Hbase.Text(argvalue1)
    arg1235 := flag.Arg(3)
    mbTrans1236 := thrift.NewTMemoryBufferLen(len(arg1235))
    defer mbTrans1236.Close()
    _, err1237 := mbTrans1236.WriteString(arg1235)
    if err1237 != nil { 
      Usage()
      return
    }
    factory1238 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1239 := factory1238.GetProtocol(mbTrans1236)
    containerStruct2 := Hbase.NewScannerOpenArgs()
    err1240 := containerStruct2.ReadField3(jsProt1239)
    if err1240 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Columns
    value2 := argvalue2
    fmt.Print(client.ScannerOpen(value0, value1, value2))
    fmt.Print("\n")
    break
  case "scannerOpenWithStop":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "ScannerOpenWithStop requires 4 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Text(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := Hbase.Text(argvalue1)
    argvalue2 := flag.Arg(3)
    value2 := Hbase.Text(argvalue2)
    arg1244 := flag.Arg(4)
    mbTrans1245 := thrift.NewTMemoryBufferLen(len(arg1244))
    defer mbTrans1245.Close()
    _, err1246 := mbTrans1245.WriteString(arg1244)
    if err1246 != nil { 
      Usage()
      return
    }
    factory1247 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1248 := factory1247.GetProtocol(mbTrans1245)
    containerStruct3 := Hbase.NewScannerOpenWithStopArgs()
    err1249 := containerStruct3.ReadField4(jsProt1248)
    if err1249 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Columns
    value3 := argvalue3
    fmt.Print(client.ScannerOpenWithStop(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "scannerOpenWithPrefix":
    if flag.NArg() - 1 != 3 {
      fmt.Fprint(os.Stderr, "ScannerOpenWithPrefix requires 3 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Text(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := Hbase.Text(argvalue1)
    arg1252 := flag.Arg(3)
    mbTrans1253 := thrift.NewTMemoryBufferLen(len(arg1252))
    defer mbTrans1253.Close()
    _, err1254 := mbTrans1253.WriteString(arg1252)
    if err1254 != nil { 
      Usage()
      return
    }
    factory1255 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1256 := factory1255.GetProtocol(mbTrans1253)
    containerStruct2 := Hbase.NewScannerOpenWithPrefixArgs()
    err1257 := containerStruct2.ReadField3(jsProt1256)
    if err1257 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Columns
    value2 := argvalue2
    fmt.Print(client.ScannerOpenWithPrefix(value0, value1, value2))
    fmt.Print("\n")
    break
  case "scannerOpenTs":
    if flag.NArg() - 1 != 4 {
      fmt.Fprint(os.Stderr, "ScannerOpenTs requires 4 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Text(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := Hbase.Text(argvalue1)
    arg1260 := flag.Arg(3)
    mbTrans1261 := thrift.NewTMemoryBufferLen(len(arg1260))
    defer mbTrans1261.Close()
    _, err1262 := mbTrans1261.WriteString(arg1260)
    if err1262 != nil { 
      Usage()
      return
    }
    factory1263 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1264 := factory1263.GetProtocol(mbTrans1261)
    containerStruct2 := Hbase.NewScannerOpenTsArgs()
    err1265 := containerStruct2.ReadField3(jsProt1264)
    if err1265 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Columns
    value2 := argvalue2
    argvalue3, err1266 := (strconv.Atoi64(flag.Arg(4)))
    if err1266 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.ScannerOpenTs(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "scannerOpenWithStopTs":
    if flag.NArg() - 1 != 5 {
      fmt.Fprint(os.Stderr, "ScannerOpenWithStopTs requires 5 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := Hbase.Text(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := Hbase.Text(argvalue1)
    argvalue2 := flag.Arg(3)
    value2 := Hbase.Text(argvalue2)
    arg1270 := flag.Arg(4)
    mbTrans1271 := thrift.NewTMemoryBufferLen(len(arg1270))
    defer mbTrans1271.Close()
    _, err1272 := mbTrans1271.WriteString(arg1270)
    if err1272 != nil { 
      Usage()
      return
    }
    factory1273 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1274 := factory1273.GetProtocol(mbTrans1271)
    containerStruct3 := Hbase.NewScannerOpenWithStopTsArgs()
    err1275 := containerStruct3.ReadField4(jsProt1274)
    if err1275 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Columns
    value3 := argvalue3
    argvalue4, err1276 := (strconv.Atoi64(flag.Arg(5)))
    if err1276 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.ScannerOpenWithStopTs(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "scannerGet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ScannerGet requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1277 := (strconv.Atoi(flag.Arg(1)))
    if err1277 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := Hbase.ScannerID(argvalue0)
    fmt.Print(client.ScannerGet(value0))
    fmt.Print("\n")
    break
  case "scannerGetList":
    if flag.NArg() - 1 != 2 {
      fmt.Fprint(os.Stderr, "ScannerGetList requires 2 args\n")
      flag.Usage()
    }
    tmp0, err1278 := (strconv.Atoi(flag.Arg(1)))
    if err1278 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := Hbase.ScannerID(argvalue0)
    tmp1, err1279 := (strconv.Atoi(flag.Arg(2)))
    if err1279 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.ScannerGetList(value0, value1))
    fmt.Print("\n")
    break
  case "scannerClose":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "ScannerClose requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1280 := (strconv.Atoi(flag.Arg(1)))
    if err1280 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := Hbase.ScannerID(argvalue0)
    fmt.Print(client.ScannerClose(value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid function ", cmd, "\n")
  }
}
