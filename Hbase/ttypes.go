/* Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package Hbase;

import (
        "github.com/araddon/thrift4go/lib/go/thrift"
        "fmt"
)



type Text string

type Bytes string

type ScannerID int32

/**
 * TCell - Used to transport a cell value (byte[]) and the timestamp it was
 * stored with together as a result for get and getRow methods. This promotes
 * the timestamp of a cell to a first-class value, making it easy to take
 * note of temporal data. Cell is used all the way from HStore up to HTable.
 * 
 * Attributes:
 *  - Value
 *  - Timestamp
 */
type TCell struct {
  thrift.TStruct
  Value Bytes "value"; // 1
  Timestamp int64 "timestamp"; // 2
}

func NewTCell() *TCell {
  output := &TCell{
    TStruct:thrift.NewTStruct("TCell", []thrift.TField{
    thrift.NewTField("value", thrift.STRING, 1),
    thrift.NewTField("timestamp", thrift.I64, 2),
    }),
  }
  {
  }
  return output
}

func (p *TCell) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "value" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "timestamp" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *TCell) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v0, err1 := iprot.ReadString()
  if err1 != nil { return thrift.NewTProtocolExceptionReadField(1, "value", p.ThriftName(), err1); }
  p.Value = Bytes(v0)
  return err
}

func (p *TCell) ReadFieldValue(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *TCell) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v2, err3 := iprot.ReadI64()
  if err3 != nil { return thrift.NewTProtocolExceptionReadField(2, "timestamp", p.ThriftName(), err3); }
  p.Timestamp = v2
  return err
}

func (p *TCell) ReadFieldTimestamp(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *TCell) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("TCell")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *TCell) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Value) < 1 { return nil}
  err = oprot.WriteFieldBegin("value", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "value", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "value", p.ThriftName(), err); }
  return err
}

func (p *TCell) WriteFieldValue(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *TCell) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.Timestamp) == 0 { return nil}
  err = oprot.WriteFieldBegin("timestamp", thrift.I64, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.Timestamp))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "timestamp", p.ThriftName(), err); }
  return err
}

func (p *TCell) WriteFieldTimestamp(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *TCell) TStructName() string {
  return "TCell"
}

func (p *TCell) ThriftName() string {
  return "TCell"
}

func (p *TCell) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCell(%+v)", *p)
}

func (p *TCell) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*TCell)
  if !ok {
    return 0, false
  }
  if p.Value != data.Value {
    if p.Value < data.Value {
      return -1, true
    }
    return 1, true
  }
  if p.Timestamp != data.Timestamp {
    if p.Timestamp < data.Timestamp {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *TCell) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Value
  case 2: return p.Timestamp
  }
  return nil
}

func (p *TCell) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("value", thrift.STRING, 1),
    thrift.NewTField("timestamp", thrift.I64, 2),
    })
}

/**
 * An HColumnDescriptor contains information about a column family
 * such as the number of versions, compression settings, etc. It is
 * used as input when creating a table or adding a column.
 * 
 * Attributes:
 *  - Name
 *  - MaxVersions
 *  - Compression
 *  - InMemory
 *  - BloomFilterType
 *  - BloomFilterVectorSize
 *  - BloomFilterNbHashes
 *  - BlockCacheEnabled
 *  - TimeToLive
 */
type ColumnDescriptor struct {
  thrift.TStruct
  Name Text "name"; // 1
  MaxVersions int32 "maxVersions"; // 2
  Compression string "compression"; // 3
  InMemory bool "inMemory"; // 4
  BloomFilterType string "bloomFilterType"; // 5
  BloomFilterVectorSize int32 "bloomFilterVectorSize"; // 6
  BloomFilterNbHashes int32 "bloomFilterNbHashes"; // 7
  BlockCacheEnabled bool "blockCacheEnabled"; // 8
  TimeToLive int32 "timeToLive"; // 9
}

func NewColumnDescriptor() *ColumnDescriptor {
  output := &ColumnDescriptor{
    TStruct:thrift.NewTStruct("ColumnDescriptor", []thrift.TField{
    thrift.NewTField("name", thrift.STRING, 1),
    thrift.NewTField("maxVersions", thrift.I32, 2),
    thrift.NewTField("compression", thrift.STRING, 3),
    thrift.NewTField("inMemory", thrift.BOOL, 4),
    thrift.NewTField("bloomFilterType", thrift.STRING, 5),
    thrift.NewTField("bloomFilterVectorSize", thrift.I32, 6),
    thrift.NewTField("bloomFilterNbHashes", thrift.I32, 7),
    thrift.NewTField("blockCacheEnabled", thrift.BOOL, 8),
    thrift.NewTField("timeToLive", thrift.I32, 9),
    }),
  }
  {
    output.MaxVersions = 3
    output.Compression = "NONE"
    output.InMemory = false
    output.BloomFilterType = "NONE"
    output.BloomFilterVectorSize = 0
    output.BloomFilterNbHashes = 0
    output.BlockCacheEnabled = false
    output.TimeToLive = -1
  }
  return output
}

func (p *ColumnDescriptor) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "maxVersions" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "compression" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "inMemory" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "bloomFilterType" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "bloomFilterVectorSize" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 7 || fieldName == "bloomFilterNbHashes" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 8 || fieldName == "blockCacheEnabled" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 9 || fieldName == "timeToLive" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField9(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField9(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ColumnDescriptor) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v4, err5 := iprot.ReadString()
  if err5 != nil { return thrift.NewTProtocolExceptionReadField(1, "name", p.ThriftName(), err5); }
  p.Name = Text(v4)
  return err
}

func (p *ColumnDescriptor) ReadFieldName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ColumnDescriptor) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v6, err7 := iprot.ReadI32()
  if err7 != nil { return thrift.NewTProtocolExceptionReadField(2, "maxVersions", p.ThriftName(), err7); }
  p.MaxVersions = v6
  return err
}

func (p *ColumnDescriptor) ReadFieldMaxVersions(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ColumnDescriptor) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v8, err9 := iprot.ReadString()
  if err9 != nil { return thrift.NewTProtocolExceptionReadField(3, "compression", p.ThriftName(), err9); }
  p.Compression = v8
  return err
}

func (p *ColumnDescriptor) ReadFieldCompression(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ColumnDescriptor) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v10, err11 := iprot.ReadBool()
  if err11 != nil { return thrift.NewTProtocolExceptionReadField(4, "inMemory", p.ThriftName(), err11); }
  p.InMemory = v10
  return err
}

func (p *ColumnDescriptor) ReadFieldInMemory(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *ColumnDescriptor) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v12, err13 := iprot.ReadString()
  if err13 != nil { return thrift.NewTProtocolExceptionReadField(5, "bloomFilterType", p.ThriftName(), err13); }
  p.BloomFilterType = v12
  return err
}

func (p *ColumnDescriptor) ReadFieldBloomFilterType(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *ColumnDescriptor) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v14, err15 := iprot.ReadI32()
  if err15 != nil { return thrift.NewTProtocolExceptionReadField(6, "bloomFilterVectorSize", p.ThriftName(), err15); }
  p.BloomFilterVectorSize = v14
  return err
}

func (p *ColumnDescriptor) ReadFieldBloomFilterVectorSize(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *ColumnDescriptor) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v16, err17 := iprot.ReadI32()
  if err17 != nil { return thrift.NewTProtocolExceptionReadField(7, "bloomFilterNbHashes", p.ThriftName(), err17); }
  p.BloomFilterNbHashes = v16
  return err
}

func (p *ColumnDescriptor) ReadFieldBloomFilterNbHashes(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField7(iprot)
}

func (p *ColumnDescriptor) ReadField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v18, err19 := iprot.ReadBool()
  if err19 != nil { return thrift.NewTProtocolExceptionReadField(8, "blockCacheEnabled", p.ThriftName(), err19); }
  p.BlockCacheEnabled = v18
  return err
}

func (p *ColumnDescriptor) ReadFieldBlockCacheEnabled(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField8(iprot)
}

func (p *ColumnDescriptor) ReadField9(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v20, err21 := iprot.ReadI32()
  if err21 != nil { return thrift.NewTProtocolExceptionReadField(9, "timeToLive", p.ThriftName(), err21); }
  p.TimeToLive = v20
  return err
}

func (p *ColumnDescriptor) ReadFieldTimeToLive(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField9(iprot)
}

func (p *ColumnDescriptor) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ColumnDescriptor")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = p.WriteField7(oprot)
  if err != nil { return err }
  err = p.WriteField8(oprot)
  if err != nil { return err }
  err = p.WriteField9(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ColumnDescriptor) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Name) < 1 { return nil}
  err = oprot.WriteFieldBegin("name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Name))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  return err
}

func (p *ColumnDescriptor) WriteFieldName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ColumnDescriptor) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.MaxVersions) == 0 { return nil}
  err = oprot.WriteFieldBegin("maxVersions", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "maxVersions", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.MaxVersions))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "maxVersions", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "maxVersions", p.ThriftName(), err); }
  return err
}

func (p *ColumnDescriptor) WriteFieldMaxVersions(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ColumnDescriptor) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Compression) < 1 { return nil}
  err = oprot.WriteFieldBegin("compression", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "compression", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Compression))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "compression", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "compression", p.ThriftName(), err); }
  return err
}

func (p *ColumnDescriptor) WriteFieldCompression(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ColumnDescriptor) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("inMemory", thrift.BOOL, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "inMemory", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.InMemory))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "inMemory", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "inMemory", p.ThriftName(), err); }
  return err
}

func (p *ColumnDescriptor) WriteFieldInMemory(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *ColumnDescriptor) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.BloomFilterType) < 1 { return nil}
  err = oprot.WriteFieldBegin("bloomFilterType", thrift.STRING, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "bloomFilterType", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.BloomFilterType))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "bloomFilterType", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "bloomFilterType", p.ThriftName(), err); }
  return err
}

func (p *ColumnDescriptor) WriteFieldBloomFilterType(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *ColumnDescriptor) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.BloomFilterVectorSize) == 0 { return nil}
  err = oprot.WriteFieldBegin("bloomFilterVectorSize", thrift.I32, 6)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "bloomFilterVectorSize", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.BloomFilterVectorSize))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "bloomFilterVectorSize", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "bloomFilterVectorSize", p.ThriftName(), err); }
  return err
}

func (p *ColumnDescriptor) WriteFieldBloomFilterVectorSize(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *ColumnDescriptor) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.BloomFilterNbHashes) == 0 { return nil}
  err = oprot.WriteFieldBegin("bloomFilterNbHashes", thrift.I32, 7)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "bloomFilterNbHashes", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.BloomFilterNbHashes))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "bloomFilterNbHashes", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "bloomFilterNbHashes", p.ThriftName(), err); }
  return err
}

func (p *ColumnDescriptor) WriteFieldBloomFilterNbHashes(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField7(oprot)
}

func (p *ColumnDescriptor) WriteField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("blockCacheEnabled", thrift.BOOL, 8)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "blockCacheEnabled", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.BlockCacheEnabled))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "blockCacheEnabled", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "blockCacheEnabled", p.ThriftName(), err); }
  return err
}

func (p *ColumnDescriptor) WriteFieldBlockCacheEnabled(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField8(oprot)
}

func (p *ColumnDescriptor) WriteField9(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.TimeToLive) == 0 { return nil}
  err = oprot.WriteFieldBegin("timeToLive", thrift.I32, 9)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(9, "timeToLive", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.TimeToLive))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(9, "timeToLive", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(9, "timeToLive", p.ThriftName(), err); }
  return err
}

func (p *ColumnDescriptor) WriteFieldTimeToLive(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField9(oprot)
}

func (p *ColumnDescriptor) TStructName() string {
  return "ColumnDescriptor"
}

func (p *ColumnDescriptor) ThriftName() string {
  return "ColumnDescriptor"
}

func (p *ColumnDescriptor) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ColumnDescriptor(%+v)", *p)
}

func (p *ColumnDescriptor) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ColumnDescriptor)
  if !ok {
    return 0, false
  }
  if p.Name != data.Name {
    if p.Name < data.Name {
      return -1, true
    }
    return 1, true
  }
  if p.MaxVersions != data.MaxVersions {
    if p.MaxVersions < data.MaxVersions {
      return -1, true
    }
    return 1, true
  }
  if p.Compression != data.Compression {
    if p.Compression < data.Compression {
      return -1, true
    }
    return 1, true
  }
  if cmp := thrift.CompareBool(p.InMemory, data.InMemory); cmp != 0 {
    return cmp, true
  }
  if p.BloomFilterType != data.BloomFilterType {
    if p.BloomFilterType < data.BloomFilterType {
      return -1, true
    }
    return 1, true
  }
  if p.BloomFilterVectorSize != data.BloomFilterVectorSize {
    if p.BloomFilterVectorSize < data.BloomFilterVectorSize {
      return -1, true
    }
    return 1, true
  }
  if p.BloomFilterNbHashes != data.BloomFilterNbHashes {
    if p.BloomFilterNbHashes < data.BloomFilterNbHashes {
      return -1, true
    }
    return 1, true
  }
  if cmp := thrift.CompareBool(p.BlockCacheEnabled, data.BlockCacheEnabled); cmp != 0 {
    return cmp, true
  }
  if p.TimeToLive != data.TimeToLive {
    if p.TimeToLive < data.TimeToLive {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *ColumnDescriptor) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Name
  case 2: return p.MaxVersions
  case 3: return p.Compression
  case 4: return p.InMemory
  case 5: return p.BloomFilterType
  case 6: return p.BloomFilterVectorSize
  case 7: return p.BloomFilterNbHashes
  case 8: return p.BlockCacheEnabled
  case 9: return p.TimeToLive
  }
  return nil
}

func (p *ColumnDescriptor) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("name", thrift.STRING, 1),
    thrift.NewTField("maxVersions", thrift.I32, 2),
    thrift.NewTField("compression", thrift.STRING, 3),
    thrift.NewTField("inMemory", thrift.BOOL, 4),
    thrift.NewTField("bloomFilterType", thrift.STRING, 5),
    thrift.NewTField("bloomFilterVectorSize", thrift.I32, 6),
    thrift.NewTField("bloomFilterNbHashes", thrift.I32, 7),
    thrift.NewTField("blockCacheEnabled", thrift.BOOL, 8),
    thrift.NewTField("timeToLive", thrift.I32, 9),
    })
}

/**
 * A TRegionInfo contains information about an HTable region.
 * 
 * Attributes:
 *  - StartKey
 *  - EndKey
 *  - Id
 *  - Name
 *  - Version
 */
type TRegionInfo struct {
  thrift.TStruct
  StartKey Text "startKey"; // 1
  EndKey Text "endKey"; // 2
  Id int64 "id"; // 3
  Name Text "name"; // 4
  Version byte "version"; // 5
}

func NewTRegionInfo() *TRegionInfo {
  output := &TRegionInfo{
    TStruct:thrift.NewTStruct("TRegionInfo", []thrift.TField{
    thrift.NewTField("startKey", thrift.STRING, 1),
    thrift.NewTField("endKey", thrift.STRING, 2),
    thrift.NewTField("id", thrift.I64, 3),
    thrift.NewTField("name", thrift.STRING, 4),
    thrift.NewTField("version", thrift.BYTE, 5),
    }),
  }
  {
  }
  return output
}

func (p *TRegionInfo) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "startKey" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "endKey" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "id" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "version" {
      if fieldTypeId == thrift.BYTE {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *TRegionInfo) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v22, err23 := iprot.ReadString()
  if err23 != nil { return thrift.NewTProtocolExceptionReadField(1, "startKey", p.ThriftName(), err23); }
  p.StartKey = Text(v22)
  return err
}

func (p *TRegionInfo) ReadFieldStartKey(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *TRegionInfo) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v24, err25 := iprot.ReadString()
  if err25 != nil { return thrift.NewTProtocolExceptionReadField(2, "endKey", p.ThriftName(), err25); }
  p.EndKey = Text(v24)
  return err
}

func (p *TRegionInfo) ReadFieldEndKey(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *TRegionInfo) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v26, err27 := iprot.ReadI64()
  if err27 != nil { return thrift.NewTProtocolExceptionReadField(3, "id", p.ThriftName(), err27); }
  p.Id = v26
  return err
}

func (p *TRegionInfo) ReadFieldId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *TRegionInfo) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v28, err29 := iprot.ReadString()
  if err29 != nil { return thrift.NewTProtocolExceptionReadField(4, "name", p.ThriftName(), err29); }
  p.Name = Text(v28)
  return err
}

func (p *TRegionInfo) ReadFieldName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *TRegionInfo) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v30, err31 := iprot.ReadByte()
  if err31 != nil { return thrift.NewTProtocolExceptionReadField(5, "version", p.ThriftName(), err31); }
  p.Version = v30
  return err
}

func (p *TRegionInfo) ReadFieldVersion(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *TRegionInfo) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("TRegionInfo")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *TRegionInfo) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.StartKey) < 1 { return nil}
  err = oprot.WriteFieldBegin("startKey", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "startKey", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.StartKey))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "startKey", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "startKey", p.ThriftName(), err); }
  return err
}

func (p *TRegionInfo) WriteFieldStartKey(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *TRegionInfo) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.EndKey) < 1 { return nil}
  err = oprot.WriteFieldBegin("endKey", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "endKey", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.EndKey))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "endKey", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "endKey", p.ThriftName(), err); }
  return err
}

func (p *TRegionInfo) WriteFieldEndKey(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *TRegionInfo) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.Id) == 0 { return nil}
  err = oprot.WriteFieldBegin("id", thrift.I64, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "id", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.Id))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "id", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "id", p.ThriftName(), err); }
  return err
}

func (p *TRegionInfo) WriteFieldId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *TRegionInfo) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Name) < 1 { return nil}
  err = oprot.WriteFieldBegin("name", thrift.STRING, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Name))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "name", p.ThriftName(), err); }
  return err
}

func (p *TRegionInfo) WriteFieldName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *TRegionInfo) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("version", thrift.BYTE, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "version", p.ThriftName(), err); }
  err = oprot.WriteByte(byte(p.Version))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "version", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "version", p.ThriftName(), err); }
  return err
}

func (p *TRegionInfo) WriteFieldVersion(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *TRegionInfo) TStructName() string {
  return "TRegionInfo"
}

func (p *TRegionInfo) ThriftName() string {
  return "TRegionInfo"
}

func (p *TRegionInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TRegionInfo(%+v)", *p)
}

func (p *TRegionInfo) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*TRegionInfo)
  if !ok {
    return 0, false
  }
  if p.StartKey != data.StartKey {
    if p.StartKey < data.StartKey {
      return -1, true
    }
    return 1, true
  }
  if p.EndKey != data.EndKey {
    if p.EndKey < data.EndKey {
      return -1, true
    }
    return 1, true
  }
  if p.Id != data.Id {
    if p.Id < data.Id {
      return -1, true
    }
    return 1, true
  }
  if p.Name != data.Name {
    if p.Name < data.Name {
      return -1, true
    }
    return 1, true
  }
  if p.Version != data.Version {
    if p.Version < data.Version {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *TRegionInfo) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.StartKey
  case 2: return p.EndKey
  case 3: return p.Id
  case 4: return p.Name
  case 5: return p.Version
  }
  return nil
}

func (p *TRegionInfo) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("startKey", thrift.STRING, 1),
    thrift.NewTField("endKey", thrift.STRING, 2),
    thrift.NewTField("id", thrift.I64, 3),
    thrift.NewTField("name", thrift.STRING, 4),
    thrift.NewTField("version", thrift.BYTE, 5),
    })
}

/**
 * A Mutation object is used to either update or delete a column-value.
 * 
 * Attributes:
 *  - IsDelete
 *  - Column
 *  - Value
 */
type Mutation struct {
  thrift.TStruct
  IsDelete bool "isDelete"; // 1
  Column Text "column"; // 2
  Value Text "value"; // 3
}

func NewMutation() *Mutation {
  output := &Mutation{
    TStruct:thrift.NewTStruct("Mutation", []thrift.TField{
    thrift.NewTField("isDelete", thrift.BOOL, 1),
    thrift.NewTField("column", thrift.STRING, 2),
    thrift.NewTField("value", thrift.STRING, 3),
    }),
  }
  {
    output.IsDelete = false
  }
  return output
}

func (p *Mutation) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "isDelete" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "column" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "value" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *Mutation) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v32, err33 := iprot.ReadBool()
  if err33 != nil { return thrift.NewTProtocolExceptionReadField(1, "isDelete", p.ThriftName(), err33); }
  p.IsDelete = v32
  return err
}

func (p *Mutation) ReadFieldIsDelete(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *Mutation) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v34, err35 := iprot.ReadString()
  if err35 != nil { return thrift.NewTProtocolExceptionReadField(2, "column", p.ThriftName(), err35); }
  p.Column = Text(v34)
  return err
}

func (p *Mutation) ReadFieldColumn(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *Mutation) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v36, err37 := iprot.ReadString()
  if err37 != nil { return thrift.NewTProtocolExceptionReadField(3, "value", p.ThriftName(), err37); }
  p.Value = Text(v36)
  return err
}

func (p *Mutation) ReadFieldValue(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *Mutation) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Mutation")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *Mutation) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("isDelete", thrift.BOOL, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "isDelete", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.IsDelete))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "isDelete", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "isDelete", p.ThriftName(), err); }
  return err
}

func (p *Mutation) WriteFieldIsDelete(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *Mutation) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Column) < 1 { return nil}
  err = oprot.WriteFieldBegin("column", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "column", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Column))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "column", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "column", p.ThriftName(), err); }
  return err
}

func (p *Mutation) WriteFieldColumn(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *Mutation) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Value) < 1 { return nil}
  err = oprot.WriteFieldBegin("value", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "value", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "value", p.ThriftName(), err); }
  return err
}

func (p *Mutation) WriteFieldValue(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *Mutation) TStructName() string {
  return "Mutation"
}

func (p *Mutation) ThriftName() string {
  return "Mutation"
}

func (p *Mutation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Mutation(%+v)", *p)
}

func (p *Mutation) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*Mutation)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.IsDelete, data.IsDelete); cmp != 0 {
    return cmp, true
  }
  if p.Column != data.Column {
    if p.Column < data.Column {
      return -1, true
    }
    return 1, true
  }
  if p.Value != data.Value {
    if p.Value < data.Value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *Mutation) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.IsDelete
  case 2: return p.Column
  case 3: return p.Value
  }
  return nil
}

func (p *Mutation) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("isDelete", thrift.BOOL, 1),
    thrift.NewTField("column", thrift.STRING, 2),
    thrift.NewTField("value", thrift.STRING, 3),
    })
}

/**
 * A BatchMutation object is used to apply a number of Mutations to a single row.
 * 
 * Attributes:
 *  - Row
 *  - Mutations
 */
type BatchMutation struct {
  thrift.TStruct
  Row Text "row"; // 1
  Mutations thrift.TList "mutations"; // 2
}

func NewBatchMutation() *BatchMutation {
  output := &BatchMutation{
    TStruct:thrift.NewTStruct("BatchMutation", []thrift.TField{
    thrift.NewTField("row", thrift.STRING, 1),
    thrift.NewTField("mutations", thrift.LIST, 2),
    }),
  }
  {
  }
  return output
}

func (p *BatchMutation) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "row" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "mutations" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *BatchMutation) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v38, err39 := iprot.ReadString()
  if err39 != nil { return thrift.NewTProtocolExceptionReadField(1, "row", p.ThriftName(), err39); }
  p.Row = Text(v38)
  return err
}

func (p *BatchMutation) ReadFieldRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *BatchMutation) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype45, _size42, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Mutations", "", err)
  }
  p.Mutations = thrift.NewTList(_etype45, _size42)
  for _i46:= 0; _i46 < _size42; _i46++ {
    _elem47 := NewMutation()
    err50 := _elem47.Read(iprot)
    if err50 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem47Mutation", err50); }
    p.Mutations.Push(_elem47)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *BatchMutation) ReadFieldMutations(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *BatchMutation) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("BatchMutation")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *BatchMutation) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Row) < 1 { return nil}
  err = oprot.WriteFieldBegin("row", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Row))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err); }
  return err
}

func (p *BatchMutation) WriteFieldRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *BatchMutation) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Mutations != nil {
    err = oprot.WriteFieldBegin("mutations", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "mutations", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Mutations.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter51 := range p.Mutations.Iter() {
      Iter52 := Iter51.(*Mutation)
      err = Iter52.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Mutation", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "mutations", p.ThriftName(), err); }
  }
  return err
}

func (p *BatchMutation) WriteFieldMutations(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *BatchMutation) TStructName() string {
  return "BatchMutation"
}

func (p *BatchMutation) ThriftName() string {
  return "BatchMutation"
}

func (p *BatchMutation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BatchMutation(%+v)", *p)
}

func (p *BatchMutation) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*BatchMutation)
  if !ok {
    return 0, false
  }
  if p.Row != data.Row {
    if p.Row < data.Row {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Mutations.CompareTo(data.Mutations); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *BatchMutation) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Row
  case 2: return p.Mutations
  }
  return nil
}

func (p *BatchMutation) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("row", thrift.STRING, 1),
    thrift.NewTField("mutations", thrift.LIST, 2),
    })
}

/**
 * Holds row name and then a map of columns to cells.
 * 
 * Attributes:
 *  - Row
 *  - Columns
 */
type TRowResult struct {
  thrift.TStruct
  Row Text "row"; // 1
  Columns thrift.TMap "columns"; // 2
}

func NewTRowResult() *TRowResult {
  output := &TRowResult{
    TStruct:thrift.NewTStruct("TRowResult", []thrift.TField{
    thrift.NewTField("row", thrift.STRING, 1),
    thrift.NewTField("columns", thrift.MAP, 2),
    }),
  }
  {
  }
  return output
}

func (p *TRowResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "row" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "columns" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *TRowResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v53, err54 := iprot.ReadString()
  if err54 != nil { return thrift.NewTProtocolExceptionReadField(1, "row", p.ThriftName(), err54); }
  p.Row = Text(v53)
  return err
}

func (p *TRowResult) ReadFieldRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *TRowResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype58, _vtype59, _size57, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
  }
  p.Columns = thrift.NewTMap(_ktype58, _vtype59, _size57)
  for _i61:= 0; _i61 < _size57; _i61++ {
    v64, err65 := iprot.ReadString()
    if err65 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key62", "", err65); }
    _key62 := Text(v64)
    _val63 := NewTCell()
    err68 := _val63.Read(iprot)
    if err68 != nil { return thrift.NewTProtocolExceptionReadStruct("_val63TCell", err68); }
    p.Columns.Set(_key62, _val63)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *TRowResult) ReadFieldColumns(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *TRowResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("TRowResult")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *TRowResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Row) < 1 { return nil}
  err = oprot.WriteFieldBegin("row", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Row))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err); }
  return err
}

func (p *TRowResult) WriteFieldRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *TRowResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Columns != nil {
    err = oprot.WriteFieldBegin("columns", thrift.MAP, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, p.Columns.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter69 := range p.Columns.Iter() {
      Kiter70, Viter71 := Miter69.Key().(Text), Miter69.Value().(*TCell)
      err = oprot.WriteString(string(Kiter70))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter70", "", err); }
      err = Viter71.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TCell", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "columns", p.ThriftName(), err); }
  }
  return err
}

func (p *TRowResult) WriteFieldColumns(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *TRowResult) TStructName() string {
  return "TRowResult"
}

func (p *TRowResult) ThriftName() string {
  return "TRowResult"
}

func (p *TRowResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TRowResult(%+v)", *p)
}

func (p *TRowResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*TRowResult)
  if !ok {
    return 0, false
  }
  if p.Row != data.Row {
    if p.Row < data.Row {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Columns.CompareTo(data.Columns); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *TRowResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Row
  case 2: return p.Columns
  }
  return nil
}

func (p *TRowResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("row", thrift.STRING, 1),
    thrift.NewTField("columns", thrift.MAP, 2),
    })
}

/**
 * An IOError exception signals that an error occurred communicating
 * to the Hbase master or an Hbase region server.  Also used to return
 * more general Hbase error conditions.
 * 
 * Attributes:
 *  - Message
 */
type IOError struct {
  thrift.TStruct
  Message string "message"; // 1
}

func NewIOError() *IOError {
  output := &IOError{
    TStruct:thrift.NewTStruct("IOError", []thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *IOError) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "message" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IOError) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v72, err73 := iprot.ReadString()
  if err73 != nil { return thrift.NewTProtocolExceptionReadField(1, "message", p.ThriftName(), err73); }
  p.Message = v72
  return err
}

func (p *IOError) ReadFieldMessage(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IOError) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IOError")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IOError) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Message) < 1 { return nil}
  err = oprot.WriteFieldBegin("message", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Message))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  return err
}

func (p *IOError) WriteFieldMessage(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IOError) TStructName() string {
  return "IOError"
}

func (p *IOError) ThriftName() string {
  return "IOError"
}

func (p *IOError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IOError(%+v)", *p)
}

func (p *IOError) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IOError)
  if !ok {
    return 0, false
  }
  if p.Message != data.Message {
    if p.Message < data.Message {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *IOError) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Message
  }
  return nil
}

func (p *IOError) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    })
}

/**
 * An IllegalArgument exception indicates an illegal or invalid
 * argument was passed into a procedure.
 * 
 * Attributes:
 *  - Message
 */
type IllegalArgument struct {
  thrift.TStruct
  Message string "message"; // 1
}

func NewIllegalArgument() *IllegalArgument {
  output := &IllegalArgument{
    TStruct:thrift.NewTStruct("IllegalArgument", []thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *IllegalArgument) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "message" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IllegalArgument) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v74, err75 := iprot.ReadString()
  if err75 != nil { return thrift.NewTProtocolExceptionReadField(1, "message", p.ThriftName(), err75); }
  p.Message = v74
  return err
}

func (p *IllegalArgument) ReadFieldMessage(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IllegalArgument) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("IllegalArgument")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IllegalArgument) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Message) < 1 { return nil}
  err = oprot.WriteFieldBegin("message", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Message))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  return err
}

func (p *IllegalArgument) WriteFieldMessage(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IllegalArgument) TStructName() string {
  return "IllegalArgument"
}

func (p *IllegalArgument) ThriftName() string {
  return "IllegalArgument"
}

func (p *IllegalArgument) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IllegalArgument(%+v)", *p)
}

func (p *IllegalArgument) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IllegalArgument)
  if !ok {
    return 0, false
  }
  if p.Message != data.Message {
    if p.Message < data.Message {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *IllegalArgument) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Message
  }
  return nil
}

func (p *IllegalArgument) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    })
}

/**
 * An AlreadyExists exceptions signals that a table with the specified
 * name already exists
 * 
 * Attributes:
 *  - Message
 */
type AlreadyExists struct {
  thrift.TStruct
  Message string "message"; // 1
}

func NewAlreadyExists() *AlreadyExists {
  output := &AlreadyExists{
    TStruct:thrift.NewTStruct("AlreadyExists", []thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *AlreadyExists) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "message" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AlreadyExists) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v76, err77 := iprot.ReadString()
  if err77 != nil { return thrift.NewTProtocolExceptionReadField(1, "message", p.ThriftName(), err77); }
  p.Message = v76
  return err
}

func (p *AlreadyExists) ReadFieldMessage(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AlreadyExists) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AlreadyExists")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AlreadyExists) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Message) < 1 { return nil}
  err = oprot.WriteFieldBegin("message", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Message))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "message", p.ThriftName(), err); }
  return err
}

func (p *AlreadyExists) WriteFieldMessage(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AlreadyExists) TStructName() string {
  return "AlreadyExists"
}

func (p *AlreadyExists) ThriftName() string {
  return "AlreadyExists"
}

func (p *AlreadyExists) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AlreadyExists(%+v)", *p)
}

func (p *AlreadyExists) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AlreadyExists)
  if !ok {
    return 0, false
  }
  if p.Message != data.Message {
    if p.Message < data.Message {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *AlreadyExists) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Message
  }
  return nil
}

func (p *AlreadyExists) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("message", thrift.STRING, 1),
    })
}

func init() {
}

