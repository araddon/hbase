/* Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package Hbase;

import (
        "github.com/araddon/thrift4go/lib/go/thrift"
        "fmt"
)


type IHbase interface {
  /**
   * Brings a table on-line (enables it)
   * 
   * Parameters:
   *  - TableName: name of the table
   */
  EnableTable(tableName Bytes) (io *IOError, err error)
  /**
   * Disables a table (takes it off-line) If it is being served, the master
   * will tell the servers to stop serving it.
   * 
   * Parameters:
   *  - TableName: name of the table
   */
  DisableTable(tableName Bytes) (io *IOError, err error)
  /**
   * @return true if table is on-line
   * 
   * Parameters:
   *  - TableName: name of the table to check
   */
  IsTableEnabled(tableName Bytes) (retval80 bool, io *IOError, err error)
  /**
   * Parameters:
   *  - TableNameOrRegionName
   */
  Compact(tableNameOrRegionName Bytes) (io *IOError, err error)
  /**
   * Parameters:
   *  - TableNameOrRegionName
   */
  MajorCompact(tableNameOrRegionName Bytes) (io *IOError, err error)
  /**
   * List all the userspace tables.
   * 
   * @return returns a list of names
   */
  GetTableNames() (retval83 thrift.TList, io *IOError, err error)
  /**
   * List all the column families assoicated with a table.
   * 
   * @return list of column family descriptors
   * 
   * Parameters:
   *  - TableName: table name
   */
  GetColumnDescriptors(tableName Text) (retval84 thrift.TMap, io *IOError, err error)
  /**
   * List the regions associated with a table.
   * 
   * @return list of region descriptors
   * 
   * Parameters:
   *  - TableName: table name
   */
  GetTableRegions(tableName Text) (retval85 thrift.TList, io *IOError, err error)
  /**
   * Create a table with the specified column families.  The name
   * field for each ColumnDescriptor must be set and must end in a
   * colon (:). All other fields are optional and will get default
   * values if not explicitly specified.
   * 
   * @throws IllegalArgument if an input parameter is invalid
   * 
   * @throws AlreadyExists if the table name already exists
   * 
   * Parameters:
   *  - TableName: name of table to create
   *  - ColumnFamilies: list of column family descriptors
   */
  CreateTable(tableName Text, columnFamilies thrift.TList) (io *IOError, ia *IllegalArgument, exist *AlreadyExists, err error)
  /**
   * Deletes a table
   * 
   * @throws IOError if table doesn't exist on server or there was some other
   * problem
   * 
   * Parameters:
   *  - TableName: name of table to delete
   */
  DeleteTable(tableName Text) (io *IOError, err error)
  /**
   * Get a single TCell for the specified table, row, and column at the
   * latest timestamp. Returns an empty list if no such value exists.
   * 
   * @return value for specified row/column
   * 
   * Parameters:
   *  - TableName: name of table
   *  - Row: row key
   *  - Column: column name
   */
  Get(tableName Text, row Text, column Text) (retval88 thrift.TList, io *IOError, err error)
  /**
   * Get the specified number of versions for the specified table,
   * row, and column.
   * 
   * @return list of cells for specified row/column
   * 
   * Parameters:
   *  - TableName: name of table
   *  - Row: row key
   *  - Column: column name
   *  - NumVersions: number of versions to retrieve
   */
  GetVer(tableName Text, row Text, column Text, numVersions int32) (retval89 thrift.TList, io *IOError, err error)
  /**
   * Get the specified number of versions for the specified table,
   * row, and column.  Only versions less than or equal to the specified
   * timestamp will be returned.
   * 
   * @return list of cells for specified row/column
   * 
   * Parameters:
   *  - TableName: name of table
   *  - Row: row key
   *  - Column: column name
   *  - Timestamp: timestamp
   *  - NumVersions: number of versions to retrieve
   */
  GetVerTs(tableName Text, row Text, column Text, timestamp int64, numVersions int32) (retval90 thrift.TList, io *IOError, err error)
  /**
   * Get all the data for the specified table and row at the latest
   * timestamp. Returns an empty list if the row does not exist.
   * 
   * @return TRowResult containing the row and map of columns to TCells
   * 
   * Parameters:
   *  - TableName: name of table
   *  - Row: row key
   */
  GetRow(tableName Text, row Text) (retval91 thrift.TList, io *IOError, err error)
  /**
   * Get the specified columns for the specified table and row at the latest
   * timestamp. Returns an empty list if the row does not exist.
   * 
   * @return TRowResult containing the row and map of columns to TCells
   * 
   * Parameters:
   *  - TableName: name of table
   *  - Row: row key
   *  - Columns: List of columns to return, null for all columns
   */
  GetRowWithColumns(tableName Text, row Text, columns thrift.TList) (retval92 thrift.TList, io *IOError, err error)
  /**
   * Get all the data for the specified table and row at the specified
   * timestamp. Returns an empty list if the row does not exist.
   * 
   * @return TRowResult containing the row and map of columns to TCells
   * 
   * Parameters:
   *  - TableName: name of the table
   *  - Row: row key
   *  - Timestamp: timestamp
   */
  GetRowTs(tableName Text, row Text, timestamp int64) (retval93 thrift.TList, io *IOError, err error)
  /**
   * Get the specified columns for the specified table and row at the specified
   * timestamp. Returns an empty list if the row does not exist.
   * 
   * @return TRowResult containing the row and map of columns to TCells
   * 
   * Parameters:
   *  - TableName: name of table
   *  - Row: row key
   *  - Columns: List of columns to return, null for all columns
   *  - Timestamp
   */
  GetRowWithColumnsTs(tableName Text, row Text, columns thrift.TList, timestamp int64) (retval94 thrift.TList, io *IOError, err error)
  /**
   * Get all the data for the specified table and rows at the latest
   * timestamp. Returns an empty list if no rows exist.
   * 
   * @return TRowResult containing the rows and map of columns to TCells
   * 
   * Parameters:
   *  - TableName: name of table
   *  - Rows: row keys
   */
  GetRows(tableName Text, rows thrift.TList) (retval95 thrift.TList, io *IOError, err error)
  /**
   * Get the specified columns for the specified table and rows at the latest
   * timestamp. Returns an empty list if no rows exist.
   * 
   * @return TRowResult containing the rows and map of columns to TCells
   * 
   * Parameters:
   *  - TableName: name of table
   *  - Rows: row keys
   *  - Columns: List of columns to return, null for all columns
   */
  GetRowsWithColumns(tableName Text, rows thrift.TList, columns thrift.TList) (retval96 thrift.TList, io *IOError, err error)
  /**
   * Get all the data for the specified table and rows at the specified
   * timestamp. Returns an empty list if no rows exist.
   * 
   * @return TRowResult containing the rows and map of columns to TCells
   * 
   * Parameters:
   *  - TableName: name of the table
   *  - Rows: row keys
   *  - Timestamp: timestamp
   */
  GetRowsTs(tableName Text, rows thrift.TList, timestamp int64) (retval97 thrift.TList, io *IOError, err error)
  /**
   * Get the specified columns for the specified table and rows at the specified
   * timestamp. Returns an empty list if no rows exist.
   * 
   * @return TRowResult containing the rows and map of columns to TCells
   * 
   * Parameters:
   *  - TableName: name of table
   *  - Rows: row keys
   *  - Columns: List of columns to return, null for all columns
   *  - Timestamp
   */
  GetRowsWithColumnsTs(tableName Text, rows thrift.TList, columns thrift.TList, timestamp int64) (retval98 thrift.TList, io *IOError, err error)
  /**
   * Apply a series of mutations (updates/deletes) to a row in a
   * single transaction.  If an exception is thrown, then the
   * transaction is aborted.  Default current timestamp is used, and
   * all entries will have an identical timestamp.
   * 
   * Parameters:
   *  - TableName: name of table
   *  - Row: row key
   *  - Mutations: list of mutation commands
   */
  MutateRow(tableName Text, row Text, mutations thrift.TList) (io *IOError, ia *IllegalArgument, err error)
  /**
   * Apply a series of mutations (updates/deletes) to a row in a
   * single transaction.  If an exception is thrown, then the
   * transaction is aborted.  The specified timestamp is used, and
   * all entries will have an identical timestamp.
   * 
   * Parameters:
   *  - TableName: name of table
   *  - Row: row key
   *  - Mutations: list of mutation commands
   *  - Timestamp: timestamp
   */
  MutateRowTs(tableName Text, row Text, mutations thrift.TList, timestamp int64) (io *IOError, ia *IllegalArgument, err error)
  /**
   * Apply a series of batches (each a series of mutations on a single row)
   * in a single transaction.  If an exception is thrown, then the
   * transaction is aborted.  Default current timestamp is used, and
   * all entries will have an identical timestamp.
   * 
   * Parameters:
   *  - TableName: name of table
   *  - RowBatches: list of row batches
   */
  MutateRows(tableName Text, rowBatches thrift.TList) (io *IOError, ia *IllegalArgument, err error)
  /**
   * Apply a series of batches (each a series of mutations on a single row)
   * in a single transaction.  If an exception is thrown, then the
   * transaction is aborted.  The specified timestamp is used, and
   * all entries will have an identical timestamp.
   * 
   * Parameters:
   *  - TableName: name of table
   *  - RowBatches: list of row batches
   *  - Timestamp: timestamp
   */
  MutateRowsTs(tableName Text, rowBatches thrift.TList, timestamp int64) (io *IOError, ia *IllegalArgument, err error)
  /**
   * Atomically increment the column value specified.  Returns the next value post increment.
   * 
   * Parameters:
   *  - TableName: name of table
   *  - Row: row to increment
   *  - Column: name of column
   *  - Value: amount to increment by
   */
  AtomicIncrement(tableName Text, row Text, column Text, value int64) (retval103 int64, io *IOError, ia *IllegalArgument, err error)
  /**
   * Delete all cells that match the passed row and column.
   * 
   * Parameters:
   *  - TableName: name of table
   *  - Row: Row to update
   *  - Column: name of column whose value is to be deleted
   */
  DeleteAll(tableName Text, row Text, column Text) (io *IOError, err error)
  /**
   * Delete all cells that match the passed row and column and whose
   * timestamp is equal-to or older than the passed timestamp.
   * 
   * Parameters:
   *  - TableName: name of table
   *  - Row: Row to update
   *  - Column: name of column whose value is to be deleted
   *  - Timestamp: timestamp
   */
  DeleteAllTs(tableName Text, row Text, column Text, timestamp int64) (io *IOError, err error)
  /**
   * Completely delete the row's cells.
   * 
   * Parameters:
   *  - TableName: name of table
   *  - Row: key of the row to be completely deleted.
   */
  DeleteAllRow(tableName Text, row Text) (io *IOError, err error)
  /**
   * Completely delete the row's cells marked with a timestamp
   * equal-to or older than the passed timestamp.
   * 
   * Parameters:
   *  - TableName: name of table
   *  - Row: key of the row to be completely deleted.
   *  - Timestamp: timestamp
   */
  DeleteAllRowTs(tableName Text, row Text, timestamp int64) (io *IOError, err error)
  /**
   * Get a scanner on the current table starting at the specified row and
   * ending at the last row in the table.  Return the specified columns.
   * 
   * @return scanner id to be used with other scanner procedures
   * 
   * Parameters:
   *  - TableName: name of table
   *  - StartRow: Starting row in table to scan.
   * Send "" (empty string) to start at the first row.
   *  - Columns: columns to scan. If column name is a column family, all
   * columns of the specified column family are returned. It's also possible
   * to pass a regex in the column qualifier.
   */
  ScannerOpen(tableName Text, startRow Text, columns thrift.TList) (retval108 ScannerID, io *IOError, err error)
  /**
   * Get a scanner on the current table starting and stopping at the
   * specified rows.  ending at the last row in the table.  Return the
   * specified columns.
   * 
   * @return scanner id to be used with other scanner procedures
   * 
   * Parameters:
   *  - TableName: name of table
   *  - StartRow: Starting row in table to scan.
   * Send "" (empty string) to start at the first row.
   *  - StopRow: row to stop scanning on. This row is *not* included in the
   * scanner's results
   *  - Columns: columns to scan. If column name is a column family, all
   * columns of the specified column family are returned. It's also possible
   * to pass a regex in the column qualifier.
   */
  ScannerOpenWithStop(tableName Text, startRow Text, stopRow Text, columns thrift.TList) (retval109 ScannerID, io *IOError, err error)
  /**
   * Open a scanner for a given prefix.  That is all rows will have the specified
   * prefix. No other rows will be returned.
   * 
   * @return scanner id to use with other scanner calls
   * 
   * Parameters:
   *  - TableName: name of table
   *  - StartAndPrefix: the prefix (and thus start row) of the keys you want
   *  - Columns: the columns you want returned
   */
  ScannerOpenWithPrefix(tableName Text, startAndPrefix Text, columns thrift.TList) (retval110 ScannerID, io *IOError, err error)
  /**
   * Get a scanner on the current table starting at the specified row and
   * ending at the last row in the table.  Return the specified columns.
   * Only values with the specified timestamp are returned.
   * 
   * @return scanner id to be used with other scanner procedures
   * 
   * Parameters:
   *  - TableName: name of table
   *  - StartRow: Starting row in table to scan.
   * Send "" (empty string) to start at the first row.
   *  - Columns: columns to scan. If column name is a column family, all
   * columns of the specified column family are returned. It's also possible
   * to pass a regex in the column qualifier.
   *  - Timestamp: timestamp
   */
  ScannerOpenTs(tableName Text, startRow Text, columns thrift.TList, timestamp int64) (retval111 ScannerID, io *IOError, err error)
  /**
   * Get a scanner on the current table starting and stopping at the
   * specified rows.  ending at the last row in the table.  Return the
   * specified columns.  Only values with the specified timestamp are
   * returned.
   * 
   * @return scanner id to be used with other scanner procedures
   * 
   * Parameters:
   *  - TableName: name of table
   *  - StartRow: Starting row in table to scan.
   * Send "" (empty string) to start at the first row.
   *  - StopRow: row to stop scanning on. This row is *not* included in the
   * scanner's results
   *  - Columns: columns to scan. If column name is a column family, all
   * columns of the specified column family are returned. It's also possible
   * to pass a regex in the column qualifier.
   *  - Timestamp: timestamp
   */
  ScannerOpenWithStopTs(tableName Text, startRow Text, stopRow Text, columns thrift.TList, timestamp int64) (retval112 ScannerID, io *IOError, err error)
  /**
   * Returns the scanner's current row value and advances to the next
   * row in the table.  When there are no more rows in the table, or a key
   * greater-than-or-equal-to the scanner's specified stopRow is reached,
   * an empty list is returned.
   * 
   * @return a TRowResult containing the current row and a map of the columns to TCells.
   * 
   * @throws IllegalArgument if ScannerID is invalid
   * 
   * @throws NotFound when the scanner reaches the end
   * 
   * Parameters:
   *  - Id: id of a scanner returned by scannerOpen
   */
  ScannerGet(id ScannerID) (retval113 thrift.TList, io *IOError, ia *IllegalArgument, err error)
  /**
   * Returns, starting at the scanner's current row value nbRows worth of
   * rows and advances to the next row in the table.  When there are no more
   * rows in the table, or a key greater-than-or-equal-to the scanner's
   * specified stopRow is reached,  an empty list is returned.
   * 
   * @return a TRowResult containing the current row and a map of the columns to TCells.
   * 
   * @throws IllegalArgument if ScannerID is invalid
   * 
   * @throws NotFound when the scanner reaches the end
   * 
   * Parameters:
   *  - Id: id of a scanner returned by scannerOpen
   *  - NbRows: number of results to return
   */
  ScannerGetList(id ScannerID, nbRows int32) (retval114 thrift.TList, io *IOError, ia *IllegalArgument, err error)
  /**
   * Closes the server-state associated with an open scanner.
   * 
   * @throws IllegalArgument if ScannerID is invalid
   * 
   * Parameters:
   *  - Id: id of a scanner returned by scannerOpen
   */
  ScannerClose(id ScannerID) (io *IOError, ia *IllegalArgument, err error)
}

type HbaseClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewHbaseClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *HbaseClient {
  return &HbaseClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewHbaseClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *HbaseClient {
  return &HbaseClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

/**
 * Brings a table on-line (enables it)
 * 
 * Parameters:
 *  - TableName: name of the table
 */
func (p *HbaseClient) EnableTable(tableName Bytes) (io *IOError, err error) {
  err = p.SendEnableTable(tableName)
  if err != nil { return }
  return p.RecvEnableTable()
}

func (p *HbaseClient) SendEnableTable(tableName Bytes)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("enableTable", thrift.CALL, p.SeqId)
  args117 := NewEnableTableArgs()
  args117.TableName = tableName
  err = args117.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvEnableTable() (io *IOError, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error119 := thrift.NewTApplicationExceptionDefault()
    error120, er := error119.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error120
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result118 := NewEnableTableResult()
  err = result118.Read(iprot)
  iprot.ReadMessageEnd()
  if result118.Io != nil {
    io = result118.Io
  }
  return
}

/**
 * Disables a table (takes it off-line) If it is being served, the master
 * will tell the servers to stop serving it.
 * 
 * Parameters:
 *  - TableName: name of the table
 */
func (p *HbaseClient) DisableTable(tableName Bytes) (io *IOError, err error) {
  err = p.SendDisableTable(tableName)
  if err != nil { return }
  return p.RecvDisableTable()
}

func (p *HbaseClient) SendDisableTable(tableName Bytes)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("disableTable", thrift.CALL, p.SeqId)
  args122 := NewDisableTableArgs()
  args122.TableName = tableName
  err = args122.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvDisableTable() (io *IOError, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error124 := thrift.NewTApplicationExceptionDefault()
    error125, er := error124.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error125
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result123 := NewDisableTableResult()
  err = result123.Read(iprot)
  iprot.ReadMessageEnd()
  if result123.Io != nil {
    io = result123.Io
  }
  return
}

/**
 * @return true if table is on-line
 * 
 * Parameters:
 *  - TableName: name of the table to check
 */
func (p *HbaseClient) IsTableEnabled(tableName Bytes) (retval126 bool, io *IOError, err error) {
  err = p.SendIsTableEnabled(tableName)
  if err != nil { return }
  return p.RecvIsTableEnabled()
}

func (p *HbaseClient) SendIsTableEnabled(tableName Bytes)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("isTableEnabled", thrift.CALL, p.SeqId)
  args127 := NewIsTableEnabledArgs()
  args127.TableName = tableName
  err = args127.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvIsTableEnabled() (value bool, io *IOError, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error129 := thrift.NewTApplicationExceptionDefault()
    error130, er := error129.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error130
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result128 := NewIsTableEnabledResult()
  err = result128.Read(iprot)
  iprot.ReadMessageEnd()
  value = result128.Success
  if result128.Io != nil {
    io = result128.Io
  }
  return
}

/**
 * Parameters:
 *  - TableNameOrRegionName
 */
func (p *HbaseClient) Compact(tableNameOrRegionName Bytes) (io *IOError, err error) {
  err = p.SendCompact(tableNameOrRegionName)
  if err != nil { return }
  return p.RecvCompact()
}

func (p *HbaseClient) SendCompact(tableNameOrRegionName Bytes)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("compact", thrift.CALL, p.SeqId)
  args132 := NewCompactArgs()
  args132.TableNameOrRegionName = tableNameOrRegionName
  err = args132.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvCompact() (io *IOError, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error134 := thrift.NewTApplicationExceptionDefault()
    error135, er := error134.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error135
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result133 := NewCompactResult()
  err = result133.Read(iprot)
  iprot.ReadMessageEnd()
  if result133.Io != nil {
    io = result133.Io
  }
  return
}

/**
 * Parameters:
 *  - TableNameOrRegionName
 */
func (p *HbaseClient) MajorCompact(tableNameOrRegionName Bytes) (io *IOError, err error) {
  err = p.SendMajorCompact(tableNameOrRegionName)
  if err != nil { return }
  return p.RecvMajorCompact()
}

func (p *HbaseClient) SendMajorCompact(tableNameOrRegionName Bytes)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("majorCompact", thrift.CALL, p.SeqId)
  args137 := NewMajorCompactArgs()
  args137.TableNameOrRegionName = tableNameOrRegionName
  err = args137.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvMajorCompact() (io *IOError, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error139 := thrift.NewTApplicationExceptionDefault()
    error140, er := error139.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error140
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result138 := NewMajorCompactResult()
  err = result138.Read(iprot)
  iprot.ReadMessageEnd()
  if result138.Io != nil {
    io = result138.Io
  }
  return
}

/**
 * List all the userspace tables.
 * 
 * @return returns a list of names
 */
func (p *HbaseClient) GetTableNames() (retval141 thrift.TList, io *IOError, err error) {
  err = p.SendGetTableNames()
  if err != nil { return }
  return p.RecvGetTableNames()
}

func (p *HbaseClient) SendGetTableNames()(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getTableNames", thrift.CALL, p.SeqId)
  args142 := NewGetTableNamesArgs()
  err = args142.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvGetTableNames() (value thrift.TList, io *IOError, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error144 := thrift.NewTApplicationExceptionDefault()
    error145, er := error144.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error145
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result143 := NewGetTableNamesResult()
  err = result143.Read(iprot)
  iprot.ReadMessageEnd()
  value = result143.Success
  if result143.Io != nil {
    io = result143.Io
  }
  return
}

/**
 * List all the column families assoicated with a table.
 * 
 * @return list of column family descriptors
 * 
 * Parameters:
 *  - TableName: table name
 */
func (p *HbaseClient) GetColumnDescriptors(tableName Text) (retval146 thrift.TMap, io *IOError, err error) {
  err = p.SendGetColumnDescriptors(tableName)
  if err != nil { return }
  return p.RecvGetColumnDescriptors()
}

func (p *HbaseClient) SendGetColumnDescriptors(tableName Text)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getColumnDescriptors", thrift.CALL, p.SeqId)
  args147 := NewGetColumnDescriptorsArgs()
  args147.TableName = tableName
  err = args147.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvGetColumnDescriptors() (value thrift.TMap, io *IOError, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error149 := thrift.NewTApplicationExceptionDefault()
    error150, er := error149.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error150
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result148 := NewGetColumnDescriptorsResult()
  err = result148.Read(iprot)
  iprot.ReadMessageEnd()
  value = result148.Success
  if result148.Io != nil {
    io = result148.Io
  }
  return
}

/**
 * List the regions associated with a table.
 * 
 * @return list of region descriptors
 * 
 * Parameters:
 *  - TableName: table name
 */
func (p *HbaseClient) GetTableRegions(tableName Text) (retval151 thrift.TList, io *IOError, err error) {
  err = p.SendGetTableRegions(tableName)
  if err != nil { return }
  return p.RecvGetTableRegions()
}

func (p *HbaseClient) SendGetTableRegions(tableName Text)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getTableRegions", thrift.CALL, p.SeqId)
  args152 := NewGetTableRegionsArgs()
  args152.TableName = tableName
  err = args152.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvGetTableRegions() (value thrift.TList, io *IOError, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error154 := thrift.NewTApplicationExceptionDefault()
    error155, er := error154.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error155
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result153 := NewGetTableRegionsResult()
  err = result153.Read(iprot)
  iprot.ReadMessageEnd()
  value = result153.Success
  if result153.Io != nil {
    io = result153.Io
  }
  return
}

/**
 * Create a table with the specified column families.  The name
 * field for each ColumnDescriptor must be set and must end in a
 * colon (:). All other fields are optional and will get default
 * values if not explicitly specified.
 * 
 * @throws IllegalArgument if an input parameter is invalid
 * 
 * @throws AlreadyExists if the table name already exists
 * 
 * Parameters:
 *  - TableName: name of table to create
 *  - ColumnFamilies: list of column family descriptors
 */
func (p *HbaseClient) CreateTable(tableName Text, columnFamilies thrift.TList) (io *IOError, ia *IllegalArgument, exist *AlreadyExists, err error) {
  err = p.SendCreateTable(tableName, columnFamilies)
  if err != nil { return }
  return p.RecvCreateTable()
}

func (p *HbaseClient) SendCreateTable(tableName Text, columnFamilies thrift.TList)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("createTable", thrift.CALL, p.SeqId)
  args157 := NewCreateTableArgs()
  args157.TableName = tableName
  args157.ColumnFamilies = columnFamilies
  err = args157.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvCreateTable() (io *IOError, ia *IllegalArgument, exist *AlreadyExists, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error159 := thrift.NewTApplicationExceptionDefault()
    error160, er := error159.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error160
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result158 := NewCreateTableResult()
  err = result158.Read(iprot)
  iprot.ReadMessageEnd()
  if result158.Io != nil {
    io = result158.Io
  }
  if result158.Ia != nil {
    ia = result158.Ia
  }
  if result158.Exist != nil {
    exist = result158.Exist
  }
  return
}

/**
 * Deletes a table
 * 
 * @throws IOError if table doesn't exist on server or there was some other
 * problem
 * 
 * Parameters:
 *  - TableName: name of table to delete
 */
func (p *HbaseClient) DeleteTable(tableName Text) (io *IOError, err error) {
  err = p.SendDeleteTable(tableName)
  if err != nil { return }
  return p.RecvDeleteTable()
}

func (p *HbaseClient) SendDeleteTable(tableName Text)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("deleteTable", thrift.CALL, p.SeqId)
  args162 := NewDeleteTableArgs()
  args162.TableName = tableName
  err = args162.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvDeleteTable() (io *IOError, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error164 := thrift.NewTApplicationExceptionDefault()
    error165, er := error164.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error165
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result163 := NewDeleteTableResult()
  err = result163.Read(iprot)
  iprot.ReadMessageEnd()
  if result163.Io != nil {
    io = result163.Io
  }
  return
}

/**
 * Get a single TCell for the specified table, row, and column at the
 * latest timestamp. Returns an empty list if no such value exists.
 * 
 * @return value for specified row/column
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Column: column name
 */
func (p *HbaseClient) Get(tableName Text, row Text, column Text) (retval166 thrift.TList, io *IOError, err error) {
  err = p.SendGet(tableName, row, column)
  if err != nil { return }
  return p.RecvGet()
}

func (p *HbaseClient) SendGet(tableName Text, row Text, column Text)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("get", thrift.CALL, p.SeqId)
  args167 := NewGetArgs()
  args167.TableName = tableName
  args167.Row = row
  args167.Column = column
  err = args167.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvGet() (value thrift.TList, io *IOError, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error169 := thrift.NewTApplicationExceptionDefault()
    error170, er := error169.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error170
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result168 := NewGetResult()
  err = result168.Read(iprot)
  iprot.ReadMessageEnd()
  value = result168.Success
  if result168.Io != nil {
    io = result168.Io
  }
  return
}

/**
 * Get the specified number of versions for the specified table,
 * row, and column.
 * 
 * @return list of cells for specified row/column
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Column: column name
 *  - NumVersions: number of versions to retrieve
 */
func (p *HbaseClient) GetVer(tableName Text, row Text, column Text, numVersions int32) (retval171 thrift.TList, io *IOError, err error) {
  err = p.SendGetVer(tableName, row, column, numVersions)
  if err != nil { return }
  return p.RecvGetVer()
}

func (p *HbaseClient) SendGetVer(tableName Text, row Text, column Text, numVersions int32)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getVer", thrift.CALL, p.SeqId)
  args172 := NewGetVerArgs()
  args172.TableName = tableName
  args172.Row = row
  args172.Column = column
  args172.NumVersions = numVersions
  err = args172.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvGetVer() (value thrift.TList, io *IOError, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error174 := thrift.NewTApplicationExceptionDefault()
    error175, er := error174.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error175
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result173 := NewGetVerResult()
  err = result173.Read(iprot)
  iprot.ReadMessageEnd()
  value = result173.Success
  if result173.Io != nil {
    io = result173.Io
  }
  return
}

/**
 * Get the specified number of versions for the specified table,
 * row, and column.  Only versions less than or equal to the specified
 * timestamp will be returned.
 * 
 * @return list of cells for specified row/column
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Column: column name
 *  - Timestamp: timestamp
 *  - NumVersions: number of versions to retrieve
 */
func (p *HbaseClient) GetVerTs(tableName Text, row Text, column Text, timestamp int64, numVersions int32) (retval176 thrift.TList, io *IOError, err error) {
  err = p.SendGetVerTs(tableName, row, column, timestamp, numVersions)
  if err != nil { return }
  return p.RecvGetVerTs()
}

func (p *HbaseClient) SendGetVerTs(tableName Text, row Text, column Text, timestamp int64, numVersions int32)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getVerTs", thrift.CALL, p.SeqId)
  args177 := NewGetVerTsArgs()
  args177.TableName = tableName
  args177.Row = row
  args177.Column = column
  args177.Timestamp = timestamp
  args177.NumVersions = numVersions
  err = args177.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvGetVerTs() (value thrift.TList, io *IOError, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error179 := thrift.NewTApplicationExceptionDefault()
    error180, er := error179.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error180
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result178 := NewGetVerTsResult()
  err = result178.Read(iprot)
  iprot.ReadMessageEnd()
  value = result178.Success
  if result178.Io != nil {
    io = result178.Io
  }
  return
}

/**
 * Get all the data for the specified table and row at the latest
 * timestamp. Returns an empty list if the row does not exist.
 * 
 * @return TRowResult containing the row and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 */
func (p *HbaseClient) GetRow(tableName Text, row Text) (retval181 thrift.TList, io *IOError, err error) {
  err = p.SendGetRow(tableName, row)
  if err != nil { return }
  return p.RecvGetRow()
}

func (p *HbaseClient) SendGetRow(tableName Text, row Text)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getRow", thrift.CALL, p.SeqId)
  args182 := NewGetRowArgs()
  args182.TableName = tableName
  args182.Row = row
  err = args182.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvGetRow() (value thrift.TList, io *IOError, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error184 := thrift.NewTApplicationExceptionDefault()
    error185, er := error184.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error185
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result183 := NewGetRowResult()
  err = result183.Read(iprot)
  iprot.ReadMessageEnd()
  value = result183.Success
  if result183.Io != nil {
    io = result183.Io
  }
  return
}

/**
 * Get the specified columns for the specified table and row at the latest
 * timestamp. Returns an empty list if the row does not exist.
 * 
 * @return TRowResult containing the row and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Columns: List of columns to return, null for all columns
 */
func (p *HbaseClient) GetRowWithColumns(tableName Text, row Text, columns thrift.TList) (retval186 thrift.TList, io *IOError, err error) {
  err = p.SendGetRowWithColumns(tableName, row, columns)
  if err != nil { return }
  return p.RecvGetRowWithColumns()
}

func (p *HbaseClient) SendGetRowWithColumns(tableName Text, row Text, columns thrift.TList)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getRowWithColumns", thrift.CALL, p.SeqId)
  args187 := NewGetRowWithColumnsArgs()
  args187.TableName = tableName
  args187.Row = row
  args187.Columns = columns
  err = args187.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvGetRowWithColumns() (value thrift.TList, io *IOError, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error189 := thrift.NewTApplicationExceptionDefault()
    error190, er := error189.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error190
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result188 := NewGetRowWithColumnsResult()
  err = result188.Read(iprot)
  iprot.ReadMessageEnd()
  value = result188.Success
  if result188.Io != nil {
    io = result188.Io
  }
  return
}

/**
 * Get all the data for the specified table and row at the specified
 * timestamp. Returns an empty list if the row does not exist.
 * 
 * @return TRowResult containing the row and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of the table
 *  - Row: row key
 *  - Timestamp: timestamp
 */
func (p *HbaseClient) GetRowTs(tableName Text, row Text, timestamp int64) (retval191 thrift.TList, io *IOError, err error) {
  err = p.SendGetRowTs(tableName, row, timestamp)
  if err != nil { return }
  return p.RecvGetRowTs()
}

func (p *HbaseClient) SendGetRowTs(tableName Text, row Text, timestamp int64)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getRowTs", thrift.CALL, p.SeqId)
  args192 := NewGetRowTsArgs()
  args192.TableName = tableName
  args192.Row = row
  args192.Timestamp = timestamp
  err = args192.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvGetRowTs() (value thrift.TList, io *IOError, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error194 := thrift.NewTApplicationExceptionDefault()
    error195, er := error194.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error195
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result193 := NewGetRowTsResult()
  err = result193.Read(iprot)
  iprot.ReadMessageEnd()
  value = result193.Success
  if result193.Io != nil {
    io = result193.Io
  }
  return
}

/**
 * Get the specified columns for the specified table and row at the specified
 * timestamp. Returns an empty list if the row does not exist.
 * 
 * @return TRowResult containing the row and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Columns: List of columns to return, null for all columns
 *  - Timestamp
 */
func (p *HbaseClient) GetRowWithColumnsTs(tableName Text, row Text, columns thrift.TList, timestamp int64) (retval196 thrift.TList, io *IOError, err error) {
  err = p.SendGetRowWithColumnsTs(tableName, row, columns, timestamp)
  if err != nil { return }
  return p.RecvGetRowWithColumnsTs()
}

func (p *HbaseClient) SendGetRowWithColumnsTs(tableName Text, row Text, columns thrift.TList, timestamp int64)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getRowWithColumnsTs", thrift.CALL, p.SeqId)
  args197 := NewGetRowWithColumnsTsArgs()
  args197.TableName = tableName
  args197.Row = row
  args197.Columns = columns
  args197.Timestamp = timestamp
  err = args197.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvGetRowWithColumnsTs() (value thrift.TList, io *IOError, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error199 := thrift.NewTApplicationExceptionDefault()
    error200, er := error199.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error200
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result198 := NewGetRowWithColumnsTsResult()
  err = result198.Read(iprot)
  iprot.ReadMessageEnd()
  value = result198.Success
  if result198.Io != nil {
    io = result198.Io
  }
  return
}

/**
 * Get all the data for the specified table and rows at the latest
 * timestamp. Returns an empty list if no rows exist.
 * 
 * @return TRowResult containing the rows and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Rows: row keys
 */
func (p *HbaseClient) GetRows(tableName Text, rows thrift.TList) (retval201 thrift.TList, io *IOError, err error) {
  err = p.SendGetRows(tableName, rows)
  if err != nil { return }
  return p.RecvGetRows()
}

func (p *HbaseClient) SendGetRows(tableName Text, rows thrift.TList)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getRows", thrift.CALL, p.SeqId)
  args202 := NewGetRowsArgs()
  args202.TableName = tableName
  args202.Rows = rows
  err = args202.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvGetRows() (value thrift.TList, io *IOError, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error204 := thrift.NewTApplicationExceptionDefault()
    error205, er := error204.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error205
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result203 := NewGetRowsResult()
  err = result203.Read(iprot)
  iprot.ReadMessageEnd()
  value = result203.Success
  if result203.Io != nil {
    io = result203.Io
  }
  return
}

/**
 * Get the specified columns for the specified table and rows at the latest
 * timestamp. Returns an empty list if no rows exist.
 * 
 * @return TRowResult containing the rows and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Rows: row keys
 *  - Columns: List of columns to return, null for all columns
 */
func (p *HbaseClient) GetRowsWithColumns(tableName Text, rows thrift.TList, columns thrift.TList) (retval206 thrift.TList, io *IOError, err error) {
  err = p.SendGetRowsWithColumns(tableName, rows, columns)
  if err != nil { return }
  return p.RecvGetRowsWithColumns()
}

func (p *HbaseClient) SendGetRowsWithColumns(tableName Text, rows thrift.TList, columns thrift.TList)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getRowsWithColumns", thrift.CALL, p.SeqId)
  args207 := NewGetRowsWithColumnsArgs()
  args207.TableName = tableName
  args207.Rows = rows
  args207.Columns = columns
  err = args207.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvGetRowsWithColumns() (value thrift.TList, io *IOError, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error209 := thrift.NewTApplicationExceptionDefault()
    error210, er := error209.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error210
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result208 := NewGetRowsWithColumnsResult()
  err = result208.Read(iprot)
  iprot.ReadMessageEnd()
  value = result208.Success
  if result208.Io != nil {
    io = result208.Io
  }
  return
}

/**
 * Get all the data for the specified table and rows at the specified
 * timestamp. Returns an empty list if no rows exist.
 * 
 * @return TRowResult containing the rows and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of the table
 *  - Rows: row keys
 *  - Timestamp: timestamp
 */
func (p *HbaseClient) GetRowsTs(tableName Text, rows thrift.TList, timestamp int64) (retval211 thrift.TList, io *IOError, err error) {
  err = p.SendGetRowsTs(tableName, rows, timestamp)
  if err != nil { return }
  return p.RecvGetRowsTs()
}

func (p *HbaseClient) SendGetRowsTs(tableName Text, rows thrift.TList, timestamp int64)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getRowsTs", thrift.CALL, p.SeqId)
  args212 := NewGetRowsTsArgs()
  args212.TableName = tableName
  args212.Rows = rows
  args212.Timestamp = timestamp
  err = args212.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvGetRowsTs() (value thrift.TList, io *IOError, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error214 := thrift.NewTApplicationExceptionDefault()
    error215, er := error214.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error215
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result213 := NewGetRowsTsResult()
  err = result213.Read(iprot)
  iprot.ReadMessageEnd()
  value = result213.Success
  if result213.Io != nil {
    io = result213.Io
  }
  return
}

/**
 * Get the specified columns for the specified table and rows at the specified
 * timestamp. Returns an empty list if no rows exist.
 * 
 * @return TRowResult containing the rows and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Rows: row keys
 *  - Columns: List of columns to return, null for all columns
 *  - Timestamp
 */
func (p *HbaseClient) GetRowsWithColumnsTs(tableName Text, rows thrift.TList, columns thrift.TList, timestamp int64) (retval216 thrift.TList, io *IOError, err error) {
  err = p.SendGetRowsWithColumnsTs(tableName, rows, columns, timestamp)
  if err != nil { return }
  return p.RecvGetRowsWithColumnsTs()
}

func (p *HbaseClient) SendGetRowsWithColumnsTs(tableName Text, rows thrift.TList, columns thrift.TList, timestamp int64)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getRowsWithColumnsTs", thrift.CALL, p.SeqId)
  args217 := NewGetRowsWithColumnsTsArgs()
  args217.TableName = tableName
  args217.Rows = rows
  args217.Columns = columns
  args217.Timestamp = timestamp
  err = args217.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvGetRowsWithColumnsTs() (value thrift.TList, io *IOError, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error219 := thrift.NewTApplicationExceptionDefault()
    error220, er := error219.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error220
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result218 := NewGetRowsWithColumnsTsResult()
  err = result218.Read(iprot)
  iprot.ReadMessageEnd()
  value = result218.Success
  if result218.Io != nil {
    io = result218.Io
  }
  return
}

/**
 * Apply a series of mutations (updates/deletes) to a row in a
 * single transaction.  If an exception is thrown, then the
 * transaction is aborted.  Default current timestamp is used, and
 * all entries will have an identical timestamp.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Mutations: list of mutation commands
 */
func (p *HbaseClient) MutateRow(tableName Text, row Text, mutations thrift.TList) (io *IOError, ia *IllegalArgument, err error) {
  err = p.SendMutateRow(tableName, row, mutations)
  if err != nil { return }
  return p.RecvMutateRow()
}

func (p *HbaseClient) SendMutateRow(tableName Text, row Text, mutations thrift.TList)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("mutateRow", thrift.CALL, p.SeqId)
  args222 := NewMutateRowArgs()
  args222.TableName = tableName
  args222.Row = row
  args222.Mutations = mutations
  err = args222.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvMutateRow() (io *IOError, ia *IllegalArgument, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error224 := thrift.NewTApplicationExceptionDefault()
    error225, er := error224.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error225
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result223 := NewMutateRowResult()
  err = result223.Read(iprot)
  iprot.ReadMessageEnd()
  if result223.Io != nil {
    io = result223.Io
  }
  if result223.Ia != nil {
    ia = result223.Ia
  }
  return
}

/**
 * Apply a series of mutations (updates/deletes) to a row in a
 * single transaction.  If an exception is thrown, then the
 * transaction is aborted.  The specified timestamp is used, and
 * all entries will have an identical timestamp.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Mutations: list of mutation commands
 *  - Timestamp: timestamp
 */
func (p *HbaseClient) MutateRowTs(tableName Text, row Text, mutations thrift.TList, timestamp int64) (io *IOError, ia *IllegalArgument, err error) {
  err = p.SendMutateRowTs(tableName, row, mutations, timestamp)
  if err != nil { return }
  return p.RecvMutateRowTs()
}

func (p *HbaseClient) SendMutateRowTs(tableName Text, row Text, mutations thrift.TList, timestamp int64)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("mutateRowTs", thrift.CALL, p.SeqId)
  args227 := NewMutateRowTsArgs()
  args227.TableName = tableName
  args227.Row = row
  args227.Mutations = mutations
  args227.Timestamp = timestamp
  err = args227.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvMutateRowTs() (io *IOError, ia *IllegalArgument, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error229 := thrift.NewTApplicationExceptionDefault()
    error230, er := error229.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error230
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result228 := NewMutateRowTsResult()
  err = result228.Read(iprot)
  iprot.ReadMessageEnd()
  if result228.Io != nil {
    io = result228.Io
  }
  if result228.Ia != nil {
    ia = result228.Ia
  }
  return
}

/**
 * Apply a series of batches (each a series of mutations on a single row)
 * in a single transaction.  If an exception is thrown, then the
 * transaction is aborted.  Default current timestamp is used, and
 * all entries will have an identical timestamp.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - RowBatches: list of row batches
 */
func (p *HbaseClient) MutateRows(tableName Text, rowBatches thrift.TList) (io *IOError, ia *IllegalArgument, err error) {
  err = p.SendMutateRows(tableName, rowBatches)
  if err != nil { return }
  return p.RecvMutateRows()
}

func (p *HbaseClient) SendMutateRows(tableName Text, rowBatches thrift.TList)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("mutateRows", thrift.CALL, p.SeqId)
  args232 := NewMutateRowsArgs()
  args232.TableName = tableName
  args232.RowBatches = rowBatches
  err = args232.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvMutateRows() (io *IOError, ia *IllegalArgument, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error234 := thrift.NewTApplicationExceptionDefault()
    error235, er := error234.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error235
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result233 := NewMutateRowsResult()
  err = result233.Read(iprot)
  iprot.ReadMessageEnd()
  if result233.Io != nil {
    io = result233.Io
  }
  if result233.Ia != nil {
    ia = result233.Ia
  }
  return
}

/**
 * Apply a series of batches (each a series of mutations on a single row)
 * in a single transaction.  If an exception is thrown, then the
 * transaction is aborted.  The specified timestamp is used, and
 * all entries will have an identical timestamp.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - RowBatches: list of row batches
 *  - Timestamp: timestamp
 */
func (p *HbaseClient) MutateRowsTs(tableName Text, rowBatches thrift.TList, timestamp int64) (io *IOError, ia *IllegalArgument, err error) {
  err = p.SendMutateRowsTs(tableName, rowBatches, timestamp)
  if err != nil { return }
  return p.RecvMutateRowsTs()
}

func (p *HbaseClient) SendMutateRowsTs(tableName Text, rowBatches thrift.TList, timestamp int64)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("mutateRowsTs", thrift.CALL, p.SeqId)
  args237 := NewMutateRowsTsArgs()
  args237.TableName = tableName
  args237.RowBatches = rowBatches
  args237.Timestamp = timestamp
  err = args237.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvMutateRowsTs() (io *IOError, ia *IllegalArgument, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error239 := thrift.NewTApplicationExceptionDefault()
    error240, er := error239.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error240
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result238 := NewMutateRowsTsResult()
  err = result238.Read(iprot)
  iprot.ReadMessageEnd()
  if result238.Io != nil {
    io = result238.Io
  }
  if result238.Ia != nil {
    ia = result238.Ia
  }
  return
}

/**
 * Atomically increment the column value specified.  Returns the next value post increment.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row to increment
 *  - Column: name of column
 *  - Value: amount to increment by
 */
func (p *HbaseClient) AtomicIncrement(tableName Text, row Text, column Text, value int64) (retval241 int64, io *IOError, ia *IllegalArgument, err error) {
  err = p.SendAtomicIncrement(tableName, row, column, value)
  if err != nil { return }
  return p.RecvAtomicIncrement()
}

func (p *HbaseClient) SendAtomicIncrement(tableName Text, row Text, column Text, value int64)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("atomicIncrement", thrift.CALL, p.SeqId)
  args242 := NewAtomicIncrementArgs()
  args242.TableName = tableName
  args242.Row = row
  args242.Column = column
  args242.Value = value
  err = args242.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvAtomicIncrement() (value int64, io *IOError, ia *IllegalArgument, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error244 := thrift.NewTApplicationExceptionDefault()
    error245, er := error244.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error245
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result243 := NewAtomicIncrementResult()
  err = result243.Read(iprot)
  iprot.ReadMessageEnd()
  value = result243.Success
  if result243.Io != nil {
    io = result243.Io
  }
  if result243.Ia != nil {
    ia = result243.Ia
  }
  return
}

/**
 * Delete all cells that match the passed row and column.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: Row to update
 *  - Column: name of column whose value is to be deleted
 */
func (p *HbaseClient) DeleteAll(tableName Text, row Text, column Text) (io *IOError, err error) {
  err = p.SendDeleteAll(tableName, row, column)
  if err != nil { return }
  return p.RecvDeleteAll()
}

func (p *HbaseClient) SendDeleteAll(tableName Text, row Text, column Text)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("deleteAll", thrift.CALL, p.SeqId)
  args247 := NewDeleteAllArgs()
  args247.TableName = tableName
  args247.Row = row
  args247.Column = column
  err = args247.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvDeleteAll() (io *IOError, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error249 := thrift.NewTApplicationExceptionDefault()
    error250, er := error249.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error250
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result248 := NewDeleteAllResult()
  err = result248.Read(iprot)
  iprot.ReadMessageEnd()
  if result248.Io != nil {
    io = result248.Io
  }
  return
}

/**
 * Delete all cells that match the passed row and column and whose
 * timestamp is equal-to or older than the passed timestamp.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: Row to update
 *  - Column: name of column whose value is to be deleted
 *  - Timestamp: timestamp
 */
func (p *HbaseClient) DeleteAllTs(tableName Text, row Text, column Text, timestamp int64) (io *IOError, err error) {
  err = p.SendDeleteAllTs(tableName, row, column, timestamp)
  if err != nil { return }
  return p.RecvDeleteAllTs()
}

func (p *HbaseClient) SendDeleteAllTs(tableName Text, row Text, column Text, timestamp int64)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("deleteAllTs", thrift.CALL, p.SeqId)
  args252 := NewDeleteAllTsArgs()
  args252.TableName = tableName
  args252.Row = row
  args252.Column = column
  args252.Timestamp = timestamp
  err = args252.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvDeleteAllTs() (io *IOError, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error254 := thrift.NewTApplicationExceptionDefault()
    error255, er := error254.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error255
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result253 := NewDeleteAllTsResult()
  err = result253.Read(iprot)
  iprot.ReadMessageEnd()
  if result253.Io != nil {
    io = result253.Io
  }
  return
}

/**
 * Completely delete the row's cells.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: key of the row to be completely deleted.
 */
func (p *HbaseClient) DeleteAllRow(tableName Text, row Text) (io *IOError, err error) {
  err = p.SendDeleteAllRow(tableName, row)
  if err != nil { return }
  return p.RecvDeleteAllRow()
}

func (p *HbaseClient) SendDeleteAllRow(tableName Text, row Text)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("deleteAllRow", thrift.CALL, p.SeqId)
  args257 := NewDeleteAllRowArgs()
  args257.TableName = tableName
  args257.Row = row
  err = args257.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvDeleteAllRow() (io *IOError, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error259 := thrift.NewTApplicationExceptionDefault()
    error260, er := error259.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error260
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result258 := NewDeleteAllRowResult()
  err = result258.Read(iprot)
  iprot.ReadMessageEnd()
  if result258.Io != nil {
    io = result258.Io
  }
  return
}

/**
 * Completely delete the row's cells marked with a timestamp
 * equal-to or older than the passed timestamp.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: key of the row to be completely deleted.
 *  - Timestamp: timestamp
 */
func (p *HbaseClient) DeleteAllRowTs(tableName Text, row Text, timestamp int64) (io *IOError, err error) {
  err = p.SendDeleteAllRowTs(tableName, row, timestamp)
  if err != nil { return }
  return p.RecvDeleteAllRowTs()
}

func (p *HbaseClient) SendDeleteAllRowTs(tableName Text, row Text, timestamp int64)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("deleteAllRowTs", thrift.CALL, p.SeqId)
  args262 := NewDeleteAllRowTsArgs()
  args262.TableName = tableName
  args262.Row = row
  args262.Timestamp = timestamp
  err = args262.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvDeleteAllRowTs() (io *IOError, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error264 := thrift.NewTApplicationExceptionDefault()
    error265, er := error264.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error265
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result263 := NewDeleteAllRowTsResult()
  err = result263.Read(iprot)
  iprot.ReadMessageEnd()
  if result263.Io != nil {
    io = result263.Io
  }
  return
}

/**
 * Get a scanner on the current table starting at the specified row and
 * ending at the last row in the table.  Return the specified columns.
 * 
 * @return scanner id to be used with other scanner procedures
 * 
 * Parameters:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 */
func (p *HbaseClient) ScannerOpen(tableName Text, startRow Text, columns thrift.TList) (retval266 ScannerID, io *IOError, err error) {
  err = p.SendScannerOpen(tableName, startRow, columns)
  if err != nil { return }
  return p.RecvScannerOpen()
}

func (p *HbaseClient) SendScannerOpen(tableName Text, startRow Text, columns thrift.TList)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("scannerOpen", thrift.CALL, p.SeqId)
  args267 := NewScannerOpenArgs()
  args267.TableName = tableName
  args267.StartRow = startRow
  args267.Columns = columns
  err = args267.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvScannerOpen() (value ScannerID, io *IOError, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error269 := thrift.NewTApplicationExceptionDefault()
    error270, er := error269.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error270
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result268 := NewScannerOpenResult()
  err = result268.Read(iprot)
  iprot.ReadMessageEnd()
  value = result268.Success
  if result268.Io != nil {
    io = result268.Io
  }
  return
}

/**
 * Get a scanner on the current table starting and stopping at the
 * specified rows.  ending at the last row in the table.  Return the
 * specified columns.
 * 
 * @return scanner id to be used with other scanner procedures
 * 
 * Parameters:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - StopRow: row to stop scanning on. This row is *not* included in the
 * scanner's results
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 */
func (p *HbaseClient) ScannerOpenWithStop(tableName Text, startRow Text, stopRow Text, columns thrift.TList) (retval271 ScannerID, io *IOError, err error) {
  err = p.SendScannerOpenWithStop(tableName, startRow, stopRow, columns)
  if err != nil { return }
  return p.RecvScannerOpenWithStop()
}

func (p *HbaseClient) SendScannerOpenWithStop(tableName Text, startRow Text, stopRow Text, columns thrift.TList)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("scannerOpenWithStop", thrift.CALL, p.SeqId)
  args272 := NewScannerOpenWithStopArgs()
  args272.TableName = tableName
  args272.StartRow = startRow
  args272.StopRow = stopRow
  args272.Columns = columns
  err = args272.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvScannerOpenWithStop() (value ScannerID, io *IOError, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error274 := thrift.NewTApplicationExceptionDefault()
    error275, er := error274.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error275
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result273 := NewScannerOpenWithStopResult()
  err = result273.Read(iprot)
  iprot.ReadMessageEnd()
  value = result273.Success
  if result273.Io != nil {
    io = result273.Io
  }
  return
}

/**
 * Open a scanner for a given prefix.  That is all rows will have the specified
 * prefix. No other rows will be returned.
 * 
 * @return scanner id to use with other scanner calls
 * 
 * Parameters:
 *  - TableName: name of table
 *  - StartAndPrefix: the prefix (and thus start row) of the keys you want
 *  - Columns: the columns you want returned
 */
func (p *HbaseClient) ScannerOpenWithPrefix(tableName Text, startAndPrefix Text, columns thrift.TList) (retval276 ScannerID, io *IOError, err error) {
  err = p.SendScannerOpenWithPrefix(tableName, startAndPrefix, columns)
  if err != nil { return }
  return p.RecvScannerOpenWithPrefix()
}

func (p *HbaseClient) SendScannerOpenWithPrefix(tableName Text, startAndPrefix Text, columns thrift.TList)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("scannerOpenWithPrefix", thrift.CALL, p.SeqId)
  args277 := NewScannerOpenWithPrefixArgs()
  args277.TableName = tableName
  args277.StartAndPrefix = startAndPrefix
  args277.Columns = columns
  err = args277.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvScannerOpenWithPrefix() (value ScannerID, io *IOError, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error279 := thrift.NewTApplicationExceptionDefault()
    error280, er := error279.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error280
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result278 := NewScannerOpenWithPrefixResult()
  err = result278.Read(iprot)
  iprot.ReadMessageEnd()
  value = result278.Success
  if result278.Io != nil {
    io = result278.Io
  }
  return
}

/**
 * Get a scanner on the current table starting at the specified row and
 * ending at the last row in the table.  Return the specified columns.
 * Only values with the specified timestamp are returned.
 * 
 * @return scanner id to be used with other scanner procedures
 * 
 * Parameters:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 *  - Timestamp: timestamp
 */
func (p *HbaseClient) ScannerOpenTs(tableName Text, startRow Text, columns thrift.TList, timestamp int64) (retval281 ScannerID, io *IOError, err error) {
  err = p.SendScannerOpenTs(tableName, startRow, columns, timestamp)
  if err != nil { return }
  return p.RecvScannerOpenTs()
}

func (p *HbaseClient) SendScannerOpenTs(tableName Text, startRow Text, columns thrift.TList, timestamp int64)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("scannerOpenTs", thrift.CALL, p.SeqId)
  args282 := NewScannerOpenTsArgs()
  args282.TableName = tableName
  args282.StartRow = startRow
  args282.Columns = columns
  args282.Timestamp = timestamp
  err = args282.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvScannerOpenTs() (value ScannerID, io *IOError, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error284 := thrift.NewTApplicationExceptionDefault()
    error285, er := error284.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error285
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result283 := NewScannerOpenTsResult()
  err = result283.Read(iprot)
  iprot.ReadMessageEnd()
  value = result283.Success
  if result283.Io != nil {
    io = result283.Io
  }
  return
}

/**
 * Get a scanner on the current table starting and stopping at the
 * specified rows.  ending at the last row in the table.  Return the
 * specified columns.  Only values with the specified timestamp are
 * returned.
 * 
 * @return scanner id to be used with other scanner procedures
 * 
 * Parameters:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - StopRow: row to stop scanning on. This row is *not* included in the
 * scanner's results
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 *  - Timestamp: timestamp
 */
func (p *HbaseClient) ScannerOpenWithStopTs(tableName Text, startRow Text, stopRow Text, columns thrift.TList, timestamp int64) (retval286 ScannerID, io *IOError, err error) {
  err = p.SendScannerOpenWithStopTs(tableName, startRow, stopRow, columns, timestamp)
  if err != nil { return }
  return p.RecvScannerOpenWithStopTs()
}

func (p *HbaseClient) SendScannerOpenWithStopTs(tableName Text, startRow Text, stopRow Text, columns thrift.TList, timestamp int64)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("scannerOpenWithStopTs", thrift.CALL, p.SeqId)
  args287 := NewScannerOpenWithStopTsArgs()
  args287.TableName = tableName
  args287.StartRow = startRow
  args287.StopRow = stopRow
  args287.Columns = columns
  args287.Timestamp = timestamp
  err = args287.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvScannerOpenWithStopTs() (value ScannerID, io *IOError, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error289 := thrift.NewTApplicationExceptionDefault()
    error290, er := error289.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error290
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result288 := NewScannerOpenWithStopTsResult()
  err = result288.Read(iprot)
  iprot.ReadMessageEnd()
  value = result288.Success
  if result288.Io != nil {
    io = result288.Io
  }
  return
}

/**
 * Returns the scanner's current row value and advances to the next
 * row in the table.  When there are no more rows in the table, or a key
 * greater-than-or-equal-to the scanner's specified stopRow is reached,
 * an empty list is returned.
 * 
 * @return a TRowResult containing the current row and a map of the columns to TCells.
 * 
 * @throws IllegalArgument if ScannerID is invalid
 * 
 * @throws NotFound when the scanner reaches the end
 * 
 * Parameters:
 *  - Id: id of a scanner returned by scannerOpen
 */
func (p *HbaseClient) ScannerGet(id ScannerID) (retval291 thrift.TList, io *IOError, ia *IllegalArgument, err error) {
  err = p.SendScannerGet(id)
  if err != nil { return }
  return p.RecvScannerGet()
}

func (p *HbaseClient) SendScannerGet(id ScannerID)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("scannerGet", thrift.CALL, p.SeqId)
  args292 := NewScannerGetArgs()
  args292.Id = id
  err = args292.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvScannerGet() (value thrift.TList, io *IOError, ia *IllegalArgument, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error294 := thrift.NewTApplicationExceptionDefault()
    error295, er := error294.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error295
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result293 := NewScannerGetResult()
  err = result293.Read(iprot)
  iprot.ReadMessageEnd()
  value = result293.Success
  if result293.Io != nil {
    io = result293.Io
  }
  if result293.Ia != nil {
    ia = result293.Ia
  }
  return
}

/**
 * Returns, starting at the scanner's current row value nbRows worth of
 * rows and advances to the next row in the table.  When there are no more
 * rows in the table, or a key greater-than-or-equal-to the scanner's
 * specified stopRow is reached,  an empty list is returned.
 * 
 * @return a TRowResult containing the current row and a map of the columns to TCells.
 * 
 * @throws IllegalArgument if ScannerID is invalid
 * 
 * @throws NotFound when the scanner reaches the end
 * 
 * Parameters:
 *  - Id: id of a scanner returned by scannerOpen
 *  - NbRows: number of results to return
 */
func (p *HbaseClient) ScannerGetList(id ScannerID, nbRows int32) (retval296 thrift.TList, io *IOError, ia *IllegalArgument, err error) {
  err = p.SendScannerGetList(id, nbRows)
  if err != nil { return }
  return p.RecvScannerGetList()
}

func (p *HbaseClient) SendScannerGetList(id ScannerID, nbRows int32)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("scannerGetList", thrift.CALL, p.SeqId)
  args297 := NewScannerGetListArgs()
  args297.Id = id
  args297.NbRows = nbRows
  err = args297.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvScannerGetList() (value thrift.TList, io *IOError, ia *IllegalArgument, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error299 := thrift.NewTApplicationExceptionDefault()
    error300, er := error299.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error300
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result298 := NewScannerGetListResult()
  err = result298.Read(iprot)
  iprot.ReadMessageEnd()
  value = result298.Success
  if result298.Io != nil {
    io = result298.Io
  }
  if result298.Ia != nil {
    ia = result298.Ia
  }
  return
}

/**
 * Closes the server-state associated with an open scanner.
 * 
 * @throws IllegalArgument if ScannerID is invalid
 * 
 * Parameters:
 *  - Id: id of a scanner returned by scannerOpen
 */
func (p *HbaseClient) ScannerClose(id ScannerID) (io *IOError, ia *IllegalArgument, err error) {
  err = p.SendScannerClose(id)
  if err != nil { return }
  return p.RecvScannerClose()
}

func (p *HbaseClient) SendScannerClose(id ScannerID)(err error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("scannerClose", thrift.CALL, p.SeqId)
  args302 := NewScannerCloseArgs()
  args302.Id = id
  err = args302.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *HbaseClient) RecvScannerClose() (io *IOError, ia *IllegalArgument, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, er := iprot.ReadMessageBegin()
  if er != nil {
    err = er
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error304 := thrift.NewTApplicationExceptionDefault()
    error305, er := error304.Read(iprot)
    if er != nil {
      err = er
      return
    }
    if er = iprot.ReadMessageEnd(); er != nil {
      err = er
      return
    }
    err = error305
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result303 := NewScannerCloseResult()
  err = result303.Read(iprot)
  iprot.ReadMessageEnd()
  if result303.Io != nil {
    io = result303.Io
  }
  if result303.Ia != nil {
    ia = result303.Ia
  }
  return
}


type HbaseProcessor struct {
  handler IHbase
  processorMap map[string]thrift.TProcessorFunction
}

func (p *HbaseProcessor) Handler() IHbase {
  return p.handler
}

func (p *HbaseProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *HbaseProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, exists bool) {
  processor, exists = p.processorMap[key]
  return processor, exists
}

func (p *HbaseProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewHbaseProcessor(handler IHbase) *HbaseProcessor {

  self306 := &HbaseProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self306.processorMap["enableTable"] = &hbaseProcessorEnableTable{handler:handler}
  self306.processorMap["disableTable"] = &hbaseProcessorDisableTable{handler:handler}
  self306.processorMap["isTableEnabled"] = &hbaseProcessorIsTableEnabled{handler:handler}
  self306.processorMap["compact"] = &hbaseProcessorCompact{handler:handler}
  self306.processorMap["majorCompact"] = &hbaseProcessorMajorCompact{handler:handler}
  self306.processorMap["getTableNames"] = &hbaseProcessorGetTableNames{handler:handler}
  self306.processorMap["getColumnDescriptors"] = &hbaseProcessorGetColumnDescriptors{handler:handler}
  self306.processorMap["getTableRegions"] = &hbaseProcessorGetTableRegions{handler:handler}
  self306.processorMap["createTable"] = &hbaseProcessorCreateTable{handler:handler}
  self306.processorMap["deleteTable"] = &hbaseProcessorDeleteTable{handler:handler}
  self306.processorMap["get"] = &hbaseProcessorGet{handler:handler}
  self306.processorMap["getVer"] = &hbaseProcessorGetVer{handler:handler}
  self306.processorMap["getVerTs"] = &hbaseProcessorGetVerTs{handler:handler}
  self306.processorMap["getRow"] = &hbaseProcessorGetRow{handler:handler}
  self306.processorMap["getRowWithColumns"] = &hbaseProcessorGetRowWithColumns{handler:handler}
  self306.processorMap["getRowTs"] = &hbaseProcessorGetRowTs{handler:handler}
  self306.processorMap["getRowWithColumnsTs"] = &hbaseProcessorGetRowWithColumnsTs{handler:handler}
  self306.processorMap["getRows"] = &hbaseProcessorGetRows{handler:handler}
  self306.processorMap["getRowsWithColumns"] = &hbaseProcessorGetRowsWithColumns{handler:handler}
  self306.processorMap["getRowsTs"] = &hbaseProcessorGetRowsTs{handler:handler}
  self306.processorMap["getRowsWithColumnsTs"] = &hbaseProcessorGetRowsWithColumnsTs{handler:handler}
  self306.processorMap["mutateRow"] = &hbaseProcessorMutateRow{handler:handler}
  self306.processorMap["mutateRowTs"] = &hbaseProcessorMutateRowTs{handler:handler}
  self306.processorMap["mutateRows"] = &hbaseProcessorMutateRows{handler:handler}
  self306.processorMap["mutateRowsTs"] = &hbaseProcessorMutateRowsTs{handler:handler}
  self306.processorMap["atomicIncrement"] = &hbaseProcessorAtomicIncrement{handler:handler}
  self306.processorMap["deleteAll"] = &hbaseProcessorDeleteAll{handler:handler}
  self306.processorMap["deleteAllTs"] = &hbaseProcessorDeleteAllTs{handler:handler}
  self306.processorMap["deleteAllRow"] = &hbaseProcessorDeleteAllRow{handler:handler}
  self306.processorMap["deleteAllRowTs"] = &hbaseProcessorDeleteAllRowTs{handler:handler}
  self306.processorMap["scannerOpen"] = &hbaseProcessorScannerOpen{handler:handler}
  self306.processorMap["scannerOpenWithStop"] = &hbaseProcessorScannerOpenWithStop{handler:handler}
  self306.processorMap["scannerOpenWithPrefix"] = &hbaseProcessorScannerOpenWithPrefix{handler:handler}
  self306.processorMap["scannerOpenTs"] = &hbaseProcessorScannerOpenTs{handler:handler}
  self306.processorMap["scannerOpenWithStopTs"] = &hbaseProcessorScannerOpenWithStopTs{handler:handler}
  self306.processorMap["scannerGet"] = &hbaseProcessorScannerGet{handler:handler}
  self306.processorMap["scannerGetList"] = &hbaseProcessorScannerGetList{handler:handler}
  self306.processorMap["scannerClose"] = &hbaseProcessorScannerClose{handler:handler}
return self306
}

func (p *HbaseProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return }
  process, nameFound := p.GetProcessorFunction(name)
  if !nameFound || process == nil {
    iprot.Skip(thrift.STRUCT)
    iprot.ReadMessageEnd()
    x307 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
    oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
    x307.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return false, x307
  }
  return process.Process(seqId, iprot, oprot)
}

type hbaseProcessorEnableTable struct {
  handler IHbase
}

func (p *hbaseProcessorEnableTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewEnableTableArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("enableTable", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewEnableTableResult()
  if result.Io, err = p.handler.EnableTable(args.TableName); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing enableTable: " + err.Error())
    oprot.WriteMessageBegin("enableTable", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("enableTable", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorDisableTable struct {
  handler IHbase
}

func (p *hbaseProcessorDisableTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewDisableTableArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("disableTable", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewDisableTableResult()
  if result.Io, err = p.handler.DisableTable(args.TableName); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing disableTable: " + err.Error())
    oprot.WriteMessageBegin("disableTable", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("disableTable", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorIsTableEnabled struct {
  handler IHbase
}

func (p *hbaseProcessorIsTableEnabled) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewIsTableEnabledArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("isTableEnabled", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewIsTableEnabledResult()
  if result.Success, result.Io, err = p.handler.IsTableEnabled(args.TableName); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isTableEnabled: " + err.Error())
    oprot.WriteMessageBegin("isTableEnabled", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("isTableEnabled", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorCompact struct {
  handler IHbase
}

func (p *hbaseProcessorCompact) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewCompactArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("compact", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewCompactResult()
  if result.Io, err = p.handler.Compact(args.TableNameOrRegionName); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing compact: " + err.Error())
    oprot.WriteMessageBegin("compact", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("compact", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorMajorCompact struct {
  handler IHbase
}

func (p *hbaseProcessorMajorCompact) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewMajorCompactArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("majorCompact", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewMajorCompactResult()
  if result.Io, err = p.handler.MajorCompact(args.TableNameOrRegionName); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing majorCompact: " + err.Error())
    oprot.WriteMessageBegin("majorCompact", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("majorCompact", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorGetTableNames struct {
  handler IHbase
}

func (p *hbaseProcessorGetTableNames) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetTableNamesArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getTableNames", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetTableNamesResult()
  if result.Success, result.Io, err = p.handler.GetTableNames(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTableNames: " + err.Error())
    oprot.WriteMessageBegin("getTableNames", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getTableNames", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorGetColumnDescriptors struct {
  handler IHbase
}

func (p *hbaseProcessorGetColumnDescriptors) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetColumnDescriptorsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getColumnDescriptors", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetColumnDescriptorsResult()
  if result.Success, result.Io, err = p.handler.GetColumnDescriptors(args.TableName); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getColumnDescriptors: " + err.Error())
    oprot.WriteMessageBegin("getColumnDescriptors", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getColumnDescriptors", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorGetTableRegions struct {
  handler IHbase
}

func (p *hbaseProcessorGetTableRegions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetTableRegionsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getTableRegions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetTableRegionsResult()
  if result.Success, result.Io, err = p.handler.GetTableRegions(args.TableName); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTableRegions: " + err.Error())
    oprot.WriteMessageBegin("getTableRegions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getTableRegions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorCreateTable struct {
  handler IHbase
}

func (p *hbaseProcessorCreateTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewCreateTableArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createTable", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewCreateTableResult()
  if result.Io, result.Ia, result.Exist, err = p.handler.CreateTable(args.TableName, args.ColumnFamilies); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createTable: " + err.Error())
    oprot.WriteMessageBegin("createTable", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("createTable", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorDeleteTable struct {
  handler IHbase
}

func (p *hbaseProcessorDeleteTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewDeleteTableArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteTable", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewDeleteTableResult()
  if result.Io, err = p.handler.DeleteTable(args.TableName); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteTable: " + err.Error())
    oprot.WriteMessageBegin("deleteTable", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("deleteTable", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorGet struct {
  handler IHbase
}

func (p *hbaseProcessorGet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetResult()
  if result.Success, result.Io, err = p.handler.Get(args.TableName, args.Row, args.Column); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get: " + err.Error())
    oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("get", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorGetVer struct {
  handler IHbase
}

func (p *hbaseProcessorGetVer) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetVerArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getVer", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetVerResult()
  if result.Success, result.Io, err = p.handler.GetVer(args.TableName, args.Row, args.Column, args.NumVersions); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getVer: " + err.Error())
    oprot.WriteMessageBegin("getVer", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getVer", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorGetVerTs struct {
  handler IHbase
}

func (p *hbaseProcessorGetVerTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetVerTsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getVerTs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetVerTsResult()
  if result.Success, result.Io, err = p.handler.GetVerTs(args.TableName, args.Row, args.Column, args.Timestamp, args.NumVersions); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getVerTs: " + err.Error())
    oprot.WriteMessageBegin("getVerTs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getVerTs", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorGetRow struct {
  handler IHbase
}

func (p *hbaseProcessorGetRow) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetRowArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getRow", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetRowResult()
  if result.Success, result.Io, err = p.handler.GetRow(args.TableName, args.Row); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRow: " + err.Error())
    oprot.WriteMessageBegin("getRow", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getRow", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorGetRowWithColumns struct {
  handler IHbase
}

func (p *hbaseProcessorGetRowWithColumns) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetRowWithColumnsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getRowWithColumns", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetRowWithColumnsResult()
  if result.Success, result.Io, err = p.handler.GetRowWithColumns(args.TableName, args.Row, args.Columns); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowWithColumns: " + err.Error())
    oprot.WriteMessageBegin("getRowWithColumns", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getRowWithColumns", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorGetRowTs struct {
  handler IHbase
}

func (p *hbaseProcessorGetRowTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetRowTsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getRowTs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetRowTsResult()
  if result.Success, result.Io, err = p.handler.GetRowTs(args.TableName, args.Row, args.Timestamp); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowTs: " + err.Error())
    oprot.WriteMessageBegin("getRowTs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getRowTs", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorGetRowWithColumnsTs struct {
  handler IHbase
}

func (p *hbaseProcessorGetRowWithColumnsTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetRowWithColumnsTsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getRowWithColumnsTs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetRowWithColumnsTsResult()
  if result.Success, result.Io, err = p.handler.GetRowWithColumnsTs(args.TableName, args.Row, args.Columns, args.Timestamp); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowWithColumnsTs: " + err.Error())
    oprot.WriteMessageBegin("getRowWithColumnsTs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getRowWithColumnsTs", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorGetRows struct {
  handler IHbase
}

func (p *hbaseProcessorGetRows) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetRowsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getRows", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetRowsResult()
  if result.Success, result.Io, err = p.handler.GetRows(args.TableName, args.Rows); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRows: " + err.Error())
    oprot.WriteMessageBegin("getRows", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getRows", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorGetRowsWithColumns struct {
  handler IHbase
}

func (p *hbaseProcessorGetRowsWithColumns) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetRowsWithColumnsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getRowsWithColumns", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetRowsWithColumnsResult()
  if result.Success, result.Io, err = p.handler.GetRowsWithColumns(args.TableName, args.Rows, args.Columns); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowsWithColumns: " + err.Error())
    oprot.WriteMessageBegin("getRowsWithColumns", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getRowsWithColumns", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorGetRowsTs struct {
  handler IHbase
}

func (p *hbaseProcessorGetRowsTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetRowsTsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getRowsTs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetRowsTsResult()
  if result.Success, result.Io, err = p.handler.GetRowsTs(args.TableName, args.Rows, args.Timestamp); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowsTs: " + err.Error())
    oprot.WriteMessageBegin("getRowsTs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getRowsTs", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorGetRowsWithColumnsTs struct {
  handler IHbase
}

func (p *hbaseProcessorGetRowsWithColumnsTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetRowsWithColumnsTsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getRowsWithColumnsTs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetRowsWithColumnsTsResult()
  if result.Success, result.Io, err = p.handler.GetRowsWithColumnsTs(args.TableName, args.Rows, args.Columns, args.Timestamp); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowsWithColumnsTs: " + err.Error())
    oprot.WriteMessageBegin("getRowsWithColumnsTs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getRowsWithColumnsTs", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorMutateRow struct {
  handler IHbase
}

func (p *hbaseProcessorMutateRow) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewMutateRowArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("mutateRow", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewMutateRowResult()
  if result.Io, result.Ia, err = p.handler.MutateRow(args.TableName, args.Row, args.Mutations); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mutateRow: " + err.Error())
    oprot.WriteMessageBegin("mutateRow", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("mutateRow", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorMutateRowTs struct {
  handler IHbase
}

func (p *hbaseProcessorMutateRowTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewMutateRowTsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("mutateRowTs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewMutateRowTsResult()
  if result.Io, result.Ia, err = p.handler.MutateRowTs(args.TableName, args.Row, args.Mutations, args.Timestamp); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mutateRowTs: " + err.Error())
    oprot.WriteMessageBegin("mutateRowTs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("mutateRowTs", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorMutateRows struct {
  handler IHbase
}

func (p *hbaseProcessorMutateRows) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewMutateRowsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("mutateRows", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewMutateRowsResult()
  if result.Io, result.Ia, err = p.handler.MutateRows(args.TableName, args.RowBatches); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mutateRows: " + err.Error())
    oprot.WriteMessageBegin("mutateRows", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("mutateRows", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorMutateRowsTs struct {
  handler IHbase
}

func (p *hbaseProcessorMutateRowsTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewMutateRowsTsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("mutateRowsTs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewMutateRowsTsResult()
  if result.Io, result.Ia, err = p.handler.MutateRowsTs(args.TableName, args.RowBatches, args.Timestamp); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mutateRowsTs: " + err.Error())
    oprot.WriteMessageBegin("mutateRowsTs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("mutateRowsTs", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorAtomicIncrement struct {
  handler IHbase
}

func (p *hbaseProcessorAtomicIncrement) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewAtomicIncrementArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("atomicIncrement", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewAtomicIncrementResult()
  if result.Success, result.Io, result.Ia, err = p.handler.AtomicIncrement(args.TableName, args.Row, args.Column, args.Value); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing atomicIncrement: " + err.Error())
    oprot.WriteMessageBegin("atomicIncrement", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("atomicIncrement", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorDeleteAll struct {
  handler IHbase
}

func (p *hbaseProcessorDeleteAll) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewDeleteAllArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteAll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewDeleteAllResult()
  if result.Io, err = p.handler.DeleteAll(args.TableName, args.Row, args.Column); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteAll: " + err.Error())
    oprot.WriteMessageBegin("deleteAll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("deleteAll", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorDeleteAllTs struct {
  handler IHbase
}

func (p *hbaseProcessorDeleteAllTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewDeleteAllTsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteAllTs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewDeleteAllTsResult()
  if result.Io, err = p.handler.DeleteAllTs(args.TableName, args.Row, args.Column, args.Timestamp); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteAllTs: " + err.Error())
    oprot.WriteMessageBegin("deleteAllTs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("deleteAllTs", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorDeleteAllRow struct {
  handler IHbase
}

func (p *hbaseProcessorDeleteAllRow) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewDeleteAllRowArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteAllRow", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewDeleteAllRowResult()
  if result.Io, err = p.handler.DeleteAllRow(args.TableName, args.Row); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteAllRow: " + err.Error())
    oprot.WriteMessageBegin("deleteAllRow", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("deleteAllRow", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorDeleteAllRowTs struct {
  handler IHbase
}

func (p *hbaseProcessorDeleteAllRowTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewDeleteAllRowTsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteAllRowTs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewDeleteAllRowTsResult()
  if result.Io, err = p.handler.DeleteAllRowTs(args.TableName, args.Row, args.Timestamp); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteAllRowTs: " + err.Error())
    oprot.WriteMessageBegin("deleteAllRowTs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("deleteAllRowTs", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorScannerOpen struct {
  handler IHbase
}

func (p *hbaseProcessorScannerOpen) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewScannerOpenArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("scannerOpen", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewScannerOpenResult()
  if result.Success, result.Io, err = p.handler.ScannerOpen(args.TableName, args.StartRow, args.Columns); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerOpen: " + err.Error())
    oprot.WriteMessageBegin("scannerOpen", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("scannerOpen", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorScannerOpenWithStop struct {
  handler IHbase
}

func (p *hbaseProcessorScannerOpenWithStop) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewScannerOpenWithStopArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("scannerOpenWithStop", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewScannerOpenWithStopResult()
  if result.Success, result.Io, err = p.handler.ScannerOpenWithStop(args.TableName, args.StartRow, args.StopRow, args.Columns); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerOpenWithStop: " + err.Error())
    oprot.WriteMessageBegin("scannerOpenWithStop", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("scannerOpenWithStop", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorScannerOpenWithPrefix struct {
  handler IHbase
}

func (p *hbaseProcessorScannerOpenWithPrefix) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewScannerOpenWithPrefixArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("scannerOpenWithPrefix", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewScannerOpenWithPrefixResult()
  if result.Success, result.Io, err = p.handler.ScannerOpenWithPrefix(args.TableName, args.StartAndPrefix, args.Columns); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerOpenWithPrefix: " + err.Error())
    oprot.WriteMessageBegin("scannerOpenWithPrefix", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("scannerOpenWithPrefix", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorScannerOpenTs struct {
  handler IHbase
}

func (p *hbaseProcessorScannerOpenTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewScannerOpenTsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("scannerOpenTs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewScannerOpenTsResult()
  if result.Success, result.Io, err = p.handler.ScannerOpenTs(args.TableName, args.StartRow, args.Columns, args.Timestamp); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerOpenTs: " + err.Error())
    oprot.WriteMessageBegin("scannerOpenTs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("scannerOpenTs", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorScannerOpenWithStopTs struct {
  handler IHbase
}

func (p *hbaseProcessorScannerOpenWithStopTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewScannerOpenWithStopTsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("scannerOpenWithStopTs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewScannerOpenWithStopTsResult()
  if result.Success, result.Io, err = p.handler.ScannerOpenWithStopTs(args.TableName, args.StartRow, args.StopRow, args.Columns, args.Timestamp); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerOpenWithStopTs: " + err.Error())
    oprot.WriteMessageBegin("scannerOpenWithStopTs", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("scannerOpenWithStopTs", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorScannerGet struct {
  handler IHbase
}

func (p *hbaseProcessorScannerGet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewScannerGetArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("scannerGet", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewScannerGetResult()
  if result.Success, result.Io, result.Ia, err = p.handler.ScannerGet(args.Id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerGet: " + err.Error())
    oprot.WriteMessageBegin("scannerGet", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("scannerGet", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorScannerGetList struct {
  handler IHbase
}

func (p *hbaseProcessorScannerGetList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewScannerGetListArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("scannerGetList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewScannerGetListResult()
  if result.Success, result.Io, result.Ia, err = p.handler.ScannerGetList(args.Id, args.NbRows); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerGetList: " + err.Error())
    oprot.WriteMessageBegin("scannerGetList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("scannerGetList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type hbaseProcessorScannerClose struct {
  handler IHbase
}

func (p *hbaseProcessorScannerClose) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewScannerCloseArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("scannerClose", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewScannerCloseResult()
  if result.Io, result.Ia, err = p.handler.ScannerClose(args.Id); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerClose: " + err.Error())
    oprot.WriteMessageBegin("scannerClose", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("scannerClose", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

/**
 * Attributes:
 *  - TableName: name of the table
 */
type EnableTableArgs struct {
  thrift.TStruct
  TableName Bytes "tableName"; // 1
}

func NewEnableTableArgs() *EnableTableArgs {
  output := &EnableTableArgs{
    TStruct:thrift.NewTStruct("enableTable_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *EnableTableArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *EnableTableArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v308, err309 := iprot.ReadString()
  if err309 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err309); }
  p.TableName = Bytes(v308)
  return err
}

func (p *EnableTableArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *EnableTableArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("enableTable_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *EnableTableArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *EnableTableArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *EnableTableArgs) TStructName() string {
  return "EnableTableArgs"
}

func (p *EnableTableArgs) ThriftName() string {
  return "enableTable_args"
}

func (p *EnableTableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EnableTableArgs(%+v)", *p)
}

func (p *EnableTableArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*EnableTableArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *EnableTableArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  }
  return nil
}

func (p *EnableTableArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Io
 */
type EnableTableResult struct {
  thrift.TStruct
  Io *IOError "io"; // 1
}

func NewEnableTableResult() *EnableTableResult {
  output := &EnableTableResult{
    TStruct:thrift.NewTStruct("enableTable_result", []thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *EnableTableResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *EnableTableResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err312 := p.Io.Read(iprot)
  if err312 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err312); }
  return err
}

func (p *EnableTableResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *EnableTableResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("enableTable_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *EnableTableResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *EnableTableResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *EnableTableResult) TStructName() string {
  return "EnableTableResult"
}

func (p *EnableTableResult) ThriftName() string {
  return "enableTable_result"
}

func (p *EnableTableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EnableTableResult(%+v)", *p)
}

func (p *EnableTableResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*EnableTableResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *EnableTableResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Io
  }
  return nil
}

func (p *EnableTableResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TableName: name of the table
 */
type DisableTableArgs struct {
  thrift.TStruct
  TableName Bytes "tableName"; // 1
}

func NewDisableTableArgs() *DisableTableArgs {
  output := &DisableTableArgs{
    TStruct:thrift.NewTStruct("disableTable_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *DisableTableArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DisableTableArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v313, err314 := iprot.ReadString()
  if err314 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err314); }
  p.TableName = Bytes(v313)
  return err
}

func (p *DisableTableArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DisableTableArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("disableTable_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DisableTableArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *DisableTableArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DisableTableArgs) TStructName() string {
  return "DisableTableArgs"
}

func (p *DisableTableArgs) ThriftName() string {
  return "disableTable_args"
}

func (p *DisableTableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DisableTableArgs(%+v)", *p)
}

func (p *DisableTableArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DisableTableArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *DisableTableArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  }
  return nil
}

func (p *DisableTableArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Io
 */
type DisableTableResult struct {
  thrift.TStruct
  Io *IOError "io"; // 1
}

func NewDisableTableResult() *DisableTableResult {
  output := &DisableTableResult{
    TStruct:thrift.NewTStruct("disableTable_result", []thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *DisableTableResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DisableTableResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err317 := p.Io.Read(iprot)
  if err317 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err317); }
  return err
}

func (p *DisableTableResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DisableTableResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("disableTable_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DisableTableResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *DisableTableResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DisableTableResult) TStructName() string {
  return "DisableTableResult"
}

func (p *DisableTableResult) ThriftName() string {
  return "disableTable_result"
}

func (p *DisableTableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DisableTableResult(%+v)", *p)
}

func (p *DisableTableResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DisableTableResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *DisableTableResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Io
  }
  return nil
}

func (p *DisableTableResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TableName: name of the table to check
 */
type IsTableEnabledArgs struct {
  thrift.TStruct
  TableName Bytes "tableName"; // 1
}

func NewIsTableEnabledArgs() *IsTableEnabledArgs {
  output := &IsTableEnabledArgs{
    TStruct:thrift.NewTStruct("isTableEnabled_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *IsTableEnabledArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsTableEnabledArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v318, err319 := iprot.ReadString()
  if err319 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err319); }
  p.TableName = Bytes(v318)
  return err
}

func (p *IsTableEnabledArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IsTableEnabledArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("isTableEnabled_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsTableEnabledArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *IsTableEnabledArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IsTableEnabledArgs) TStructName() string {
  return "IsTableEnabledArgs"
}

func (p *IsTableEnabledArgs) ThriftName() string {
  return "isTableEnabled_args"
}

func (p *IsTableEnabledArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsTableEnabledArgs(%+v)", *p)
}

func (p *IsTableEnabledArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsTableEnabledArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *IsTableEnabledArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  }
  return nil
}

func (p *IsTableEnabledArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type IsTableEnabledResult struct {
  thrift.TStruct
  Success bool "success"; // 0
  Io *IOError "io"; // 1
}

func NewIsTableEnabledResult() *IsTableEnabledResult {
  output := &IsTableEnabledResult{
    TStruct:thrift.NewTStruct("isTableEnabled_result", []thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *IsTableEnabledResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *IsTableEnabledResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v320, err321 := iprot.ReadBool()
  if err321 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err321); }
  p.Success = v320
  return err
}

func (p *IsTableEnabledResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *IsTableEnabledResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err324 := p.Io.Read(iprot)
  if err324 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err324); }
  return err
}

func (p *IsTableEnabledResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *IsTableEnabledResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("isTableEnabled_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *IsTableEnabledResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *IsTableEnabledResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *IsTableEnabledResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *IsTableEnabledResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *IsTableEnabledResult) TStructName() string {
  return "IsTableEnabledResult"
}

func (p *IsTableEnabledResult) ThriftName() string {
  return "isTableEnabled_result"
}

func (p *IsTableEnabledResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IsTableEnabledResult(%+v)", *p)
}

func (p *IsTableEnabledResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*IsTableEnabledResult)
  if !ok {
    return 0, false
  }
  if cmp := thrift.CompareBool(p.Success, data.Success); cmp != 0 {
    return cmp, true
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *IsTableEnabledResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *IsTableEnabledResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.BOOL, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TableNameOrRegionName
 */
type CompactArgs struct {
  thrift.TStruct
  TableNameOrRegionName Bytes "tableNameOrRegionName"; // 1
}

func NewCompactArgs() *CompactArgs {
  output := &CompactArgs{
    TStruct:thrift.NewTStruct("compact_args", []thrift.TField{
    thrift.NewTField("tableNameOrRegionName", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *CompactArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableNameOrRegionName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CompactArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v325, err326 := iprot.ReadString()
  if err326 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableNameOrRegionName", p.ThriftName(), err326); }
  p.TableNameOrRegionName = Bytes(v325)
  return err
}

func (p *CompactArgs) ReadFieldTableNameOrRegionName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CompactArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("compact_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CompactArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableNameOrRegionName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableNameOrRegionName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableNameOrRegionName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableNameOrRegionName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableNameOrRegionName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableNameOrRegionName", p.ThriftName(), err); }
  return err
}

func (p *CompactArgs) WriteFieldTableNameOrRegionName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CompactArgs) TStructName() string {
  return "CompactArgs"
}

func (p *CompactArgs) ThriftName() string {
  return "compact_args"
}

func (p *CompactArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompactArgs(%+v)", *p)
}

func (p *CompactArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CompactArgs)
  if !ok {
    return 0, false
  }
  if p.TableNameOrRegionName != data.TableNameOrRegionName {
    if p.TableNameOrRegionName < data.TableNameOrRegionName {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *CompactArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableNameOrRegionName
  }
  return nil
}

func (p *CompactArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableNameOrRegionName", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Io
 */
type CompactResult struct {
  thrift.TStruct
  Io *IOError "io"; // 1
}

func NewCompactResult() *CompactResult {
  output := &CompactResult{
    TStruct:thrift.NewTStruct("compact_result", []thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *CompactResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CompactResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err329 := p.Io.Read(iprot)
  if err329 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err329); }
  return err
}

func (p *CompactResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CompactResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("compact_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CompactResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *CompactResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CompactResult) TStructName() string {
  return "CompactResult"
}

func (p *CompactResult) ThriftName() string {
  return "compact_result"
}

func (p *CompactResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompactResult(%+v)", *p)
}

func (p *CompactResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CompactResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CompactResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Io
  }
  return nil
}

func (p *CompactResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TableNameOrRegionName
 */
type MajorCompactArgs struct {
  thrift.TStruct
  TableNameOrRegionName Bytes "tableNameOrRegionName"; // 1
}

func NewMajorCompactArgs() *MajorCompactArgs {
  output := &MajorCompactArgs{
    TStruct:thrift.NewTStruct("majorCompact_args", []thrift.TField{
    thrift.NewTField("tableNameOrRegionName", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *MajorCompactArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableNameOrRegionName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *MajorCompactArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v330, err331 := iprot.ReadString()
  if err331 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableNameOrRegionName", p.ThriftName(), err331); }
  p.TableNameOrRegionName = Bytes(v330)
  return err
}

func (p *MajorCompactArgs) ReadFieldTableNameOrRegionName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *MajorCompactArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("majorCompact_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *MajorCompactArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableNameOrRegionName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableNameOrRegionName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableNameOrRegionName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableNameOrRegionName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableNameOrRegionName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableNameOrRegionName", p.ThriftName(), err); }
  return err
}

func (p *MajorCompactArgs) WriteFieldTableNameOrRegionName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *MajorCompactArgs) TStructName() string {
  return "MajorCompactArgs"
}

func (p *MajorCompactArgs) ThriftName() string {
  return "majorCompact_args"
}

func (p *MajorCompactArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MajorCompactArgs(%+v)", *p)
}

func (p *MajorCompactArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*MajorCompactArgs)
  if !ok {
    return 0, false
  }
  if p.TableNameOrRegionName != data.TableNameOrRegionName {
    if p.TableNameOrRegionName < data.TableNameOrRegionName {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *MajorCompactArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableNameOrRegionName
  }
  return nil
}

func (p *MajorCompactArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableNameOrRegionName", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Io
 */
type MajorCompactResult struct {
  thrift.TStruct
  Io *IOError "io"; // 1
}

func NewMajorCompactResult() *MajorCompactResult {
  output := &MajorCompactResult{
    TStruct:thrift.NewTStruct("majorCompact_result", []thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *MajorCompactResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *MajorCompactResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err334 := p.Io.Read(iprot)
  if err334 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err334); }
  return err
}

func (p *MajorCompactResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *MajorCompactResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("majorCompact_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *MajorCompactResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *MajorCompactResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *MajorCompactResult) TStructName() string {
  return "MajorCompactResult"
}

func (p *MajorCompactResult) ThriftName() string {
  return "majorCompact_result"
}

func (p *MajorCompactResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MajorCompactResult(%+v)", *p)
}

func (p *MajorCompactResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*MajorCompactResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *MajorCompactResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Io
  }
  return nil
}

func (p *MajorCompactResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

type GetTableNamesArgs struct {
  thrift.TStruct
}

func NewGetTableNamesArgs() *GetTableNamesArgs {
  output := &GetTableNamesArgs{
    TStruct:thrift.NewTStruct("getTableNames_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *GetTableNamesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTableNamesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getTableNames_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTableNamesArgs) TStructName() string {
  return "GetTableNamesArgs"
}

func (p *GetTableNamesArgs) ThriftName() string {
  return "getTableNames_args"
}

func (p *GetTableNamesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTableNamesArgs(%+v)", *p)
}

func (p *GetTableNamesArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*GetTableNamesArgs)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *GetTableNamesArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *GetTableNamesArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetTableNamesResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  Io *IOError "io"; // 1
}

func NewGetTableNamesResult() *GetTableNamesResult {
  output := &GetTableNamesResult{
    TStruct:thrift.NewTStruct("getTableNames_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetTableNamesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTableNamesResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype340, _size337, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype340, _size337)
  for _i341:= 0; _i341 < _size337; _i341++ {
    v343, err344 := iprot.ReadString()
    if err344 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem342", "", err344); }
    _elem342 := Text(v343)
    p.Success.Push(_elem342)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetTableNamesResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetTableNamesResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err347 := p.Io.Read(iprot)
  if err347 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err347); }
  return err
}

func (p *GetTableNamesResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetTableNamesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getTableNames_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTableNamesResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter348 := range p.Success.Iter() {
      Iter349 := Iter348.(Text)
      err = oprot.WriteString(string(Iter349))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter349", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetTableNamesResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetTableNamesResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *GetTableNamesResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetTableNamesResult) TStructName() string {
  return "GetTableNamesResult"
}

func (p *GetTableNamesResult) ThriftName() string {
  return "getTableNames_result"
}

func (p *GetTableNamesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTableNamesResult(%+v)", *p)
}

func (p *GetTableNamesResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetTableNamesResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetTableNamesResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *GetTableNamesResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TableName: table name
 */
type GetColumnDescriptorsArgs struct {
  thrift.TStruct
  TableName Text "tableName"; // 1
}

func NewGetColumnDescriptorsArgs() *GetColumnDescriptorsArgs {
  output := &GetColumnDescriptorsArgs{
    TStruct:thrift.NewTStruct("getColumnDescriptors_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetColumnDescriptorsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetColumnDescriptorsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v350, err351 := iprot.ReadString()
  if err351 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err351); }
  p.TableName = Text(v350)
  return err
}

func (p *GetColumnDescriptorsArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetColumnDescriptorsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getColumnDescriptors_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetColumnDescriptorsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *GetColumnDescriptorsArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetColumnDescriptorsArgs) TStructName() string {
  return "GetColumnDescriptorsArgs"
}

func (p *GetColumnDescriptorsArgs) ThriftName() string {
  return "getColumnDescriptors_args"
}

func (p *GetColumnDescriptorsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetColumnDescriptorsArgs(%+v)", *p)
}

func (p *GetColumnDescriptorsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetColumnDescriptorsArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetColumnDescriptorsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  }
  return nil
}

func (p *GetColumnDescriptorsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetColumnDescriptorsResult struct {
  thrift.TStruct
  Success thrift.TMap "success"; // 0
  Io *IOError "io"; // 1
}

func NewGetColumnDescriptorsResult() *GetColumnDescriptorsResult {
  output := &GetColumnDescriptorsResult{
    TStruct:thrift.NewTStruct("getColumnDescriptors_result", []thrift.TField{
    thrift.NewTField("success", thrift.MAP, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetColumnDescriptorsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetColumnDescriptorsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype355, _vtype356, _size354, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTMap(_ktype355, _vtype356, _size354)
  for _i358:= 0; _i358 < _size354; _i358++ {
    v361, err362 := iprot.ReadString()
    if err362 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key359", "", err362); }
    _key359 := Text(v361)
    _val360 := NewColumnDescriptor()
    err365 := _val360.Read(iprot)
    if err365 != nil { return thrift.NewTProtocolExceptionReadStruct("_val360ColumnDescriptor", err365); }
    p.Success.Set(_key359, _val360)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *GetColumnDescriptorsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetColumnDescriptorsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err368 := p.Io.Read(iprot)
  if err368 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err368); }
  return err
}

func (p *GetColumnDescriptorsResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetColumnDescriptorsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getColumnDescriptors_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetColumnDescriptorsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.MAP, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter369 := range p.Success.Iter() {
      Kiter370, Viter371 := Miter369.Key().(Text), Miter369.Value().(*ColumnDescriptor)
      err = oprot.WriteString(string(Kiter370))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter370", "", err); }
      err = Viter371.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ColumnDescriptor", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetColumnDescriptorsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetColumnDescriptorsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *GetColumnDescriptorsResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetColumnDescriptorsResult) TStructName() string {
  return "GetColumnDescriptorsResult"
}

func (p *GetColumnDescriptorsResult) ThriftName() string {
  return "getColumnDescriptors_result"
}

func (p *GetColumnDescriptorsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetColumnDescriptorsResult(%+v)", *p)
}

func (p *GetColumnDescriptorsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetColumnDescriptorsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetColumnDescriptorsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *GetColumnDescriptorsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.MAP, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TableName: table name
 */
type GetTableRegionsArgs struct {
  thrift.TStruct
  TableName Text "tableName"; // 1
}

func NewGetTableRegionsArgs() *GetTableRegionsArgs {
  output := &GetTableRegionsArgs{
    TStruct:thrift.NewTStruct("getTableRegions_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetTableRegionsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTableRegionsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v372, err373 := iprot.ReadString()
  if err373 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err373); }
  p.TableName = Text(v372)
  return err
}

func (p *GetTableRegionsArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetTableRegionsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getTableRegions_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTableRegionsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *GetTableRegionsArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetTableRegionsArgs) TStructName() string {
  return "GetTableRegionsArgs"
}

func (p *GetTableRegionsArgs) ThriftName() string {
  return "getTableRegions_args"
}

func (p *GetTableRegionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTableRegionsArgs(%+v)", *p)
}

func (p *GetTableRegionsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetTableRegionsArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetTableRegionsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  }
  return nil
}

func (p *GetTableRegionsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetTableRegionsResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  Io *IOError "io"; // 1
}

func NewGetTableRegionsResult() *GetTableRegionsResult {
  output := &GetTableRegionsResult{
    TStruct:thrift.NewTStruct("getTableRegions_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetTableRegionsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTableRegionsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype379, _size376, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype379, _size376)
  for _i380:= 0; _i380 < _size376; _i380++ {
    _elem381 := NewTRegionInfo()
    err384 := _elem381.Read(iprot)
    if err384 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem381TRegionInfo", err384); }
    p.Success.Push(_elem381)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetTableRegionsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetTableRegionsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err387 := p.Io.Read(iprot)
  if err387 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err387); }
  return err
}

func (p *GetTableRegionsResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetTableRegionsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getTableRegions_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetTableRegionsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter388 := range p.Success.Iter() {
      Iter389 := Iter388.(*TRegionInfo)
      err = Iter389.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TRegionInfo", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetTableRegionsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetTableRegionsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *GetTableRegionsResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetTableRegionsResult) TStructName() string {
  return "GetTableRegionsResult"
}

func (p *GetTableRegionsResult) ThriftName() string {
  return "getTableRegions_result"
}

func (p *GetTableRegionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTableRegionsResult(%+v)", *p)
}

func (p *GetTableRegionsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetTableRegionsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetTableRegionsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *GetTableRegionsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TableName: name of table to create
 *  - ColumnFamilies: list of column family descriptors
 */
type CreateTableArgs struct {
  thrift.TStruct
  TableName Text "tableName"; // 1
  ColumnFamilies thrift.TList "columnFamilies"; // 2
}

func NewCreateTableArgs() *CreateTableArgs {
  output := &CreateTableArgs{
    TStruct:thrift.NewTStruct("createTable_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("columnFamilies", thrift.LIST, 2),
    }),
  }
  {
  }
  return output
}

func (p *CreateTableArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "columnFamilies" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CreateTableArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v390, err391 := iprot.ReadString()
  if err391 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err391); }
  p.TableName = Text(v390)
  return err
}

func (p *CreateTableArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CreateTableArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype397, _size394, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ColumnFamilies", "", err)
  }
  p.ColumnFamilies = thrift.NewTList(_etype397, _size394)
  for _i398:= 0; _i398 < _size394; _i398++ {
    _elem399 := NewColumnDescriptor()
    err402 := _elem399.Read(iprot)
    if err402 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem399ColumnDescriptor", err402); }
    p.ColumnFamilies.Push(_elem399)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *CreateTableArgs) ReadFieldColumnFamilies(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *CreateTableArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("createTable_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CreateTableArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *CreateTableArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CreateTableArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ColumnFamilies != nil {
    err = oprot.WriteFieldBegin("columnFamilies", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "columnFamilies", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.ColumnFamilies.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter403 := range p.ColumnFamilies.Iter() {
      Iter404 := Iter403.(*ColumnDescriptor)
      err = Iter404.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ColumnDescriptor", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "columnFamilies", p.ThriftName(), err); }
  }
  return err
}

func (p *CreateTableArgs) WriteFieldColumnFamilies(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *CreateTableArgs) TStructName() string {
  return "CreateTableArgs"
}

func (p *CreateTableArgs) ThriftName() string {
  return "createTable_args"
}

func (p *CreateTableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateTableArgs(%+v)", *p)
}

func (p *CreateTableArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CreateTableArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.ColumnFamilies.CompareTo(data.ColumnFamilies); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CreateTableArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  case 2: return p.ColumnFamilies
  }
  return nil
}

func (p *CreateTableArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("columnFamilies", thrift.LIST, 2),
    })
}

/**
 * Attributes:
 *  - Io
 *  - Ia
 *  - Exist
 */
type CreateTableResult struct {
  thrift.TStruct
  Io *IOError "io"; // 1
  Ia *IllegalArgument "ia"; // 2
  Exist *AlreadyExists "exist"; // 3
}

func NewCreateTableResult() *CreateTableResult {
  output := &CreateTableResult{
    TStruct:thrift.NewTStruct("createTable_result", []thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    thrift.NewTField("ia", thrift.STRUCT, 2),
    thrift.NewTField("exist", thrift.STRUCT, 3),
    }),
  }
  {
  }
  return output
}

func (p *CreateTableResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "ia" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "exist" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CreateTableResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err407 := p.Io.Read(iprot)
  if err407 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err407); }
  return err
}

func (p *CreateTableResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CreateTableResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ia = NewIllegalArgument()
  err410 := p.Ia.Read(iprot)
  if err410 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err410); }
  return err
}

func (p *CreateTableResult) ReadFieldIa(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *CreateTableResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Exist = NewAlreadyExists()
  err413 := p.Exist.Read(iprot)
  if err413 != nil { return thrift.NewTProtocolExceptionReadStruct("p.ExistAlreadyExists", err413); }
  return err
}

func (p *CreateTableResult) ReadFieldExist(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *CreateTableResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("createTable_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Exist != nil:
    if err = p.WriteField3(oprot); err != nil {
      return err
    }
  case p.Ia != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CreateTableResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *CreateTableResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CreateTableResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ia != nil {
    err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err); }
    err = p.Ia.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err); }
  }
  return err
}

func (p *CreateTableResult) WriteFieldIa(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *CreateTableResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Exist != nil {
    err = oprot.WriteFieldBegin("exist", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "exist", p.ThriftName(), err); }
    err = p.Exist.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("AlreadyExists", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "exist", p.ThriftName(), err); }
  }
  return err
}

func (p *CreateTableResult) WriteFieldExist(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *CreateTableResult) TStructName() string {
  return "CreateTableResult"
}

func (p *CreateTableResult) ThriftName() string {
  return "createTable_result"
}

func (p *CreateTableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateTableResult(%+v)", *p)
}

func (p *CreateTableResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CreateTableResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ia.CompareTo(data.Ia); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Exist.CompareTo(data.Exist); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CreateTableResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Io
  case 2: return p.Ia
  case 3: return p.Exist
  }
  return nil
}

func (p *CreateTableResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    thrift.NewTField("ia", thrift.STRUCT, 2),
    thrift.NewTField("exist", thrift.STRUCT, 3),
    })
}

/**
 * Attributes:
 *  - TableName: name of table to delete
 */
type DeleteTableArgs struct {
  thrift.TStruct
  TableName Text "tableName"; // 1
}

func NewDeleteTableArgs() *DeleteTableArgs {
  output := &DeleteTableArgs{
    TStruct:thrift.NewTStruct("deleteTable_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *DeleteTableArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DeleteTableArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v414, err415 := iprot.ReadString()
  if err415 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err415); }
  p.TableName = Text(v414)
  return err
}

func (p *DeleteTableArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DeleteTableArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("deleteTable_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DeleteTableArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *DeleteTableArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DeleteTableArgs) TStructName() string {
  return "DeleteTableArgs"
}

func (p *DeleteTableArgs) ThriftName() string {
  return "deleteTable_args"
}

func (p *DeleteTableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteTableArgs(%+v)", *p)
}

func (p *DeleteTableArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DeleteTableArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *DeleteTableArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  }
  return nil
}

func (p *DeleteTableArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Io
 */
type DeleteTableResult struct {
  thrift.TStruct
  Io *IOError "io"; // 1
}

func NewDeleteTableResult() *DeleteTableResult {
  output := &DeleteTableResult{
    TStruct:thrift.NewTStruct("deleteTable_result", []thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *DeleteTableResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DeleteTableResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err418 := p.Io.Read(iprot)
  if err418 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err418); }
  return err
}

func (p *DeleteTableResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DeleteTableResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("deleteTable_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DeleteTableResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *DeleteTableResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DeleteTableResult) TStructName() string {
  return "DeleteTableResult"
}

func (p *DeleteTableResult) ThriftName() string {
  return "deleteTable_result"
}

func (p *DeleteTableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteTableResult(%+v)", *p)
}

func (p *DeleteTableResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DeleteTableResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *DeleteTableResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Io
  }
  return nil
}

func (p *DeleteTableResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Column: column name
 */
type GetArgs struct {
  thrift.TStruct
  TableName Text "tableName"; // 1
  Row Text "row"; // 2
  Column Text "column"; // 3
}

func NewGetArgs() *GetArgs {
  output := &GetArgs{
    TStruct:thrift.NewTStruct("get_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("column", thrift.STRING, 3),
    }),
  }
  {
  }
  return output
}

func (p *GetArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "row" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "column" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v419, err420 := iprot.ReadString()
  if err420 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err420); }
  p.TableName = Text(v419)
  return err
}

func (p *GetArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v421, err422 := iprot.ReadString()
  if err422 != nil { return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err422); }
  p.Row = Text(v421)
  return err
}

func (p *GetArgs) ReadFieldRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v423, err424 := iprot.ReadString()
  if err424 != nil { return thrift.NewTProtocolExceptionReadField(3, "column", p.ThriftName(), err424); }
  p.Column = Text(v423)
  return err
}

func (p *GetArgs) ReadFieldColumn(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *GetArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Row) < 1 { return nil}
  err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Row))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  return err
}

func (p *GetArgs) WriteFieldRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Column) < 1 { return nil}
  err = oprot.WriteFieldBegin("column", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Column))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err); }
  return err
}

func (p *GetArgs) WriteFieldColumn(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetArgs) TStructName() string {
  return "GetArgs"
}

func (p *GetArgs) ThriftName() string {
  return "get_args"
}

func (p *GetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetArgs(%+v)", *p)
}

func (p *GetArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  if p.Row != data.Row {
    if p.Row < data.Row {
      return -1, true
    }
    return 1, true
  }
  if p.Column != data.Column {
    if p.Column < data.Column {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  case 2: return p.Row
  case 3: return p.Column
  }
  return nil
}

func (p *GetArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("column", thrift.STRING, 3),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  Io *IOError "io"; // 1
}

func NewGetResult() *GetResult {
  output := &GetResult{
    TStruct:thrift.NewTStruct("get_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype430, _size427, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype430, _size427)
  for _i431:= 0; _i431 < _size427; _i431++ {
    _elem432 := NewTCell()
    err435 := _elem432.Read(iprot)
    if err435 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem432TCell", err435); }
    p.Success.Push(_elem432)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err438 := p.Io.Read(iprot)
  if err438 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err438); }
  return err
}

func (p *GetResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("get_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter439 := range p.Success.Iter() {
      Iter440 := Iter439.(*TCell)
      err = Iter440.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TCell", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *GetResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetResult) TStructName() string {
  return "GetResult"
}

func (p *GetResult) ThriftName() string {
  return "get_result"
}

func (p *GetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetResult(%+v)", *p)
}

func (p *GetResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *GetResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Column: column name
 *  - NumVersions: number of versions to retrieve
 */
type GetVerArgs struct {
  thrift.TStruct
  TableName Text "tableName"; // 1
  Row Text "row"; // 2
  Column Text "column"; // 3
  NumVersions int32 "numVersions"; // 4
}

func NewGetVerArgs() *GetVerArgs {
  output := &GetVerArgs{
    TStruct:thrift.NewTStruct("getVer_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("column", thrift.STRING, 3),
    thrift.NewTField("numVersions", thrift.I32, 4),
    }),
  }
  {
  }
  return output
}

func (p *GetVerArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "row" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "column" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "numVersions" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetVerArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v441, err442 := iprot.ReadString()
  if err442 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err442); }
  p.TableName = Text(v441)
  return err
}

func (p *GetVerArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetVerArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v443, err444 := iprot.ReadString()
  if err444 != nil { return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err444); }
  p.Row = Text(v443)
  return err
}

func (p *GetVerArgs) ReadFieldRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetVerArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v445, err446 := iprot.ReadString()
  if err446 != nil { return thrift.NewTProtocolExceptionReadField(3, "column", p.ThriftName(), err446); }
  p.Column = Text(v445)
  return err
}

func (p *GetVerArgs) ReadFieldColumn(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetVerArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v447, err448 := iprot.ReadI32()
  if err448 != nil { return thrift.NewTProtocolExceptionReadField(4, "numVersions", p.ThriftName(), err448); }
  p.NumVersions = v447
  return err
}

func (p *GetVerArgs) ReadFieldNumVersions(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *GetVerArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getVer_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetVerArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *GetVerArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetVerArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Row) < 1 { return nil}
  err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Row))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  return err
}

func (p *GetVerArgs) WriteFieldRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetVerArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Column) < 1 { return nil}
  err = oprot.WriteFieldBegin("column", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Column))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err); }
  return err
}

func (p *GetVerArgs) WriteFieldColumn(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetVerArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.NumVersions) == 0 { return nil}
  err = oprot.WriteFieldBegin("numVersions", thrift.I32, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "numVersions", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.NumVersions))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "numVersions", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "numVersions", p.ThriftName(), err); }
  return err
}

func (p *GetVerArgs) WriteFieldNumVersions(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *GetVerArgs) TStructName() string {
  return "GetVerArgs"
}

func (p *GetVerArgs) ThriftName() string {
  return "getVer_args"
}

func (p *GetVerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetVerArgs(%+v)", *p)
}

func (p *GetVerArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetVerArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  if p.Row != data.Row {
    if p.Row < data.Row {
      return -1, true
    }
    return 1, true
  }
  if p.Column != data.Column {
    if p.Column < data.Column {
      return -1, true
    }
    return 1, true
  }
  if p.NumVersions != data.NumVersions {
    if p.NumVersions < data.NumVersions {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetVerArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  case 2: return p.Row
  case 3: return p.Column
  case 4: return p.NumVersions
  }
  return nil
}

func (p *GetVerArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("column", thrift.STRING, 3),
    thrift.NewTField("numVersions", thrift.I32, 4),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetVerResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  Io *IOError "io"; // 1
}

func NewGetVerResult() *GetVerResult {
  output := &GetVerResult{
    TStruct:thrift.NewTStruct("getVer_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetVerResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetVerResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype454, _size451, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype454, _size451)
  for _i455:= 0; _i455 < _size451; _i455++ {
    _elem456 := NewTCell()
    err459 := _elem456.Read(iprot)
    if err459 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem456TCell", err459); }
    p.Success.Push(_elem456)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetVerResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetVerResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err462 := p.Io.Read(iprot)
  if err462 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err462); }
  return err
}

func (p *GetVerResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetVerResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getVer_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetVerResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter463 := range p.Success.Iter() {
      Iter464 := Iter463.(*TCell)
      err = Iter464.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TCell", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetVerResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetVerResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *GetVerResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetVerResult) TStructName() string {
  return "GetVerResult"
}

func (p *GetVerResult) ThriftName() string {
  return "getVer_result"
}

func (p *GetVerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetVerResult(%+v)", *p)
}

func (p *GetVerResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetVerResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetVerResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *GetVerResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Column: column name
 *  - Timestamp: timestamp
 *  - NumVersions: number of versions to retrieve
 */
type GetVerTsArgs struct {
  thrift.TStruct
  TableName Text "tableName"; // 1
  Row Text "row"; // 2
  Column Text "column"; // 3
  Timestamp int64 "timestamp"; // 4
  NumVersions int32 "numVersions"; // 5
}

func NewGetVerTsArgs() *GetVerTsArgs {
  output := &GetVerTsArgs{
    TStruct:thrift.NewTStruct("getVerTs_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("column", thrift.STRING, 3),
    thrift.NewTField("timestamp", thrift.I64, 4),
    thrift.NewTField("numVersions", thrift.I32, 5),
    }),
  }
  {
  }
  return output
}

func (p *GetVerTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "row" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "column" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "timestamp" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "numVersions" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetVerTsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v465, err466 := iprot.ReadString()
  if err466 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err466); }
  p.TableName = Text(v465)
  return err
}

func (p *GetVerTsArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetVerTsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v467, err468 := iprot.ReadString()
  if err468 != nil { return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err468); }
  p.Row = Text(v467)
  return err
}

func (p *GetVerTsArgs) ReadFieldRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetVerTsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v469, err470 := iprot.ReadString()
  if err470 != nil { return thrift.NewTProtocolExceptionReadField(3, "column", p.ThriftName(), err470); }
  p.Column = Text(v469)
  return err
}

func (p *GetVerTsArgs) ReadFieldColumn(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetVerTsArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v471, err472 := iprot.ReadI64()
  if err472 != nil { return thrift.NewTProtocolExceptionReadField(4, "timestamp", p.ThriftName(), err472); }
  p.Timestamp = v471
  return err
}

func (p *GetVerTsArgs) ReadFieldTimestamp(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *GetVerTsArgs) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v473, err474 := iprot.ReadI32()
  if err474 != nil { return thrift.NewTProtocolExceptionReadField(5, "numVersions", p.ThriftName(), err474); }
  p.NumVersions = v473
  return err
}

func (p *GetVerTsArgs) ReadFieldNumVersions(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *GetVerTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getVerTs_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetVerTsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *GetVerTsArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetVerTsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Row) < 1 { return nil}
  err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Row))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  return err
}

func (p *GetVerTsArgs) WriteFieldRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetVerTsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Column) < 1 { return nil}
  err = oprot.WriteFieldBegin("column", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Column))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err); }
  return err
}

func (p *GetVerTsArgs) WriteFieldColumn(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetVerTsArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.Timestamp) == 0 { return nil}
  err = oprot.WriteFieldBegin("timestamp", thrift.I64, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.Timestamp))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err); }
  return err
}

func (p *GetVerTsArgs) WriteFieldTimestamp(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *GetVerTsArgs) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.NumVersions) == 0 { return nil}
  err = oprot.WriteFieldBegin("numVersions", thrift.I32, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "numVersions", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.NumVersions))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "numVersions", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "numVersions", p.ThriftName(), err); }
  return err
}

func (p *GetVerTsArgs) WriteFieldNumVersions(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *GetVerTsArgs) TStructName() string {
  return "GetVerTsArgs"
}

func (p *GetVerTsArgs) ThriftName() string {
  return "getVerTs_args"
}

func (p *GetVerTsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetVerTsArgs(%+v)", *p)
}

func (p *GetVerTsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetVerTsArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  if p.Row != data.Row {
    if p.Row < data.Row {
      return -1, true
    }
    return 1, true
  }
  if p.Column != data.Column {
    if p.Column < data.Column {
      return -1, true
    }
    return 1, true
  }
  if p.Timestamp != data.Timestamp {
    if p.Timestamp < data.Timestamp {
      return -1, true
    }
    return 1, true
  }
  if p.NumVersions != data.NumVersions {
    if p.NumVersions < data.NumVersions {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetVerTsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  case 2: return p.Row
  case 3: return p.Column
  case 4: return p.Timestamp
  case 5: return p.NumVersions
  }
  return nil
}

func (p *GetVerTsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("column", thrift.STRING, 3),
    thrift.NewTField("timestamp", thrift.I64, 4),
    thrift.NewTField("numVersions", thrift.I32, 5),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetVerTsResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  Io *IOError "io"; // 1
}

func NewGetVerTsResult() *GetVerTsResult {
  output := &GetVerTsResult{
    TStruct:thrift.NewTStruct("getVerTs_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetVerTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetVerTsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype480, _size477, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype480, _size477)
  for _i481:= 0; _i481 < _size477; _i481++ {
    _elem482 := NewTCell()
    err485 := _elem482.Read(iprot)
    if err485 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem482TCell", err485); }
    p.Success.Push(_elem482)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetVerTsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetVerTsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err488 := p.Io.Read(iprot)
  if err488 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err488); }
  return err
}

func (p *GetVerTsResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetVerTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getVerTs_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetVerTsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter489 := range p.Success.Iter() {
      Iter490 := Iter489.(*TCell)
      err = Iter490.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TCell", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetVerTsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetVerTsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *GetVerTsResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetVerTsResult) TStructName() string {
  return "GetVerTsResult"
}

func (p *GetVerTsResult) ThriftName() string {
  return "getVerTs_result"
}

func (p *GetVerTsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetVerTsResult(%+v)", *p)
}

func (p *GetVerTsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetVerTsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetVerTsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *GetVerTsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 */
type GetRowArgs struct {
  thrift.TStruct
  TableName Text "tableName"; // 1
  Row Text "row"; // 2
}

func NewGetRowArgs() *GetRowArgs {
  output := &GetRowArgs{
    TStruct:thrift.NewTStruct("getRow_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetRowArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "row" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v491, err492 := iprot.ReadString()
  if err492 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err492); }
  p.TableName = Text(v491)
  return err
}

func (p *GetRowArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetRowArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v493, err494 := iprot.ReadString()
  if err494 != nil { return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err494); }
  p.Row = Text(v493)
  return err
}

func (p *GetRowArgs) ReadFieldRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetRowArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getRow_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *GetRowArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetRowArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Row) < 1 { return nil}
  err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Row))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  return err
}

func (p *GetRowArgs) WriteFieldRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetRowArgs) TStructName() string {
  return "GetRowArgs"
}

func (p *GetRowArgs) ThriftName() string {
  return "getRow_args"
}

func (p *GetRowArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetRowArgs(%+v)", *p)
}

func (p *GetRowArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetRowArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  if p.Row != data.Row {
    if p.Row < data.Row {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetRowArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  case 2: return p.Row
  }
  return nil
}

func (p *GetRowArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  Io *IOError "io"; // 1
}

func NewGetRowResult() *GetRowResult {
  output := &GetRowResult{
    TStruct:thrift.NewTStruct("getRow_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetRowResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype500, _size497, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype500, _size497)
  for _i501:= 0; _i501 < _size497; _i501++ {
    _elem502 := NewTRowResult()
    err505 := _elem502.Read(iprot)
    if err505 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem502TRowResult", err505); }
    p.Success.Push(_elem502)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetRowResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetRowResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err508 := p.Io.Read(iprot)
  if err508 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err508); }
  return err
}

func (p *GetRowResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetRowResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getRow_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter509 := range p.Success.Iter() {
      Iter510 := Iter509.(*TRowResult)
      err = Iter510.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRowResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetRowResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRowResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetRowResult) TStructName() string {
  return "GetRowResult"
}

func (p *GetRowResult) ThriftName() string {
  return "getRow_result"
}

func (p *GetRowResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetRowResult(%+v)", *p)
}

func (p *GetRowResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetRowResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetRowResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *GetRowResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Columns: List of columns to return, null for all columns
 */
type GetRowWithColumnsArgs struct {
  thrift.TStruct
  TableName Text "tableName"; // 1
  Row Text "row"; // 2
  Columns thrift.TList "columns"; // 3
}

func NewGetRowWithColumnsArgs() *GetRowWithColumnsArgs {
  output := &GetRowWithColumnsArgs{
    TStruct:thrift.NewTStruct("getRowWithColumns_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("columns", thrift.LIST, 3),
    }),
  }
  {
  }
  return output
}

func (p *GetRowWithColumnsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "row" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "columns" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowWithColumnsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v511, err512 := iprot.ReadString()
  if err512 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err512); }
  p.TableName = Text(v511)
  return err
}

func (p *GetRowWithColumnsArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetRowWithColumnsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v513, err514 := iprot.ReadString()
  if err514 != nil { return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err514); }
  p.Row = Text(v513)
  return err
}

func (p *GetRowWithColumnsArgs) ReadFieldRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetRowWithColumnsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype520, _size517, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
  }
  p.Columns = thrift.NewTList(_etype520, _size517)
  for _i521:= 0; _i521 < _size517; _i521++ {
    v523, err524 := iprot.ReadString()
    if err524 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem522", "", err524); }
    _elem522 := Text(v523)
    p.Columns.Push(_elem522)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetRowWithColumnsArgs) ReadFieldColumns(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetRowWithColumnsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getRowWithColumns_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowWithColumnsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *GetRowWithColumnsArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetRowWithColumnsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Row) < 1 { return nil}
  err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Row))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  return err
}

func (p *GetRowWithColumnsArgs) WriteFieldRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetRowWithColumnsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Columns != nil {
    err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Columns.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter525 := range p.Columns.Iter() {
      Iter526 := Iter525.(Text)
      err = oprot.WriteString(string(Iter526))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter526", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRowWithColumnsArgs) WriteFieldColumns(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetRowWithColumnsArgs) TStructName() string {
  return "GetRowWithColumnsArgs"
}

func (p *GetRowWithColumnsArgs) ThriftName() string {
  return "getRowWithColumns_args"
}

func (p *GetRowWithColumnsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetRowWithColumnsArgs(%+v)", *p)
}

func (p *GetRowWithColumnsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetRowWithColumnsArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  if p.Row != data.Row {
    if p.Row < data.Row {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Columns.CompareTo(data.Columns); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetRowWithColumnsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  case 2: return p.Row
  case 3: return p.Columns
  }
  return nil
}

func (p *GetRowWithColumnsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("columns", thrift.LIST, 3),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowWithColumnsResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  Io *IOError "io"; // 1
}

func NewGetRowWithColumnsResult() *GetRowWithColumnsResult {
  output := &GetRowWithColumnsResult{
    TStruct:thrift.NewTStruct("getRowWithColumns_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetRowWithColumnsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowWithColumnsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype532, _size529, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype532, _size529)
  for _i533:= 0; _i533 < _size529; _i533++ {
    _elem534 := NewTRowResult()
    err537 := _elem534.Read(iprot)
    if err537 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem534TRowResult", err537); }
    p.Success.Push(_elem534)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetRowWithColumnsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetRowWithColumnsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err540 := p.Io.Read(iprot)
  if err540 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err540); }
  return err
}

func (p *GetRowWithColumnsResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetRowWithColumnsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getRowWithColumns_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowWithColumnsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter541 := range p.Success.Iter() {
      Iter542 := Iter541.(*TRowResult)
      err = Iter542.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRowWithColumnsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetRowWithColumnsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRowWithColumnsResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetRowWithColumnsResult) TStructName() string {
  return "GetRowWithColumnsResult"
}

func (p *GetRowWithColumnsResult) ThriftName() string {
  return "getRowWithColumns_result"
}

func (p *GetRowWithColumnsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetRowWithColumnsResult(%+v)", *p)
}

func (p *GetRowWithColumnsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetRowWithColumnsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetRowWithColumnsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *GetRowWithColumnsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TableName: name of the table
 *  - Row: row key
 *  - Timestamp: timestamp
 */
type GetRowTsArgs struct {
  thrift.TStruct
  TableName Text "tableName"; // 1
  Row Text "row"; // 2
  Timestamp int64 "timestamp"; // 3
}

func NewGetRowTsArgs() *GetRowTsArgs {
  output := &GetRowTsArgs{
    TStruct:thrift.NewTStruct("getRowTs_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("timestamp", thrift.I64, 3),
    }),
  }
  {
  }
  return output
}

func (p *GetRowTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "row" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "timestamp" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowTsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v543, err544 := iprot.ReadString()
  if err544 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err544); }
  p.TableName = Text(v543)
  return err
}

func (p *GetRowTsArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetRowTsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v545, err546 := iprot.ReadString()
  if err546 != nil { return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err546); }
  p.Row = Text(v545)
  return err
}

func (p *GetRowTsArgs) ReadFieldRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetRowTsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v547, err548 := iprot.ReadI64()
  if err548 != nil { return thrift.NewTProtocolExceptionReadField(3, "timestamp", p.ThriftName(), err548); }
  p.Timestamp = v547
  return err
}

func (p *GetRowTsArgs) ReadFieldTimestamp(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetRowTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getRowTs_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowTsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *GetRowTsArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetRowTsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Row) < 1 { return nil}
  err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Row))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  return err
}

func (p *GetRowTsArgs) WriteFieldRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetRowTsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.Timestamp) == 0 { return nil}
  err = oprot.WriteFieldBegin("timestamp", thrift.I64, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.Timestamp))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err); }
  return err
}

func (p *GetRowTsArgs) WriteFieldTimestamp(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetRowTsArgs) TStructName() string {
  return "GetRowTsArgs"
}

func (p *GetRowTsArgs) ThriftName() string {
  return "getRowTs_args"
}

func (p *GetRowTsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetRowTsArgs(%+v)", *p)
}

func (p *GetRowTsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetRowTsArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  if p.Row != data.Row {
    if p.Row < data.Row {
      return -1, true
    }
    return 1, true
  }
  if p.Timestamp != data.Timestamp {
    if p.Timestamp < data.Timestamp {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetRowTsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  case 2: return p.Row
  case 3: return p.Timestamp
  }
  return nil
}

func (p *GetRowTsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("timestamp", thrift.I64, 3),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowTsResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  Io *IOError "io"; // 1
}

func NewGetRowTsResult() *GetRowTsResult {
  output := &GetRowTsResult{
    TStruct:thrift.NewTStruct("getRowTs_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetRowTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowTsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype554, _size551, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype554, _size551)
  for _i555:= 0; _i555 < _size551; _i555++ {
    _elem556 := NewTRowResult()
    err559 := _elem556.Read(iprot)
    if err559 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem556TRowResult", err559); }
    p.Success.Push(_elem556)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetRowTsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetRowTsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err562 := p.Io.Read(iprot)
  if err562 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err562); }
  return err
}

func (p *GetRowTsResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetRowTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getRowTs_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowTsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter563 := range p.Success.Iter() {
      Iter564 := Iter563.(*TRowResult)
      err = Iter564.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRowTsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetRowTsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRowTsResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetRowTsResult) TStructName() string {
  return "GetRowTsResult"
}

func (p *GetRowTsResult) ThriftName() string {
  return "getRowTs_result"
}

func (p *GetRowTsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetRowTsResult(%+v)", *p)
}

func (p *GetRowTsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetRowTsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetRowTsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *GetRowTsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Columns: List of columns to return, null for all columns
 *  - Timestamp
 */
type GetRowWithColumnsTsArgs struct {
  thrift.TStruct
  TableName Text "tableName"; // 1
  Row Text "row"; // 2
  Columns thrift.TList "columns"; // 3
  Timestamp int64 "timestamp"; // 4
}

func NewGetRowWithColumnsTsArgs() *GetRowWithColumnsTsArgs {
  output := &GetRowWithColumnsTsArgs{
    TStruct:thrift.NewTStruct("getRowWithColumnsTs_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("columns", thrift.LIST, 3),
    thrift.NewTField("timestamp", thrift.I64, 4),
    }),
  }
  {
  }
  return output
}

func (p *GetRowWithColumnsTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "row" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "columns" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "timestamp" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowWithColumnsTsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v565, err566 := iprot.ReadString()
  if err566 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err566); }
  p.TableName = Text(v565)
  return err
}

func (p *GetRowWithColumnsTsArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetRowWithColumnsTsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v567, err568 := iprot.ReadString()
  if err568 != nil { return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err568); }
  p.Row = Text(v567)
  return err
}

func (p *GetRowWithColumnsTsArgs) ReadFieldRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetRowWithColumnsTsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype574, _size571, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
  }
  p.Columns = thrift.NewTList(_etype574, _size571)
  for _i575:= 0; _i575 < _size571; _i575++ {
    v577, err578 := iprot.ReadString()
    if err578 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem576", "", err578); }
    _elem576 := Text(v577)
    p.Columns.Push(_elem576)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetRowWithColumnsTsArgs) ReadFieldColumns(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetRowWithColumnsTsArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v579, err580 := iprot.ReadI64()
  if err580 != nil { return thrift.NewTProtocolExceptionReadField(4, "timestamp", p.ThriftName(), err580); }
  p.Timestamp = v579
  return err
}

func (p *GetRowWithColumnsTsArgs) ReadFieldTimestamp(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *GetRowWithColumnsTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getRowWithColumnsTs_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowWithColumnsTsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *GetRowWithColumnsTsArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetRowWithColumnsTsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Row) < 1 { return nil}
  err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Row))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  return err
}

func (p *GetRowWithColumnsTsArgs) WriteFieldRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetRowWithColumnsTsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Columns != nil {
    err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Columns.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter581 := range p.Columns.Iter() {
      Iter582 := Iter581.(Text)
      err = oprot.WriteString(string(Iter582))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter582", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRowWithColumnsTsArgs) WriteFieldColumns(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetRowWithColumnsTsArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.Timestamp) == 0 { return nil}
  err = oprot.WriteFieldBegin("timestamp", thrift.I64, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.Timestamp))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err); }
  return err
}

func (p *GetRowWithColumnsTsArgs) WriteFieldTimestamp(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *GetRowWithColumnsTsArgs) TStructName() string {
  return "GetRowWithColumnsTsArgs"
}

func (p *GetRowWithColumnsTsArgs) ThriftName() string {
  return "getRowWithColumnsTs_args"
}

func (p *GetRowWithColumnsTsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetRowWithColumnsTsArgs(%+v)", *p)
}

func (p *GetRowWithColumnsTsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetRowWithColumnsTsArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  if p.Row != data.Row {
    if p.Row < data.Row {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Columns.CompareTo(data.Columns); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.Timestamp != data.Timestamp {
    if p.Timestamp < data.Timestamp {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetRowWithColumnsTsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  case 2: return p.Row
  case 3: return p.Columns
  case 4: return p.Timestamp
  }
  return nil
}

func (p *GetRowWithColumnsTsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("columns", thrift.LIST, 3),
    thrift.NewTField("timestamp", thrift.I64, 4),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowWithColumnsTsResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  Io *IOError "io"; // 1
}

func NewGetRowWithColumnsTsResult() *GetRowWithColumnsTsResult {
  output := &GetRowWithColumnsTsResult{
    TStruct:thrift.NewTStruct("getRowWithColumnsTs_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetRowWithColumnsTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowWithColumnsTsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype588, _size585, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype588, _size585)
  for _i589:= 0; _i589 < _size585; _i589++ {
    _elem590 := NewTRowResult()
    err593 := _elem590.Read(iprot)
    if err593 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem590TRowResult", err593); }
    p.Success.Push(_elem590)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetRowWithColumnsTsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetRowWithColumnsTsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err596 := p.Io.Read(iprot)
  if err596 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err596); }
  return err
}

func (p *GetRowWithColumnsTsResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetRowWithColumnsTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getRowWithColumnsTs_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowWithColumnsTsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter597 := range p.Success.Iter() {
      Iter598 := Iter597.(*TRowResult)
      err = Iter598.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRowWithColumnsTsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetRowWithColumnsTsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRowWithColumnsTsResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetRowWithColumnsTsResult) TStructName() string {
  return "GetRowWithColumnsTsResult"
}

func (p *GetRowWithColumnsTsResult) ThriftName() string {
  return "getRowWithColumnsTs_result"
}

func (p *GetRowWithColumnsTsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetRowWithColumnsTsResult(%+v)", *p)
}

func (p *GetRowWithColumnsTsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetRowWithColumnsTsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetRowWithColumnsTsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *GetRowWithColumnsTsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Rows: row keys
 */
type GetRowsArgs struct {
  thrift.TStruct
  TableName Text "tableName"; // 1
  Rows thrift.TList "rows"; // 2
}

func NewGetRowsArgs() *GetRowsArgs {
  output := &GetRowsArgs{
    TStruct:thrift.NewTStruct("getRows_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("rows", thrift.LIST, 2),
    }),
  }
  {
  }
  return output
}

func (p *GetRowsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "rows" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v599, err600 := iprot.ReadString()
  if err600 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err600); }
  p.TableName = Text(v599)
  return err
}

func (p *GetRowsArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetRowsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype606, _size603, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Rows", "", err)
  }
  p.Rows = thrift.NewTList(_etype606, _size603)
  for _i607:= 0; _i607 < _size603; _i607++ {
    v609, err610 := iprot.ReadString()
    if err610 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem608", "", err610); }
    _elem608 := Text(v609)
    p.Rows.Push(_elem608)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetRowsArgs) ReadFieldRows(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetRowsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getRows_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *GetRowsArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetRowsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Rows != nil {
    err = oprot.WriteFieldBegin("rows", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Rows.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter611 := range p.Rows.Iter() {
      Iter612 := Iter611.(Text)
      err = oprot.WriteString(string(Iter612))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter612", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRowsArgs) WriteFieldRows(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetRowsArgs) TStructName() string {
  return "GetRowsArgs"
}

func (p *GetRowsArgs) ThriftName() string {
  return "getRows_args"
}

func (p *GetRowsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetRowsArgs(%+v)", *p)
}

func (p *GetRowsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetRowsArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Rows.CompareTo(data.Rows); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetRowsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  case 2: return p.Rows
  }
  return nil
}

func (p *GetRowsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("rows", thrift.LIST, 2),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowsResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  Io *IOError "io"; // 1
}

func NewGetRowsResult() *GetRowsResult {
  output := &GetRowsResult{
    TStruct:thrift.NewTStruct("getRows_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetRowsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype618, _size615, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype618, _size615)
  for _i619:= 0; _i619 < _size615; _i619++ {
    _elem620 := NewTRowResult()
    err623 := _elem620.Read(iprot)
    if err623 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem620TRowResult", err623); }
    p.Success.Push(_elem620)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetRowsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetRowsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err626 := p.Io.Read(iprot)
  if err626 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err626); }
  return err
}

func (p *GetRowsResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetRowsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getRows_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter627 := range p.Success.Iter() {
      Iter628 := Iter627.(*TRowResult)
      err = Iter628.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRowsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetRowsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRowsResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetRowsResult) TStructName() string {
  return "GetRowsResult"
}

func (p *GetRowsResult) ThriftName() string {
  return "getRows_result"
}

func (p *GetRowsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetRowsResult(%+v)", *p)
}

func (p *GetRowsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetRowsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetRowsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *GetRowsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Rows: row keys
 *  - Columns: List of columns to return, null for all columns
 */
type GetRowsWithColumnsArgs struct {
  thrift.TStruct
  TableName Text "tableName"; // 1
  Rows thrift.TList "rows"; // 2
  Columns thrift.TList "columns"; // 3
}

func NewGetRowsWithColumnsArgs() *GetRowsWithColumnsArgs {
  output := &GetRowsWithColumnsArgs{
    TStruct:thrift.NewTStruct("getRowsWithColumns_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("rows", thrift.LIST, 2),
    thrift.NewTField("columns", thrift.LIST, 3),
    }),
  }
  {
  }
  return output
}

func (p *GetRowsWithColumnsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "rows" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "columns" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowsWithColumnsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v629, err630 := iprot.ReadString()
  if err630 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err630); }
  p.TableName = Text(v629)
  return err
}

func (p *GetRowsWithColumnsArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetRowsWithColumnsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype636, _size633, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Rows", "", err)
  }
  p.Rows = thrift.NewTList(_etype636, _size633)
  for _i637:= 0; _i637 < _size633; _i637++ {
    v639, err640 := iprot.ReadString()
    if err640 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem638", "", err640); }
    _elem638 := Text(v639)
    p.Rows.Push(_elem638)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetRowsWithColumnsArgs) ReadFieldRows(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetRowsWithColumnsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype646, _size643, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
  }
  p.Columns = thrift.NewTList(_etype646, _size643)
  for _i647:= 0; _i647 < _size643; _i647++ {
    v649, err650 := iprot.ReadString()
    if err650 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem648", "", err650); }
    _elem648 := Text(v649)
    p.Columns.Push(_elem648)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetRowsWithColumnsArgs) ReadFieldColumns(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetRowsWithColumnsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getRowsWithColumns_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowsWithColumnsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *GetRowsWithColumnsArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetRowsWithColumnsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Rows != nil {
    err = oprot.WriteFieldBegin("rows", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Rows.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter651 := range p.Rows.Iter() {
      Iter652 := Iter651.(Text)
      err = oprot.WriteString(string(Iter652))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter652", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRowsWithColumnsArgs) WriteFieldRows(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetRowsWithColumnsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Columns != nil {
    err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Columns.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter653 := range p.Columns.Iter() {
      Iter654 := Iter653.(Text)
      err = oprot.WriteString(string(Iter654))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter654", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRowsWithColumnsArgs) WriteFieldColumns(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetRowsWithColumnsArgs) TStructName() string {
  return "GetRowsWithColumnsArgs"
}

func (p *GetRowsWithColumnsArgs) ThriftName() string {
  return "getRowsWithColumns_args"
}

func (p *GetRowsWithColumnsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetRowsWithColumnsArgs(%+v)", *p)
}

func (p *GetRowsWithColumnsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetRowsWithColumnsArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Rows.CompareTo(data.Rows); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Columns.CompareTo(data.Columns); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetRowsWithColumnsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  case 2: return p.Rows
  case 3: return p.Columns
  }
  return nil
}

func (p *GetRowsWithColumnsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("rows", thrift.LIST, 2),
    thrift.NewTField("columns", thrift.LIST, 3),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowsWithColumnsResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  Io *IOError "io"; // 1
}

func NewGetRowsWithColumnsResult() *GetRowsWithColumnsResult {
  output := &GetRowsWithColumnsResult{
    TStruct:thrift.NewTStruct("getRowsWithColumns_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetRowsWithColumnsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowsWithColumnsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype660, _size657, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype660, _size657)
  for _i661:= 0; _i661 < _size657; _i661++ {
    _elem662 := NewTRowResult()
    err665 := _elem662.Read(iprot)
    if err665 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem662TRowResult", err665); }
    p.Success.Push(_elem662)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetRowsWithColumnsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetRowsWithColumnsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err668 := p.Io.Read(iprot)
  if err668 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err668); }
  return err
}

func (p *GetRowsWithColumnsResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetRowsWithColumnsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getRowsWithColumns_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowsWithColumnsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter669 := range p.Success.Iter() {
      Iter670 := Iter669.(*TRowResult)
      err = Iter670.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRowsWithColumnsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetRowsWithColumnsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRowsWithColumnsResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetRowsWithColumnsResult) TStructName() string {
  return "GetRowsWithColumnsResult"
}

func (p *GetRowsWithColumnsResult) ThriftName() string {
  return "getRowsWithColumns_result"
}

func (p *GetRowsWithColumnsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetRowsWithColumnsResult(%+v)", *p)
}

func (p *GetRowsWithColumnsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetRowsWithColumnsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetRowsWithColumnsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *GetRowsWithColumnsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TableName: name of the table
 *  - Rows: row keys
 *  - Timestamp: timestamp
 */
type GetRowsTsArgs struct {
  thrift.TStruct
  TableName Text "tableName"; // 1
  Rows thrift.TList "rows"; // 2
  Timestamp int64 "timestamp"; // 3
}

func NewGetRowsTsArgs() *GetRowsTsArgs {
  output := &GetRowsTsArgs{
    TStruct:thrift.NewTStruct("getRowsTs_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("rows", thrift.LIST, 2),
    thrift.NewTField("timestamp", thrift.I64, 3),
    }),
  }
  {
  }
  return output
}

func (p *GetRowsTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "rows" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "timestamp" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowsTsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v671, err672 := iprot.ReadString()
  if err672 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err672); }
  p.TableName = Text(v671)
  return err
}

func (p *GetRowsTsArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetRowsTsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype678, _size675, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Rows", "", err)
  }
  p.Rows = thrift.NewTList(_etype678, _size675)
  for _i679:= 0; _i679 < _size675; _i679++ {
    v681, err682 := iprot.ReadString()
    if err682 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem680", "", err682); }
    _elem680 := Text(v681)
    p.Rows.Push(_elem680)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetRowsTsArgs) ReadFieldRows(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetRowsTsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v683, err684 := iprot.ReadI64()
  if err684 != nil { return thrift.NewTProtocolExceptionReadField(3, "timestamp", p.ThriftName(), err684); }
  p.Timestamp = v683
  return err
}

func (p *GetRowsTsArgs) ReadFieldTimestamp(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetRowsTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getRowsTs_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowsTsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *GetRowsTsArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetRowsTsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Rows != nil {
    err = oprot.WriteFieldBegin("rows", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Rows.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter685 := range p.Rows.Iter() {
      Iter686 := Iter685.(Text)
      err = oprot.WriteString(string(Iter686))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter686", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRowsTsArgs) WriteFieldRows(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetRowsTsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.Timestamp) == 0 { return nil}
  err = oprot.WriteFieldBegin("timestamp", thrift.I64, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.Timestamp))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err); }
  return err
}

func (p *GetRowsTsArgs) WriteFieldTimestamp(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetRowsTsArgs) TStructName() string {
  return "GetRowsTsArgs"
}

func (p *GetRowsTsArgs) ThriftName() string {
  return "getRowsTs_args"
}

func (p *GetRowsTsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetRowsTsArgs(%+v)", *p)
}

func (p *GetRowsTsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetRowsTsArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Rows.CompareTo(data.Rows); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.Timestamp != data.Timestamp {
    if p.Timestamp < data.Timestamp {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetRowsTsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  case 2: return p.Rows
  case 3: return p.Timestamp
  }
  return nil
}

func (p *GetRowsTsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("rows", thrift.LIST, 2),
    thrift.NewTField("timestamp", thrift.I64, 3),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowsTsResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  Io *IOError "io"; // 1
}

func NewGetRowsTsResult() *GetRowsTsResult {
  output := &GetRowsTsResult{
    TStruct:thrift.NewTStruct("getRowsTs_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetRowsTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowsTsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype692, _size689, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype692, _size689)
  for _i693:= 0; _i693 < _size689; _i693++ {
    _elem694 := NewTRowResult()
    err697 := _elem694.Read(iprot)
    if err697 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem694TRowResult", err697); }
    p.Success.Push(_elem694)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetRowsTsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetRowsTsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err700 := p.Io.Read(iprot)
  if err700 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err700); }
  return err
}

func (p *GetRowsTsResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetRowsTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getRowsTs_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowsTsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter701 := range p.Success.Iter() {
      Iter702 := Iter701.(*TRowResult)
      err = Iter702.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRowsTsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetRowsTsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRowsTsResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetRowsTsResult) TStructName() string {
  return "GetRowsTsResult"
}

func (p *GetRowsTsResult) ThriftName() string {
  return "getRowsTs_result"
}

func (p *GetRowsTsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetRowsTsResult(%+v)", *p)
}

func (p *GetRowsTsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetRowsTsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetRowsTsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *GetRowsTsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Rows: row keys
 *  - Columns: List of columns to return, null for all columns
 *  - Timestamp
 */
type GetRowsWithColumnsTsArgs struct {
  thrift.TStruct
  TableName Text "tableName"; // 1
  Rows thrift.TList "rows"; // 2
  Columns thrift.TList "columns"; // 3
  Timestamp int64 "timestamp"; // 4
}

func NewGetRowsWithColumnsTsArgs() *GetRowsWithColumnsTsArgs {
  output := &GetRowsWithColumnsTsArgs{
    TStruct:thrift.NewTStruct("getRowsWithColumnsTs_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("rows", thrift.LIST, 2),
    thrift.NewTField("columns", thrift.LIST, 3),
    thrift.NewTField("timestamp", thrift.I64, 4),
    }),
  }
  {
  }
  return output
}

func (p *GetRowsWithColumnsTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "rows" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "columns" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "timestamp" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowsWithColumnsTsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v703, err704 := iprot.ReadString()
  if err704 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err704); }
  p.TableName = Text(v703)
  return err
}

func (p *GetRowsWithColumnsTsArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetRowsWithColumnsTsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype710, _size707, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Rows", "", err)
  }
  p.Rows = thrift.NewTList(_etype710, _size707)
  for _i711:= 0; _i711 < _size707; _i711++ {
    v713, err714 := iprot.ReadString()
    if err714 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem712", "", err714); }
    _elem712 := Text(v713)
    p.Rows.Push(_elem712)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetRowsWithColumnsTsArgs) ReadFieldRows(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *GetRowsWithColumnsTsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype720, _size717, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
  }
  p.Columns = thrift.NewTList(_etype720, _size717)
  for _i721:= 0; _i721 < _size717; _i721++ {
    v723, err724 := iprot.ReadString()
    if err724 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem722", "", err724); }
    _elem722 := Text(v723)
    p.Columns.Push(_elem722)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetRowsWithColumnsTsArgs) ReadFieldColumns(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *GetRowsWithColumnsTsArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v725, err726 := iprot.ReadI64()
  if err726 != nil { return thrift.NewTProtocolExceptionReadField(4, "timestamp", p.ThriftName(), err726); }
  p.Timestamp = v725
  return err
}

func (p *GetRowsWithColumnsTsArgs) ReadFieldTimestamp(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *GetRowsWithColumnsTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getRowsWithColumnsTs_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowsWithColumnsTsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *GetRowsWithColumnsTsArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetRowsWithColumnsTsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Rows != nil {
    err = oprot.WriteFieldBegin("rows", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Rows.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter727 := range p.Rows.Iter() {
      Iter728 := Iter727.(Text)
      err = oprot.WriteString(string(Iter728))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter728", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRowsWithColumnsTsArgs) WriteFieldRows(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *GetRowsWithColumnsTsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Columns != nil {
    err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Columns.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter729 := range p.Columns.Iter() {
      Iter730 := Iter729.(Text)
      err = oprot.WriteString(string(Iter730))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter730", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRowsWithColumnsTsArgs) WriteFieldColumns(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *GetRowsWithColumnsTsArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.Timestamp) == 0 { return nil}
  err = oprot.WriteFieldBegin("timestamp", thrift.I64, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.Timestamp))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err); }
  return err
}

func (p *GetRowsWithColumnsTsArgs) WriteFieldTimestamp(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *GetRowsWithColumnsTsArgs) TStructName() string {
  return "GetRowsWithColumnsTsArgs"
}

func (p *GetRowsWithColumnsTsArgs) ThriftName() string {
  return "getRowsWithColumnsTs_args"
}

func (p *GetRowsWithColumnsTsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetRowsWithColumnsTsArgs(%+v)", *p)
}

func (p *GetRowsWithColumnsTsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetRowsWithColumnsTsArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Rows.CompareTo(data.Rows); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Columns.CompareTo(data.Columns); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.Timestamp != data.Timestamp {
    if p.Timestamp < data.Timestamp {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetRowsWithColumnsTsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  case 2: return p.Rows
  case 3: return p.Columns
  case 4: return p.Timestamp
  }
  return nil
}

func (p *GetRowsWithColumnsTsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("rows", thrift.LIST, 2),
    thrift.NewTField("columns", thrift.LIST, 3),
    thrift.NewTField("timestamp", thrift.I64, 4),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowsWithColumnsTsResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  Io *IOError "io"; // 1
}

func NewGetRowsWithColumnsTsResult() *GetRowsWithColumnsTsResult {
  output := &GetRowsWithColumnsTsResult{
    TStruct:thrift.NewTStruct("getRowsWithColumnsTs_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetRowsWithColumnsTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowsWithColumnsTsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype736, _size733, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype736, _size733)
  for _i737:= 0; _i737 < _size733; _i737++ {
    _elem738 := NewTRowResult()
    err741 := _elem738.Read(iprot)
    if err741 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem738TRowResult", err741); }
    p.Success.Push(_elem738)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *GetRowsWithColumnsTsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetRowsWithColumnsTsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err744 := p.Io.Read(iprot)
  if err744 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err744); }
  return err
}

func (p *GetRowsWithColumnsTsResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetRowsWithColumnsTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getRowsWithColumnsTs_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetRowsWithColumnsTsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter745 := range p.Success.Iter() {
      Iter746 := Iter745.(*TRowResult)
      err = Iter746.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRowsWithColumnsTsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetRowsWithColumnsTsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *GetRowsWithColumnsTsResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetRowsWithColumnsTsResult) TStructName() string {
  return "GetRowsWithColumnsTsResult"
}

func (p *GetRowsWithColumnsTsResult) ThriftName() string {
  return "getRowsWithColumnsTs_result"
}

func (p *GetRowsWithColumnsTsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetRowsWithColumnsTsResult(%+v)", *p)
}

func (p *GetRowsWithColumnsTsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetRowsWithColumnsTsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetRowsWithColumnsTsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *GetRowsWithColumnsTsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Mutations: list of mutation commands
 */
type MutateRowArgs struct {
  thrift.TStruct
  TableName Text "tableName"; // 1
  Row Text "row"; // 2
  Mutations thrift.TList "mutations"; // 3
}

func NewMutateRowArgs() *MutateRowArgs {
  output := &MutateRowArgs{
    TStruct:thrift.NewTStruct("mutateRow_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("mutations", thrift.LIST, 3),
    }),
  }
  {
  }
  return output
}

func (p *MutateRowArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "row" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "mutations" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *MutateRowArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v747, err748 := iprot.ReadString()
  if err748 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err748); }
  p.TableName = Text(v747)
  return err
}

func (p *MutateRowArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *MutateRowArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v749, err750 := iprot.ReadString()
  if err750 != nil { return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err750); }
  p.Row = Text(v749)
  return err
}

func (p *MutateRowArgs) ReadFieldRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *MutateRowArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype756, _size753, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Mutations", "", err)
  }
  p.Mutations = thrift.NewTList(_etype756, _size753)
  for _i757:= 0; _i757 < _size753; _i757++ {
    _elem758 := NewMutation()
    err761 := _elem758.Read(iprot)
    if err761 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem758Mutation", err761); }
    p.Mutations.Push(_elem758)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *MutateRowArgs) ReadFieldMutations(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *MutateRowArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("mutateRow_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *MutateRowArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *MutateRowArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *MutateRowArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Row) < 1 { return nil}
  err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Row))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  return err
}

func (p *MutateRowArgs) WriteFieldRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *MutateRowArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Mutations != nil {
    err = oprot.WriteFieldBegin("mutations", thrift.LIST, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "mutations", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Mutations.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter762 := range p.Mutations.Iter() {
      Iter763 := Iter762.(*Mutation)
      err = Iter763.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Mutation", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "mutations", p.ThriftName(), err); }
  }
  return err
}

func (p *MutateRowArgs) WriteFieldMutations(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *MutateRowArgs) TStructName() string {
  return "MutateRowArgs"
}

func (p *MutateRowArgs) ThriftName() string {
  return "mutateRow_args"
}

func (p *MutateRowArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MutateRowArgs(%+v)", *p)
}

func (p *MutateRowArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*MutateRowArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  if p.Row != data.Row {
    if p.Row < data.Row {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Mutations.CompareTo(data.Mutations); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *MutateRowArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  case 2: return p.Row
  case 3: return p.Mutations
  }
  return nil
}

func (p *MutateRowArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("mutations", thrift.LIST, 3),
    })
}

/**
 * Attributes:
 *  - Io
 *  - Ia
 */
type MutateRowResult struct {
  thrift.TStruct
  Io *IOError "io"; // 1
  Ia *IllegalArgument "ia"; // 2
}

func NewMutateRowResult() *MutateRowResult {
  output := &MutateRowResult{
    TStruct:thrift.NewTStruct("mutateRow_result", []thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    thrift.NewTField("ia", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *MutateRowResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "ia" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *MutateRowResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err766 := p.Io.Read(iprot)
  if err766 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err766); }
  return err
}

func (p *MutateRowResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *MutateRowResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ia = NewIllegalArgument()
  err769 := p.Ia.Read(iprot)
  if err769 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err769); }
  return err
}

func (p *MutateRowResult) ReadFieldIa(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *MutateRowResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("mutateRow_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Ia != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *MutateRowResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *MutateRowResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *MutateRowResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ia != nil {
    err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err); }
    err = p.Ia.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err); }
  }
  return err
}

func (p *MutateRowResult) WriteFieldIa(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *MutateRowResult) TStructName() string {
  return "MutateRowResult"
}

func (p *MutateRowResult) ThriftName() string {
  return "mutateRow_result"
}

func (p *MutateRowResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MutateRowResult(%+v)", *p)
}

func (p *MutateRowResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*MutateRowResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ia.CompareTo(data.Ia); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *MutateRowResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Io
  case 2: return p.Ia
  }
  return nil
}

func (p *MutateRowResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    thrift.NewTField("ia", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Mutations: list of mutation commands
 *  - Timestamp: timestamp
 */
type MutateRowTsArgs struct {
  thrift.TStruct
  TableName Text "tableName"; // 1
  Row Text "row"; // 2
  Mutations thrift.TList "mutations"; // 3
  Timestamp int64 "timestamp"; // 4
}

func NewMutateRowTsArgs() *MutateRowTsArgs {
  output := &MutateRowTsArgs{
    TStruct:thrift.NewTStruct("mutateRowTs_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("mutations", thrift.LIST, 3),
    thrift.NewTField("timestamp", thrift.I64, 4),
    }),
  }
  {
  }
  return output
}

func (p *MutateRowTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "row" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "mutations" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "timestamp" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *MutateRowTsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v770, err771 := iprot.ReadString()
  if err771 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err771); }
  p.TableName = Text(v770)
  return err
}

func (p *MutateRowTsArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *MutateRowTsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v772, err773 := iprot.ReadString()
  if err773 != nil { return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err773); }
  p.Row = Text(v772)
  return err
}

func (p *MutateRowTsArgs) ReadFieldRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *MutateRowTsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype779, _size776, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Mutations", "", err)
  }
  p.Mutations = thrift.NewTList(_etype779, _size776)
  for _i780:= 0; _i780 < _size776; _i780++ {
    _elem781 := NewMutation()
    err784 := _elem781.Read(iprot)
    if err784 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem781Mutation", err784); }
    p.Mutations.Push(_elem781)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *MutateRowTsArgs) ReadFieldMutations(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *MutateRowTsArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v785, err786 := iprot.ReadI64()
  if err786 != nil { return thrift.NewTProtocolExceptionReadField(4, "timestamp", p.ThriftName(), err786); }
  p.Timestamp = v785
  return err
}

func (p *MutateRowTsArgs) ReadFieldTimestamp(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *MutateRowTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("mutateRowTs_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *MutateRowTsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *MutateRowTsArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *MutateRowTsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Row) < 1 { return nil}
  err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Row))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  return err
}

func (p *MutateRowTsArgs) WriteFieldRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *MutateRowTsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Mutations != nil {
    err = oprot.WriteFieldBegin("mutations", thrift.LIST, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "mutations", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Mutations.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter787 := range p.Mutations.Iter() {
      Iter788 := Iter787.(*Mutation)
      err = Iter788.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Mutation", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "mutations", p.ThriftName(), err); }
  }
  return err
}

func (p *MutateRowTsArgs) WriteFieldMutations(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *MutateRowTsArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.Timestamp) == 0 { return nil}
  err = oprot.WriteFieldBegin("timestamp", thrift.I64, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.Timestamp))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err); }
  return err
}

func (p *MutateRowTsArgs) WriteFieldTimestamp(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *MutateRowTsArgs) TStructName() string {
  return "MutateRowTsArgs"
}

func (p *MutateRowTsArgs) ThriftName() string {
  return "mutateRowTs_args"
}

func (p *MutateRowTsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MutateRowTsArgs(%+v)", *p)
}

func (p *MutateRowTsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*MutateRowTsArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  if p.Row != data.Row {
    if p.Row < data.Row {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Mutations.CompareTo(data.Mutations); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.Timestamp != data.Timestamp {
    if p.Timestamp < data.Timestamp {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *MutateRowTsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  case 2: return p.Row
  case 3: return p.Mutations
  case 4: return p.Timestamp
  }
  return nil
}

func (p *MutateRowTsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("mutations", thrift.LIST, 3),
    thrift.NewTField("timestamp", thrift.I64, 4),
    })
}

/**
 * Attributes:
 *  - Io
 *  - Ia
 */
type MutateRowTsResult struct {
  thrift.TStruct
  Io *IOError "io"; // 1
  Ia *IllegalArgument "ia"; // 2
}

func NewMutateRowTsResult() *MutateRowTsResult {
  output := &MutateRowTsResult{
    TStruct:thrift.NewTStruct("mutateRowTs_result", []thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    thrift.NewTField("ia", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *MutateRowTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "ia" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *MutateRowTsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err791 := p.Io.Read(iprot)
  if err791 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err791); }
  return err
}

func (p *MutateRowTsResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *MutateRowTsResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ia = NewIllegalArgument()
  err794 := p.Ia.Read(iprot)
  if err794 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err794); }
  return err
}

func (p *MutateRowTsResult) ReadFieldIa(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *MutateRowTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("mutateRowTs_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Ia != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *MutateRowTsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *MutateRowTsResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *MutateRowTsResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ia != nil {
    err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err); }
    err = p.Ia.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err); }
  }
  return err
}

func (p *MutateRowTsResult) WriteFieldIa(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *MutateRowTsResult) TStructName() string {
  return "MutateRowTsResult"
}

func (p *MutateRowTsResult) ThriftName() string {
  return "mutateRowTs_result"
}

func (p *MutateRowTsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MutateRowTsResult(%+v)", *p)
}

func (p *MutateRowTsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*MutateRowTsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ia.CompareTo(data.Ia); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *MutateRowTsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Io
  case 2: return p.Ia
  }
  return nil
}

func (p *MutateRowTsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    thrift.NewTField("ia", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - RowBatches: list of row batches
 */
type MutateRowsArgs struct {
  thrift.TStruct
  TableName Text "tableName"; // 1
  RowBatches thrift.TList "rowBatches"; // 2
}

func NewMutateRowsArgs() *MutateRowsArgs {
  output := &MutateRowsArgs{
    TStruct:thrift.NewTStruct("mutateRows_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("rowBatches", thrift.LIST, 2),
    }),
  }
  {
  }
  return output
}

func (p *MutateRowsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "rowBatches" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *MutateRowsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v795, err796 := iprot.ReadString()
  if err796 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err796); }
  p.TableName = Text(v795)
  return err
}

func (p *MutateRowsArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *MutateRowsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype802, _size799, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.RowBatches", "", err)
  }
  p.RowBatches = thrift.NewTList(_etype802, _size799)
  for _i803:= 0; _i803 < _size799; _i803++ {
    _elem804 := NewBatchMutation()
    err807 := _elem804.Read(iprot)
    if err807 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem804BatchMutation", err807); }
    p.RowBatches.Push(_elem804)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *MutateRowsArgs) ReadFieldRowBatches(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *MutateRowsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("mutateRows_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *MutateRowsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *MutateRowsArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *MutateRowsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.RowBatches != nil {
    err = oprot.WriteFieldBegin("rowBatches", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "rowBatches", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.RowBatches.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter808 := range p.RowBatches.Iter() {
      Iter809 := Iter808.(*BatchMutation)
      err = Iter809.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BatchMutation", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "rowBatches", p.ThriftName(), err); }
  }
  return err
}

func (p *MutateRowsArgs) WriteFieldRowBatches(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *MutateRowsArgs) TStructName() string {
  return "MutateRowsArgs"
}

func (p *MutateRowsArgs) ThriftName() string {
  return "mutateRows_args"
}

func (p *MutateRowsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MutateRowsArgs(%+v)", *p)
}

func (p *MutateRowsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*MutateRowsArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.RowBatches.CompareTo(data.RowBatches); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *MutateRowsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  case 2: return p.RowBatches
  }
  return nil
}

func (p *MutateRowsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("rowBatches", thrift.LIST, 2),
    })
}

/**
 * Attributes:
 *  - Io
 *  - Ia
 */
type MutateRowsResult struct {
  thrift.TStruct
  Io *IOError "io"; // 1
  Ia *IllegalArgument "ia"; // 2
}

func NewMutateRowsResult() *MutateRowsResult {
  output := &MutateRowsResult{
    TStruct:thrift.NewTStruct("mutateRows_result", []thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    thrift.NewTField("ia", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *MutateRowsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "ia" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *MutateRowsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err812 := p.Io.Read(iprot)
  if err812 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err812); }
  return err
}

func (p *MutateRowsResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *MutateRowsResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ia = NewIllegalArgument()
  err815 := p.Ia.Read(iprot)
  if err815 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err815); }
  return err
}

func (p *MutateRowsResult) ReadFieldIa(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *MutateRowsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("mutateRows_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Ia != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *MutateRowsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *MutateRowsResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *MutateRowsResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ia != nil {
    err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err); }
    err = p.Ia.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err); }
  }
  return err
}

func (p *MutateRowsResult) WriteFieldIa(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *MutateRowsResult) TStructName() string {
  return "MutateRowsResult"
}

func (p *MutateRowsResult) ThriftName() string {
  return "mutateRows_result"
}

func (p *MutateRowsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MutateRowsResult(%+v)", *p)
}

func (p *MutateRowsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*MutateRowsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ia.CompareTo(data.Ia); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *MutateRowsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Io
  case 2: return p.Ia
  }
  return nil
}

func (p *MutateRowsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    thrift.NewTField("ia", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - RowBatches: list of row batches
 *  - Timestamp: timestamp
 */
type MutateRowsTsArgs struct {
  thrift.TStruct
  TableName Text "tableName"; // 1
  RowBatches thrift.TList "rowBatches"; // 2
  Timestamp int64 "timestamp"; // 3
}

func NewMutateRowsTsArgs() *MutateRowsTsArgs {
  output := &MutateRowsTsArgs{
    TStruct:thrift.NewTStruct("mutateRowsTs_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("rowBatches", thrift.LIST, 2),
    thrift.NewTField("timestamp", thrift.I64, 3),
    }),
  }
  {
  }
  return output
}

func (p *MutateRowsTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "rowBatches" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "timestamp" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *MutateRowsTsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v816, err817 := iprot.ReadString()
  if err817 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err817); }
  p.TableName = Text(v816)
  return err
}

func (p *MutateRowsTsArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *MutateRowsTsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype823, _size820, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.RowBatches", "", err)
  }
  p.RowBatches = thrift.NewTList(_etype823, _size820)
  for _i824:= 0; _i824 < _size820; _i824++ {
    _elem825 := NewBatchMutation()
    err828 := _elem825.Read(iprot)
    if err828 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem825BatchMutation", err828); }
    p.RowBatches.Push(_elem825)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *MutateRowsTsArgs) ReadFieldRowBatches(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *MutateRowsTsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v829, err830 := iprot.ReadI64()
  if err830 != nil { return thrift.NewTProtocolExceptionReadField(3, "timestamp", p.ThriftName(), err830); }
  p.Timestamp = v829
  return err
}

func (p *MutateRowsTsArgs) ReadFieldTimestamp(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *MutateRowsTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("mutateRowsTs_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *MutateRowsTsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *MutateRowsTsArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *MutateRowsTsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.RowBatches != nil {
    err = oprot.WriteFieldBegin("rowBatches", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "rowBatches", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.RowBatches.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter831 := range p.RowBatches.Iter() {
      Iter832 := Iter831.(*BatchMutation)
      err = Iter832.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BatchMutation", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "rowBatches", p.ThriftName(), err); }
  }
  return err
}

func (p *MutateRowsTsArgs) WriteFieldRowBatches(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *MutateRowsTsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.Timestamp) == 0 { return nil}
  err = oprot.WriteFieldBegin("timestamp", thrift.I64, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.Timestamp))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err); }
  return err
}

func (p *MutateRowsTsArgs) WriteFieldTimestamp(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *MutateRowsTsArgs) TStructName() string {
  return "MutateRowsTsArgs"
}

func (p *MutateRowsTsArgs) ThriftName() string {
  return "mutateRowsTs_args"
}

func (p *MutateRowsTsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MutateRowsTsArgs(%+v)", *p)
}

func (p *MutateRowsTsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*MutateRowsTsArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.RowBatches.CompareTo(data.RowBatches); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.Timestamp != data.Timestamp {
    if p.Timestamp < data.Timestamp {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *MutateRowsTsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  case 2: return p.RowBatches
  case 3: return p.Timestamp
  }
  return nil
}

func (p *MutateRowsTsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("rowBatches", thrift.LIST, 2),
    thrift.NewTField("timestamp", thrift.I64, 3),
    })
}

/**
 * Attributes:
 *  - Io
 *  - Ia
 */
type MutateRowsTsResult struct {
  thrift.TStruct
  Io *IOError "io"; // 1
  Ia *IllegalArgument "ia"; // 2
}

func NewMutateRowsTsResult() *MutateRowsTsResult {
  output := &MutateRowsTsResult{
    TStruct:thrift.NewTStruct("mutateRowsTs_result", []thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    thrift.NewTField("ia", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *MutateRowsTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "ia" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *MutateRowsTsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err835 := p.Io.Read(iprot)
  if err835 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err835); }
  return err
}

func (p *MutateRowsTsResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *MutateRowsTsResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ia = NewIllegalArgument()
  err838 := p.Ia.Read(iprot)
  if err838 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err838); }
  return err
}

func (p *MutateRowsTsResult) ReadFieldIa(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *MutateRowsTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("mutateRowsTs_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Ia != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *MutateRowsTsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *MutateRowsTsResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *MutateRowsTsResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ia != nil {
    err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err); }
    err = p.Ia.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err); }
  }
  return err
}

func (p *MutateRowsTsResult) WriteFieldIa(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *MutateRowsTsResult) TStructName() string {
  return "MutateRowsTsResult"
}

func (p *MutateRowsTsResult) ThriftName() string {
  return "mutateRowsTs_result"
}

func (p *MutateRowsTsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MutateRowsTsResult(%+v)", *p)
}

func (p *MutateRowsTsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*MutateRowsTsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ia.CompareTo(data.Ia); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *MutateRowsTsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Io
  case 2: return p.Ia
  }
  return nil
}

func (p *MutateRowsTsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    thrift.NewTField("ia", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row to increment
 *  - Column: name of column
 *  - Value: amount to increment by
 */
type AtomicIncrementArgs struct {
  thrift.TStruct
  TableName Text "tableName"; // 1
  Row Text "row"; // 2
  Column Text "column"; // 3
  Value int64 "value"; // 4
}

func NewAtomicIncrementArgs() *AtomicIncrementArgs {
  output := &AtomicIncrementArgs{
    TStruct:thrift.NewTStruct("atomicIncrement_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("column", thrift.STRING, 3),
    thrift.NewTField("value", thrift.I64, 4),
    }),
  }
  {
  }
  return output
}

func (p *AtomicIncrementArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "row" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "column" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "value" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AtomicIncrementArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v839, err840 := iprot.ReadString()
  if err840 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err840); }
  p.TableName = Text(v839)
  return err
}

func (p *AtomicIncrementArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AtomicIncrementArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v841, err842 := iprot.ReadString()
  if err842 != nil { return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err842); }
  p.Row = Text(v841)
  return err
}

func (p *AtomicIncrementArgs) ReadFieldRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AtomicIncrementArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v843, err844 := iprot.ReadString()
  if err844 != nil { return thrift.NewTProtocolExceptionReadField(3, "column", p.ThriftName(), err844); }
  p.Column = Text(v843)
  return err
}

func (p *AtomicIncrementArgs) ReadFieldColumn(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *AtomicIncrementArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v845, err846 := iprot.ReadI64()
  if err846 != nil { return thrift.NewTProtocolExceptionReadField(4, "value", p.ThriftName(), err846); }
  p.Value = v845
  return err
}

func (p *AtomicIncrementArgs) ReadFieldValue(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *AtomicIncrementArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("atomicIncrement_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AtomicIncrementArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *AtomicIncrementArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AtomicIncrementArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Row) < 1 { return nil}
  err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Row))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  return err
}

func (p *AtomicIncrementArgs) WriteFieldRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AtomicIncrementArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Column) < 1 { return nil}
  err = oprot.WriteFieldBegin("column", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Column))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err); }
  return err
}

func (p *AtomicIncrementArgs) WriteFieldColumn(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *AtomicIncrementArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.Value) == 0 { return nil}
  err = oprot.WriteFieldBegin("value", thrift.I64, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "value", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.Value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "value", p.ThriftName(), err); }
  return err
}

func (p *AtomicIncrementArgs) WriteFieldValue(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *AtomicIncrementArgs) TStructName() string {
  return "AtomicIncrementArgs"
}

func (p *AtomicIncrementArgs) ThriftName() string {
  return "atomicIncrement_args"
}

func (p *AtomicIncrementArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AtomicIncrementArgs(%+v)", *p)
}

func (p *AtomicIncrementArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AtomicIncrementArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  if p.Row != data.Row {
    if p.Row < data.Row {
      return -1, true
    }
    return 1, true
  }
  if p.Column != data.Column {
    if p.Column < data.Column {
      return -1, true
    }
    return 1, true
  }
  if p.Value != data.Value {
    if p.Value < data.Value {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *AtomicIncrementArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  case 2: return p.Row
  case 3: return p.Column
  case 4: return p.Value
  }
  return nil
}

func (p *AtomicIncrementArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("column", thrift.STRING, 3),
    thrift.NewTField("value", thrift.I64, 4),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 *  - Ia
 */
type AtomicIncrementResult struct {
  thrift.TStruct
  Success int64 "success"; // 0
  Io *IOError "io"; // 1
  Ia *IllegalArgument "ia"; // 2
}

func NewAtomicIncrementResult() *AtomicIncrementResult {
  output := &AtomicIncrementResult{
    TStruct:thrift.NewTStruct("atomicIncrement_result", []thrift.TField{
    thrift.NewTField("success", thrift.I64, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    thrift.NewTField("ia", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *AtomicIncrementResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "ia" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AtomicIncrementResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v847, err848 := iprot.ReadI64()
  if err848 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err848); }
  p.Success = v847
  return err
}

func (p *AtomicIncrementResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *AtomicIncrementResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err851 := p.Io.Read(iprot)
  if err851 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err851); }
  return err
}

func (p *AtomicIncrementResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AtomicIncrementResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ia = NewIllegalArgument()
  err854 := p.Ia.Read(iprot)
  if err854 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err854); }
  return err
}

func (p *AtomicIncrementResult) ReadFieldIa(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AtomicIncrementResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("atomicIncrement_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Ia != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AtomicIncrementResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.Success) == 0 { return nil}
  err = oprot.WriteFieldBegin("success", thrift.I64, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *AtomicIncrementResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *AtomicIncrementResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *AtomicIncrementResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AtomicIncrementResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ia != nil {
    err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err); }
    err = p.Ia.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err); }
  }
  return err
}

func (p *AtomicIncrementResult) WriteFieldIa(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AtomicIncrementResult) TStructName() string {
  return "AtomicIncrementResult"
}

func (p *AtomicIncrementResult) ThriftName() string {
  return "atomicIncrement_result"
}

func (p *AtomicIncrementResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AtomicIncrementResult(%+v)", *p)
}

func (p *AtomicIncrementResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AtomicIncrementResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ia.CompareTo(data.Ia); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *AtomicIncrementResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  case 2: return p.Ia
  }
  return nil
}

func (p *AtomicIncrementResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.I64, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    thrift.NewTField("ia", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: Row to update
 *  - Column: name of column whose value is to be deleted
 */
type DeleteAllArgs struct {
  thrift.TStruct
  TableName Text "tableName"; // 1
  Row Text "row"; // 2
  Column Text "column"; // 3
}

func NewDeleteAllArgs() *DeleteAllArgs {
  output := &DeleteAllArgs{
    TStruct:thrift.NewTStruct("deleteAll_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("column", thrift.STRING, 3),
    }),
  }
  {
  }
  return output
}

func (p *DeleteAllArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "row" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "column" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DeleteAllArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v855, err856 := iprot.ReadString()
  if err856 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err856); }
  p.TableName = Text(v855)
  return err
}

func (p *DeleteAllArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DeleteAllArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v857, err858 := iprot.ReadString()
  if err858 != nil { return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err858); }
  p.Row = Text(v857)
  return err
}

func (p *DeleteAllArgs) ReadFieldRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *DeleteAllArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v859, err860 := iprot.ReadString()
  if err860 != nil { return thrift.NewTProtocolExceptionReadField(3, "column", p.ThriftName(), err860); }
  p.Column = Text(v859)
  return err
}

func (p *DeleteAllArgs) ReadFieldColumn(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *DeleteAllArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("deleteAll_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DeleteAllArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *DeleteAllArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DeleteAllArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Row) < 1 { return nil}
  err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Row))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  return err
}

func (p *DeleteAllArgs) WriteFieldRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *DeleteAllArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Column) < 1 { return nil}
  err = oprot.WriteFieldBegin("column", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Column))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err); }
  return err
}

func (p *DeleteAllArgs) WriteFieldColumn(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *DeleteAllArgs) TStructName() string {
  return "DeleteAllArgs"
}

func (p *DeleteAllArgs) ThriftName() string {
  return "deleteAll_args"
}

func (p *DeleteAllArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteAllArgs(%+v)", *p)
}

func (p *DeleteAllArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DeleteAllArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  if p.Row != data.Row {
    if p.Row < data.Row {
      return -1, true
    }
    return 1, true
  }
  if p.Column != data.Column {
    if p.Column < data.Column {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *DeleteAllArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  case 2: return p.Row
  case 3: return p.Column
  }
  return nil
}

func (p *DeleteAllArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("column", thrift.STRING, 3),
    })
}

/**
 * Attributes:
 *  - Io
 */
type DeleteAllResult struct {
  thrift.TStruct
  Io *IOError "io"; // 1
}

func NewDeleteAllResult() *DeleteAllResult {
  output := &DeleteAllResult{
    TStruct:thrift.NewTStruct("deleteAll_result", []thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *DeleteAllResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DeleteAllResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err863 := p.Io.Read(iprot)
  if err863 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err863); }
  return err
}

func (p *DeleteAllResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DeleteAllResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("deleteAll_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DeleteAllResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *DeleteAllResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DeleteAllResult) TStructName() string {
  return "DeleteAllResult"
}

func (p *DeleteAllResult) ThriftName() string {
  return "deleteAll_result"
}

func (p *DeleteAllResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteAllResult(%+v)", *p)
}

func (p *DeleteAllResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DeleteAllResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *DeleteAllResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Io
  }
  return nil
}

func (p *DeleteAllResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: Row to update
 *  - Column: name of column whose value is to be deleted
 *  - Timestamp: timestamp
 */
type DeleteAllTsArgs struct {
  thrift.TStruct
  TableName Text "tableName"; // 1
  Row Text "row"; // 2
  Column Text "column"; // 3
  Timestamp int64 "timestamp"; // 4
}

func NewDeleteAllTsArgs() *DeleteAllTsArgs {
  output := &DeleteAllTsArgs{
    TStruct:thrift.NewTStruct("deleteAllTs_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("column", thrift.STRING, 3),
    thrift.NewTField("timestamp", thrift.I64, 4),
    }),
  }
  {
  }
  return output
}

func (p *DeleteAllTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "row" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "column" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "timestamp" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DeleteAllTsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v864, err865 := iprot.ReadString()
  if err865 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err865); }
  p.TableName = Text(v864)
  return err
}

func (p *DeleteAllTsArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DeleteAllTsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v866, err867 := iprot.ReadString()
  if err867 != nil { return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err867); }
  p.Row = Text(v866)
  return err
}

func (p *DeleteAllTsArgs) ReadFieldRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *DeleteAllTsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v868, err869 := iprot.ReadString()
  if err869 != nil { return thrift.NewTProtocolExceptionReadField(3, "column", p.ThriftName(), err869); }
  p.Column = Text(v868)
  return err
}

func (p *DeleteAllTsArgs) ReadFieldColumn(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *DeleteAllTsArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v870, err871 := iprot.ReadI64()
  if err871 != nil { return thrift.NewTProtocolExceptionReadField(4, "timestamp", p.ThriftName(), err871); }
  p.Timestamp = v870
  return err
}

func (p *DeleteAllTsArgs) ReadFieldTimestamp(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *DeleteAllTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("deleteAllTs_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DeleteAllTsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *DeleteAllTsArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DeleteAllTsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Row) < 1 { return nil}
  err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Row))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  return err
}

func (p *DeleteAllTsArgs) WriteFieldRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *DeleteAllTsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Column) < 1 { return nil}
  err = oprot.WriteFieldBegin("column", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Column))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err); }
  return err
}

func (p *DeleteAllTsArgs) WriteFieldColumn(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *DeleteAllTsArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.Timestamp) == 0 { return nil}
  err = oprot.WriteFieldBegin("timestamp", thrift.I64, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.Timestamp))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err); }
  return err
}

func (p *DeleteAllTsArgs) WriteFieldTimestamp(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *DeleteAllTsArgs) TStructName() string {
  return "DeleteAllTsArgs"
}

func (p *DeleteAllTsArgs) ThriftName() string {
  return "deleteAllTs_args"
}

func (p *DeleteAllTsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteAllTsArgs(%+v)", *p)
}

func (p *DeleteAllTsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DeleteAllTsArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  if p.Row != data.Row {
    if p.Row < data.Row {
      return -1, true
    }
    return 1, true
  }
  if p.Column != data.Column {
    if p.Column < data.Column {
      return -1, true
    }
    return 1, true
  }
  if p.Timestamp != data.Timestamp {
    if p.Timestamp < data.Timestamp {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *DeleteAllTsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  case 2: return p.Row
  case 3: return p.Column
  case 4: return p.Timestamp
  }
  return nil
}

func (p *DeleteAllTsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("column", thrift.STRING, 3),
    thrift.NewTField("timestamp", thrift.I64, 4),
    })
}

/**
 * Attributes:
 *  - Io
 */
type DeleteAllTsResult struct {
  thrift.TStruct
  Io *IOError "io"; // 1
}

func NewDeleteAllTsResult() *DeleteAllTsResult {
  output := &DeleteAllTsResult{
    TStruct:thrift.NewTStruct("deleteAllTs_result", []thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *DeleteAllTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DeleteAllTsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err874 := p.Io.Read(iprot)
  if err874 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err874); }
  return err
}

func (p *DeleteAllTsResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DeleteAllTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("deleteAllTs_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DeleteAllTsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *DeleteAllTsResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DeleteAllTsResult) TStructName() string {
  return "DeleteAllTsResult"
}

func (p *DeleteAllTsResult) ThriftName() string {
  return "deleteAllTs_result"
}

func (p *DeleteAllTsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteAllTsResult(%+v)", *p)
}

func (p *DeleteAllTsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DeleteAllTsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *DeleteAllTsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Io
  }
  return nil
}

func (p *DeleteAllTsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: key of the row to be completely deleted.
 */
type DeleteAllRowArgs struct {
  thrift.TStruct
  TableName Text "tableName"; // 1
  Row Text "row"; // 2
}

func NewDeleteAllRowArgs() *DeleteAllRowArgs {
  output := &DeleteAllRowArgs{
    TStruct:thrift.NewTStruct("deleteAllRow_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *DeleteAllRowArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "row" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DeleteAllRowArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v875, err876 := iprot.ReadString()
  if err876 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err876); }
  p.TableName = Text(v875)
  return err
}

func (p *DeleteAllRowArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DeleteAllRowArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v877, err878 := iprot.ReadString()
  if err878 != nil { return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err878); }
  p.Row = Text(v877)
  return err
}

func (p *DeleteAllRowArgs) ReadFieldRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *DeleteAllRowArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("deleteAllRow_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DeleteAllRowArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *DeleteAllRowArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DeleteAllRowArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Row) < 1 { return nil}
  err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Row))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  return err
}

func (p *DeleteAllRowArgs) WriteFieldRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *DeleteAllRowArgs) TStructName() string {
  return "DeleteAllRowArgs"
}

func (p *DeleteAllRowArgs) ThriftName() string {
  return "deleteAllRow_args"
}

func (p *DeleteAllRowArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteAllRowArgs(%+v)", *p)
}

func (p *DeleteAllRowArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DeleteAllRowArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  if p.Row != data.Row {
    if p.Row < data.Row {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *DeleteAllRowArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  case 2: return p.Row
  }
  return nil
}

func (p *DeleteAllRowArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    })
}

/**
 * Attributes:
 *  - Io
 */
type DeleteAllRowResult struct {
  thrift.TStruct
  Io *IOError "io"; // 1
}

func NewDeleteAllRowResult() *DeleteAllRowResult {
  output := &DeleteAllRowResult{
    TStruct:thrift.NewTStruct("deleteAllRow_result", []thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *DeleteAllRowResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DeleteAllRowResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err881 := p.Io.Read(iprot)
  if err881 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err881); }
  return err
}

func (p *DeleteAllRowResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DeleteAllRowResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("deleteAllRow_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DeleteAllRowResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *DeleteAllRowResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DeleteAllRowResult) TStructName() string {
  return "DeleteAllRowResult"
}

func (p *DeleteAllRowResult) ThriftName() string {
  return "deleteAllRow_result"
}

func (p *DeleteAllRowResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteAllRowResult(%+v)", *p)
}

func (p *DeleteAllRowResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DeleteAllRowResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *DeleteAllRowResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Io
  }
  return nil
}

func (p *DeleteAllRowResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: key of the row to be completely deleted.
 *  - Timestamp: timestamp
 */
type DeleteAllRowTsArgs struct {
  thrift.TStruct
  TableName Text "tableName"; // 1
  Row Text "row"; // 2
  Timestamp int64 "timestamp"; // 3
}

func NewDeleteAllRowTsArgs() *DeleteAllRowTsArgs {
  output := &DeleteAllRowTsArgs{
    TStruct:thrift.NewTStruct("deleteAllRowTs_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("timestamp", thrift.I64, 3),
    }),
  }
  {
  }
  return output
}

func (p *DeleteAllRowTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "row" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "timestamp" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DeleteAllRowTsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v882, err883 := iprot.ReadString()
  if err883 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err883); }
  p.TableName = Text(v882)
  return err
}

func (p *DeleteAllRowTsArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DeleteAllRowTsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v884, err885 := iprot.ReadString()
  if err885 != nil { return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err885); }
  p.Row = Text(v884)
  return err
}

func (p *DeleteAllRowTsArgs) ReadFieldRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *DeleteAllRowTsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v886, err887 := iprot.ReadI64()
  if err887 != nil { return thrift.NewTProtocolExceptionReadField(3, "timestamp", p.ThriftName(), err887); }
  p.Timestamp = v886
  return err
}

func (p *DeleteAllRowTsArgs) ReadFieldTimestamp(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *DeleteAllRowTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("deleteAllRowTs_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DeleteAllRowTsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *DeleteAllRowTsArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DeleteAllRowTsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.Row) < 1 { return nil}
  err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Row))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err); }
  return err
}

func (p *DeleteAllRowTsArgs) WriteFieldRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *DeleteAllRowTsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.Timestamp) == 0 { return nil}
  err = oprot.WriteFieldBegin("timestamp", thrift.I64, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.Timestamp))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err); }
  return err
}

func (p *DeleteAllRowTsArgs) WriteFieldTimestamp(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *DeleteAllRowTsArgs) TStructName() string {
  return "DeleteAllRowTsArgs"
}

func (p *DeleteAllRowTsArgs) ThriftName() string {
  return "deleteAllRowTs_args"
}

func (p *DeleteAllRowTsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteAllRowTsArgs(%+v)", *p)
}

func (p *DeleteAllRowTsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DeleteAllRowTsArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  if p.Row != data.Row {
    if p.Row < data.Row {
      return -1, true
    }
    return 1, true
  }
  if p.Timestamp != data.Timestamp {
    if p.Timestamp < data.Timestamp {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *DeleteAllRowTsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  case 2: return p.Row
  case 3: return p.Timestamp
  }
  return nil
}

func (p *DeleteAllRowTsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("row", thrift.STRING, 2),
    thrift.NewTField("timestamp", thrift.I64, 3),
    })
}

/**
 * Attributes:
 *  - Io
 */
type DeleteAllRowTsResult struct {
  thrift.TStruct
  Io *IOError "io"; // 1
}

func NewDeleteAllRowTsResult() *DeleteAllRowTsResult {
  output := &DeleteAllRowTsResult{
    TStruct:thrift.NewTStruct("deleteAllRowTs_result", []thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *DeleteAllRowTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DeleteAllRowTsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err890 := p.Io.Read(iprot)
  if err890 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err890); }
  return err
}

func (p *DeleteAllRowTsResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DeleteAllRowTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("deleteAllRowTs_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DeleteAllRowTsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *DeleteAllRowTsResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DeleteAllRowTsResult) TStructName() string {
  return "DeleteAllRowTsResult"
}

func (p *DeleteAllRowTsResult) ThriftName() string {
  return "deleteAllRowTs_result"
}

func (p *DeleteAllRowTsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteAllRowTsResult(%+v)", *p)
}

func (p *DeleteAllRowTsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DeleteAllRowTsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *DeleteAllRowTsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Io
  }
  return nil
}

func (p *DeleteAllRowTsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 */
type ScannerOpenArgs struct {
  thrift.TStruct
  TableName Text "tableName"; // 1
  StartRow Text "startRow"; // 2
  Columns thrift.TList "columns"; // 3
}

func NewScannerOpenArgs() *ScannerOpenArgs {
  output := &ScannerOpenArgs{
    TStruct:thrift.NewTStruct("scannerOpen_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("startRow", thrift.STRING, 2),
    thrift.NewTField("columns", thrift.LIST, 3),
    }),
  }
  {
  }
  return output
}

func (p *ScannerOpenArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "startRow" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "columns" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v891, err892 := iprot.ReadString()
  if err892 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err892); }
  p.TableName = Text(v891)
  return err
}

func (p *ScannerOpenArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ScannerOpenArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v893, err894 := iprot.ReadString()
  if err894 != nil { return thrift.NewTProtocolExceptionReadField(2, "startRow", p.ThriftName(), err894); }
  p.StartRow = Text(v893)
  return err
}

func (p *ScannerOpenArgs) ReadFieldStartRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ScannerOpenArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype900, _size897, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
  }
  p.Columns = thrift.NewTList(_etype900, _size897)
  for _i901:= 0; _i901 < _size897; _i901++ {
    v903, err904 := iprot.ReadString()
    if err904 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem902", "", err904); }
    _elem902 := Text(v903)
    p.Columns.Push(_elem902)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ScannerOpenArgs) ReadFieldColumns(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ScannerOpenArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("scannerOpen_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ScannerOpenArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.StartRow) < 1 { return nil}
  err = oprot.WriteFieldBegin("startRow", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.StartRow))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenArgs) WriteFieldStartRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ScannerOpenArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Columns != nil {
    err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Columns.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter905 := range p.Columns.Iter() {
      Iter906 := Iter905.(Text)
      err = oprot.WriteString(string(Iter906))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter906", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err); }
  }
  return err
}

func (p *ScannerOpenArgs) WriteFieldColumns(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ScannerOpenArgs) TStructName() string {
  return "ScannerOpenArgs"
}

func (p *ScannerOpenArgs) ThriftName() string {
  return "scannerOpen_args"
}

func (p *ScannerOpenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScannerOpenArgs(%+v)", *p)
}

func (p *ScannerOpenArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ScannerOpenArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  if p.StartRow != data.StartRow {
    if p.StartRow < data.StartRow {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Columns.CompareTo(data.Columns); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ScannerOpenArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  case 2: return p.StartRow
  case 3: return p.Columns
  }
  return nil
}

func (p *ScannerOpenArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("startRow", thrift.STRING, 2),
    thrift.NewTField("columns", thrift.LIST, 3),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type ScannerOpenResult struct {
  thrift.TStruct
  Success ScannerID "success"; // 0
  Io *IOError "io"; // 1
}

func NewScannerOpenResult() *ScannerOpenResult {
  output := &ScannerOpenResult{
    TStruct:thrift.NewTStruct("scannerOpen_result", []thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *ScannerOpenResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v907, err908 := iprot.ReadI32()
  if err908 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err908); }
  p.Success = ScannerID(v907)
  return err
}

func (p *ScannerOpenResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *ScannerOpenResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err911 := p.Io.Read(iprot)
  if err911 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err911); }
  return err
}

func (p *ScannerOpenResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ScannerOpenResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("scannerOpen_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.Success) == 0 { return nil}
  err = oprot.WriteFieldBegin("success", thrift.I32, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *ScannerOpenResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *ScannerOpenResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ScannerOpenResult) TStructName() string {
  return "ScannerOpenResult"
}

func (p *ScannerOpenResult) ThriftName() string {
  return "scannerOpen_result"
}

func (p *ScannerOpenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScannerOpenResult(%+v)", *p)
}

func (p *ScannerOpenResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ScannerOpenResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ScannerOpenResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *ScannerOpenResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - StopRow: row to stop scanning on. This row is *not* included in the
 * scanner's results
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 */
type ScannerOpenWithStopArgs struct {
  thrift.TStruct
  TableName Text "tableName"; // 1
  StartRow Text "startRow"; // 2
  StopRow Text "stopRow"; // 3
  Columns thrift.TList "columns"; // 4
}

func NewScannerOpenWithStopArgs() *ScannerOpenWithStopArgs {
  output := &ScannerOpenWithStopArgs{
    TStruct:thrift.NewTStruct("scannerOpenWithStop_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("startRow", thrift.STRING, 2),
    thrift.NewTField("stopRow", thrift.STRING, 3),
    thrift.NewTField("columns", thrift.LIST, 4),
    }),
  }
  {
  }
  return output
}

func (p *ScannerOpenWithStopArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "startRow" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "stopRow" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "columns" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenWithStopArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v912, err913 := iprot.ReadString()
  if err913 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err913); }
  p.TableName = Text(v912)
  return err
}

func (p *ScannerOpenWithStopArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ScannerOpenWithStopArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v914, err915 := iprot.ReadString()
  if err915 != nil { return thrift.NewTProtocolExceptionReadField(2, "startRow", p.ThriftName(), err915); }
  p.StartRow = Text(v914)
  return err
}

func (p *ScannerOpenWithStopArgs) ReadFieldStartRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ScannerOpenWithStopArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v916, err917 := iprot.ReadString()
  if err917 != nil { return thrift.NewTProtocolExceptionReadField(3, "stopRow", p.ThriftName(), err917); }
  p.StopRow = Text(v916)
  return err
}

func (p *ScannerOpenWithStopArgs) ReadFieldStopRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ScannerOpenWithStopArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype923, _size920, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
  }
  p.Columns = thrift.NewTList(_etype923, _size920)
  for _i924:= 0; _i924 < _size920; _i924++ {
    v926, err927 := iprot.ReadString()
    if err927 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem925", "", err927); }
    _elem925 := Text(v926)
    p.Columns.Push(_elem925)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ScannerOpenWithStopArgs) ReadFieldColumns(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *ScannerOpenWithStopArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("scannerOpenWithStop_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenWithStopArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenWithStopArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ScannerOpenWithStopArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.StartRow) < 1 { return nil}
  err = oprot.WriteFieldBegin("startRow", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.StartRow))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenWithStopArgs) WriteFieldStartRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ScannerOpenWithStopArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.StopRow) < 1 { return nil}
  err = oprot.WriteFieldBegin("stopRow", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "stopRow", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.StopRow))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "stopRow", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "stopRow", p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenWithStopArgs) WriteFieldStopRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ScannerOpenWithStopArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Columns != nil {
    err = oprot.WriteFieldBegin("columns", thrift.LIST, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "columns", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Columns.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter928 := range p.Columns.Iter() {
      Iter929 := Iter928.(Text)
      err = oprot.WriteString(string(Iter929))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter929", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "columns", p.ThriftName(), err); }
  }
  return err
}

func (p *ScannerOpenWithStopArgs) WriteFieldColumns(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *ScannerOpenWithStopArgs) TStructName() string {
  return "ScannerOpenWithStopArgs"
}

func (p *ScannerOpenWithStopArgs) ThriftName() string {
  return "scannerOpenWithStop_args"
}

func (p *ScannerOpenWithStopArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScannerOpenWithStopArgs(%+v)", *p)
}

func (p *ScannerOpenWithStopArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ScannerOpenWithStopArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  if p.StartRow != data.StartRow {
    if p.StartRow < data.StartRow {
      return -1, true
    }
    return 1, true
  }
  if p.StopRow != data.StopRow {
    if p.StopRow < data.StopRow {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Columns.CompareTo(data.Columns); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ScannerOpenWithStopArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  case 2: return p.StartRow
  case 3: return p.StopRow
  case 4: return p.Columns
  }
  return nil
}

func (p *ScannerOpenWithStopArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("startRow", thrift.STRING, 2),
    thrift.NewTField("stopRow", thrift.STRING, 3),
    thrift.NewTField("columns", thrift.LIST, 4),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type ScannerOpenWithStopResult struct {
  thrift.TStruct
  Success ScannerID "success"; // 0
  Io *IOError "io"; // 1
}

func NewScannerOpenWithStopResult() *ScannerOpenWithStopResult {
  output := &ScannerOpenWithStopResult{
    TStruct:thrift.NewTStruct("scannerOpenWithStop_result", []thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *ScannerOpenWithStopResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenWithStopResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v930, err931 := iprot.ReadI32()
  if err931 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err931); }
  p.Success = ScannerID(v930)
  return err
}

func (p *ScannerOpenWithStopResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *ScannerOpenWithStopResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err934 := p.Io.Read(iprot)
  if err934 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err934); }
  return err
}

func (p *ScannerOpenWithStopResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ScannerOpenWithStopResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("scannerOpenWithStop_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenWithStopResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.Success) == 0 { return nil}
  err = oprot.WriteFieldBegin("success", thrift.I32, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenWithStopResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *ScannerOpenWithStopResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *ScannerOpenWithStopResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ScannerOpenWithStopResult) TStructName() string {
  return "ScannerOpenWithStopResult"
}

func (p *ScannerOpenWithStopResult) ThriftName() string {
  return "scannerOpenWithStop_result"
}

func (p *ScannerOpenWithStopResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScannerOpenWithStopResult(%+v)", *p)
}

func (p *ScannerOpenWithStopResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ScannerOpenWithStopResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ScannerOpenWithStopResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *ScannerOpenWithStopResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - StartAndPrefix: the prefix (and thus start row) of the keys you want
 *  - Columns: the columns you want returned
 */
type ScannerOpenWithPrefixArgs struct {
  thrift.TStruct
  TableName Text "tableName"; // 1
  StartAndPrefix Text "startAndPrefix"; // 2
  Columns thrift.TList "columns"; // 3
}

func NewScannerOpenWithPrefixArgs() *ScannerOpenWithPrefixArgs {
  output := &ScannerOpenWithPrefixArgs{
    TStruct:thrift.NewTStruct("scannerOpenWithPrefix_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("startAndPrefix", thrift.STRING, 2),
    thrift.NewTField("columns", thrift.LIST, 3),
    }),
  }
  {
  }
  return output
}

func (p *ScannerOpenWithPrefixArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "startAndPrefix" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "columns" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenWithPrefixArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v935, err936 := iprot.ReadString()
  if err936 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err936); }
  p.TableName = Text(v935)
  return err
}

func (p *ScannerOpenWithPrefixArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ScannerOpenWithPrefixArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v937, err938 := iprot.ReadString()
  if err938 != nil { return thrift.NewTProtocolExceptionReadField(2, "startAndPrefix", p.ThriftName(), err938); }
  p.StartAndPrefix = Text(v937)
  return err
}

func (p *ScannerOpenWithPrefixArgs) ReadFieldStartAndPrefix(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ScannerOpenWithPrefixArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype944, _size941, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
  }
  p.Columns = thrift.NewTList(_etype944, _size941)
  for _i945:= 0; _i945 < _size941; _i945++ {
    v947, err948 := iprot.ReadString()
    if err948 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem946", "", err948); }
    _elem946 := Text(v947)
    p.Columns.Push(_elem946)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ScannerOpenWithPrefixArgs) ReadFieldColumns(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ScannerOpenWithPrefixArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("scannerOpenWithPrefix_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenWithPrefixArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenWithPrefixArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ScannerOpenWithPrefixArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.StartAndPrefix) < 1 { return nil}
  err = oprot.WriteFieldBegin("startAndPrefix", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "startAndPrefix", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.StartAndPrefix))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "startAndPrefix", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "startAndPrefix", p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenWithPrefixArgs) WriteFieldStartAndPrefix(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ScannerOpenWithPrefixArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Columns != nil {
    err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Columns.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter949 := range p.Columns.Iter() {
      Iter950 := Iter949.(Text)
      err = oprot.WriteString(string(Iter950))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter950", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err); }
  }
  return err
}

func (p *ScannerOpenWithPrefixArgs) WriteFieldColumns(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ScannerOpenWithPrefixArgs) TStructName() string {
  return "ScannerOpenWithPrefixArgs"
}

func (p *ScannerOpenWithPrefixArgs) ThriftName() string {
  return "scannerOpenWithPrefix_args"
}

func (p *ScannerOpenWithPrefixArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScannerOpenWithPrefixArgs(%+v)", *p)
}

func (p *ScannerOpenWithPrefixArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ScannerOpenWithPrefixArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  if p.StartAndPrefix != data.StartAndPrefix {
    if p.StartAndPrefix < data.StartAndPrefix {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Columns.CompareTo(data.Columns); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ScannerOpenWithPrefixArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  case 2: return p.StartAndPrefix
  case 3: return p.Columns
  }
  return nil
}

func (p *ScannerOpenWithPrefixArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("startAndPrefix", thrift.STRING, 2),
    thrift.NewTField("columns", thrift.LIST, 3),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type ScannerOpenWithPrefixResult struct {
  thrift.TStruct
  Success ScannerID "success"; // 0
  Io *IOError "io"; // 1
}

func NewScannerOpenWithPrefixResult() *ScannerOpenWithPrefixResult {
  output := &ScannerOpenWithPrefixResult{
    TStruct:thrift.NewTStruct("scannerOpenWithPrefix_result", []thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *ScannerOpenWithPrefixResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenWithPrefixResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v951, err952 := iprot.ReadI32()
  if err952 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err952); }
  p.Success = ScannerID(v951)
  return err
}

func (p *ScannerOpenWithPrefixResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *ScannerOpenWithPrefixResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err955 := p.Io.Read(iprot)
  if err955 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err955); }
  return err
}

func (p *ScannerOpenWithPrefixResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ScannerOpenWithPrefixResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("scannerOpenWithPrefix_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenWithPrefixResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.Success) == 0 { return nil}
  err = oprot.WriteFieldBegin("success", thrift.I32, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenWithPrefixResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *ScannerOpenWithPrefixResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *ScannerOpenWithPrefixResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ScannerOpenWithPrefixResult) TStructName() string {
  return "ScannerOpenWithPrefixResult"
}

func (p *ScannerOpenWithPrefixResult) ThriftName() string {
  return "scannerOpenWithPrefix_result"
}

func (p *ScannerOpenWithPrefixResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScannerOpenWithPrefixResult(%+v)", *p)
}

func (p *ScannerOpenWithPrefixResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ScannerOpenWithPrefixResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ScannerOpenWithPrefixResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *ScannerOpenWithPrefixResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 *  - Timestamp: timestamp
 */
type ScannerOpenTsArgs struct {
  thrift.TStruct
  TableName Text "tableName"; // 1
  StartRow Text "startRow"; // 2
  Columns thrift.TList "columns"; // 3
  Timestamp int64 "timestamp"; // 4
}

func NewScannerOpenTsArgs() *ScannerOpenTsArgs {
  output := &ScannerOpenTsArgs{
    TStruct:thrift.NewTStruct("scannerOpenTs_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("startRow", thrift.STRING, 2),
    thrift.NewTField("columns", thrift.LIST, 3),
    thrift.NewTField("timestamp", thrift.I64, 4),
    }),
  }
  {
  }
  return output
}

func (p *ScannerOpenTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "startRow" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "columns" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "timestamp" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenTsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v956, err957 := iprot.ReadString()
  if err957 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err957); }
  p.TableName = Text(v956)
  return err
}

func (p *ScannerOpenTsArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ScannerOpenTsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v958, err959 := iprot.ReadString()
  if err959 != nil { return thrift.NewTProtocolExceptionReadField(2, "startRow", p.ThriftName(), err959); }
  p.StartRow = Text(v958)
  return err
}

func (p *ScannerOpenTsArgs) ReadFieldStartRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ScannerOpenTsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype965, _size962, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
  }
  p.Columns = thrift.NewTList(_etype965, _size962)
  for _i966:= 0; _i966 < _size962; _i966++ {
    v968, err969 := iprot.ReadString()
    if err969 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem967", "", err969); }
    _elem967 := Text(v968)
    p.Columns.Push(_elem967)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ScannerOpenTsArgs) ReadFieldColumns(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ScannerOpenTsArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v970, err971 := iprot.ReadI64()
  if err971 != nil { return thrift.NewTProtocolExceptionReadField(4, "timestamp", p.ThriftName(), err971); }
  p.Timestamp = v970
  return err
}

func (p *ScannerOpenTsArgs) ReadFieldTimestamp(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *ScannerOpenTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("scannerOpenTs_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenTsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenTsArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ScannerOpenTsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.StartRow) < 1 { return nil}
  err = oprot.WriteFieldBegin("startRow", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.StartRow))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenTsArgs) WriteFieldStartRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ScannerOpenTsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Columns != nil {
    err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Columns.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter972 := range p.Columns.Iter() {
      Iter973 := Iter972.(Text)
      err = oprot.WriteString(string(Iter973))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter973", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err); }
  }
  return err
}

func (p *ScannerOpenTsArgs) WriteFieldColumns(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ScannerOpenTsArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.Timestamp) == 0 { return nil}
  err = oprot.WriteFieldBegin("timestamp", thrift.I64, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.Timestamp))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenTsArgs) WriteFieldTimestamp(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *ScannerOpenTsArgs) TStructName() string {
  return "ScannerOpenTsArgs"
}

func (p *ScannerOpenTsArgs) ThriftName() string {
  return "scannerOpenTs_args"
}

func (p *ScannerOpenTsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScannerOpenTsArgs(%+v)", *p)
}

func (p *ScannerOpenTsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ScannerOpenTsArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  if p.StartRow != data.StartRow {
    if p.StartRow < data.StartRow {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Columns.CompareTo(data.Columns); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.Timestamp != data.Timestamp {
    if p.Timestamp < data.Timestamp {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *ScannerOpenTsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  case 2: return p.StartRow
  case 3: return p.Columns
  case 4: return p.Timestamp
  }
  return nil
}

func (p *ScannerOpenTsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("startRow", thrift.STRING, 2),
    thrift.NewTField("columns", thrift.LIST, 3),
    thrift.NewTField("timestamp", thrift.I64, 4),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type ScannerOpenTsResult struct {
  thrift.TStruct
  Success ScannerID "success"; // 0
  Io *IOError "io"; // 1
}

func NewScannerOpenTsResult() *ScannerOpenTsResult {
  output := &ScannerOpenTsResult{
    TStruct:thrift.NewTStruct("scannerOpenTs_result", []thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *ScannerOpenTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenTsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v974, err975 := iprot.ReadI32()
  if err975 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err975); }
  p.Success = ScannerID(v974)
  return err
}

func (p *ScannerOpenTsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *ScannerOpenTsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err978 := p.Io.Read(iprot)
  if err978 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err978); }
  return err
}

func (p *ScannerOpenTsResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ScannerOpenTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("scannerOpenTs_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenTsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.Success) == 0 { return nil}
  err = oprot.WriteFieldBegin("success", thrift.I32, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenTsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *ScannerOpenTsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *ScannerOpenTsResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ScannerOpenTsResult) TStructName() string {
  return "ScannerOpenTsResult"
}

func (p *ScannerOpenTsResult) ThriftName() string {
  return "scannerOpenTs_result"
}

func (p *ScannerOpenTsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScannerOpenTsResult(%+v)", *p)
}

func (p *ScannerOpenTsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ScannerOpenTsResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ScannerOpenTsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *ScannerOpenTsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - StopRow: row to stop scanning on. This row is *not* included in the
 * scanner's results
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 *  - Timestamp: timestamp
 */
type ScannerOpenWithStopTsArgs struct {
  thrift.TStruct
  TableName Text "tableName"; // 1
  StartRow Text "startRow"; // 2
  StopRow Text "stopRow"; // 3
  Columns thrift.TList "columns"; // 4
  Timestamp int64 "timestamp"; // 5
}

func NewScannerOpenWithStopTsArgs() *ScannerOpenWithStopTsArgs {
  output := &ScannerOpenWithStopTsArgs{
    TStruct:thrift.NewTStruct("scannerOpenWithStopTs_args", []thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("startRow", thrift.STRING, 2),
    thrift.NewTField("stopRow", thrift.STRING, 3),
    thrift.NewTField("columns", thrift.LIST, 4),
    thrift.NewTField("timestamp", thrift.I64, 5),
    }),
  }
  {
  }
  return output
}

func (p *ScannerOpenWithStopTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tableName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "startRow" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "stopRow" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "columns" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "timestamp" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenWithStopTsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v979, err980 := iprot.ReadString()
  if err980 != nil { return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err980); }
  p.TableName = Text(v979)
  return err
}

func (p *ScannerOpenWithStopTsArgs) ReadFieldTableName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ScannerOpenWithStopTsArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v981, err982 := iprot.ReadString()
  if err982 != nil { return thrift.NewTProtocolExceptionReadField(2, "startRow", p.ThriftName(), err982); }
  p.StartRow = Text(v981)
  return err
}

func (p *ScannerOpenWithStopTsArgs) ReadFieldStartRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ScannerOpenWithStopTsArgs) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v983, err984 := iprot.ReadString()
  if err984 != nil { return thrift.NewTProtocolExceptionReadField(3, "stopRow", p.ThriftName(), err984); }
  p.StopRow = Text(v983)
  return err
}

func (p *ScannerOpenWithStopTsArgs) ReadFieldStopRow(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ScannerOpenWithStopTsArgs) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype990, _size987, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
  }
  p.Columns = thrift.NewTList(_etype990, _size987)
  for _i991:= 0; _i991 < _size987; _i991++ {
    v993, err994 := iprot.ReadString()
    if err994 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem992", "", err994); }
    _elem992 := Text(v993)
    p.Columns.Push(_elem992)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ScannerOpenWithStopTsArgs) ReadFieldColumns(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *ScannerOpenWithStopTsArgs) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v995, err996 := iprot.ReadI64()
  if err996 != nil { return thrift.NewTProtocolExceptionReadField(5, "timestamp", p.ThriftName(), err996); }
  p.Timestamp = v995
  return err
}

func (p *ScannerOpenWithStopTsArgs) ReadFieldTimestamp(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *ScannerOpenWithStopTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("scannerOpenWithStopTs_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenWithStopTsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.TableName) < 1 { return nil}
  err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TableName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenWithStopTsArgs) WriteFieldTableName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ScannerOpenWithStopTsArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.StartRow) < 1 { return nil}
  err = oprot.WriteFieldBegin("startRow", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.StartRow))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenWithStopTsArgs) WriteFieldStartRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ScannerOpenWithStopTsArgs) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if len(p.StopRow) < 1 { return nil}
  err = oprot.WriteFieldBegin("stopRow", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "stopRow", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.StopRow))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "stopRow", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "stopRow", p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenWithStopTsArgs) WriteFieldStopRow(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ScannerOpenWithStopTsArgs) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Columns != nil {
    err = oprot.WriteFieldBegin("columns", thrift.LIST, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "columns", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Columns.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter997 := range p.Columns.Iter() {
      Iter998 := Iter997.(Text)
      err = oprot.WriteString(string(Iter998))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter998", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "columns", p.ThriftName(), err); }
  }
  return err
}

func (p *ScannerOpenWithStopTsArgs) WriteFieldColumns(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *ScannerOpenWithStopTsArgs) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.Timestamp) == 0 { return nil}
  err = oprot.WriteFieldBegin("timestamp", thrift.I64, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.Timestamp))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "timestamp", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "timestamp", p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenWithStopTsArgs) WriteFieldTimestamp(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *ScannerOpenWithStopTsArgs) TStructName() string {
  return "ScannerOpenWithStopTsArgs"
}

func (p *ScannerOpenWithStopTsArgs) ThriftName() string {
  return "scannerOpenWithStopTs_args"
}

func (p *ScannerOpenWithStopTsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScannerOpenWithStopTsArgs(%+v)", *p)
}

func (p *ScannerOpenWithStopTsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ScannerOpenWithStopTsArgs)
  if !ok {
    return 0, false
  }
  if p.TableName != data.TableName {
    if p.TableName < data.TableName {
      return -1, true
    }
    return 1, true
  }
  if p.StartRow != data.StartRow {
    if p.StartRow < data.StartRow {
      return -1, true
    }
    return 1, true
  }
  if p.StopRow != data.StopRow {
    if p.StopRow < data.StopRow {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Columns.CompareTo(data.Columns); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.Timestamp != data.Timestamp {
    if p.Timestamp < data.Timestamp {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *ScannerOpenWithStopTsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TableName
  case 2: return p.StartRow
  case 3: return p.StopRow
  case 4: return p.Columns
  case 5: return p.Timestamp
  }
  return nil
}

func (p *ScannerOpenWithStopTsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tableName", thrift.STRING, 1),
    thrift.NewTField("startRow", thrift.STRING, 2),
    thrift.NewTField("stopRow", thrift.STRING, 3),
    thrift.NewTField("columns", thrift.LIST, 4),
    thrift.NewTField("timestamp", thrift.I64, 5),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type ScannerOpenWithStopTsResult struct {
  thrift.TStruct
  Success ScannerID "success"; // 0
  Io *IOError "io"; // 1
}

func NewScannerOpenWithStopTsResult() *ScannerOpenWithStopTsResult {
  output := &ScannerOpenWithStopTsResult{
    TStruct:thrift.NewTStruct("scannerOpenWithStopTs_result", []thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *ScannerOpenWithStopTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenWithStopTsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v999, err1000 := iprot.ReadI32()
  if err1000 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1000); }
  p.Success = ScannerID(v999)
  return err
}

func (p *ScannerOpenWithStopTsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *ScannerOpenWithStopTsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err1003 := p.Io.Read(iprot)
  if err1003 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1003); }
  return err
}

func (p *ScannerOpenWithStopTsResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ScannerOpenWithStopTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("scannerOpenWithStopTs_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenWithStopTsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.Success) == 0 { return nil}
  err = oprot.WriteFieldBegin("success", thrift.I32, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *ScannerOpenWithStopTsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *ScannerOpenWithStopTsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *ScannerOpenWithStopTsResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ScannerOpenWithStopTsResult) TStructName() string {
  return "ScannerOpenWithStopTsResult"
}

func (p *ScannerOpenWithStopTsResult) ThriftName() string {
  return "scannerOpenWithStopTs_result"
}

func (p *ScannerOpenWithStopTsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScannerOpenWithStopTsResult(%+v)", *p)
}

func (p *ScannerOpenWithStopTsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ScannerOpenWithStopTsResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ScannerOpenWithStopTsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  }
  return nil
}

func (p *ScannerOpenWithStopTsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.I32, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Id: id of a scanner returned by scannerOpen
 */
type ScannerGetArgs struct {
  thrift.TStruct
  Id ScannerID "id"; // 1
}

func NewScannerGetArgs() *ScannerGetArgs {
  output := &ScannerGetArgs{
    TStruct:thrift.NewTStruct("scannerGet_args", []thrift.TField{
    thrift.NewTField("id", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *ScannerGetArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "id" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerGetArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1004, err1005 := iprot.ReadI32()
  if err1005 != nil { return thrift.NewTProtocolExceptionReadField(1, "id", p.ThriftName(), err1005); }
  p.Id = ScannerID(v1004)
  return err
}

func (p *ScannerGetArgs) ReadFieldId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ScannerGetArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("scannerGet_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerGetArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.Id) == 0 { return nil}
  err = oprot.WriteFieldBegin("id", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Id))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err); }
  return err
}

func (p *ScannerGetArgs) WriteFieldId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ScannerGetArgs) TStructName() string {
  return "ScannerGetArgs"
}

func (p *ScannerGetArgs) ThriftName() string {
  return "scannerGet_args"
}

func (p *ScannerGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScannerGetArgs(%+v)", *p)
}

func (p *ScannerGetArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ScannerGetArgs)
  if !ok {
    return 0, false
  }
  if p.Id != data.Id {
    if p.Id < data.Id {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *ScannerGetArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Id
  }
  return nil
}

func (p *ScannerGetArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("id", thrift.I32, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 *  - Ia
 */
type ScannerGetResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  Io *IOError "io"; // 1
  Ia *IllegalArgument "ia"; // 2
}

func NewScannerGetResult() *ScannerGetResult {
  output := &ScannerGetResult{
    TStruct:thrift.NewTStruct("scannerGet_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    thrift.NewTField("ia", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *ScannerGetResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "ia" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerGetResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1011, _size1008, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype1011, _size1008)
  for _i1012:= 0; _i1012 < _size1008; _i1012++ {
    _elem1013 := NewTRowResult()
    err1016 := _elem1013.Read(iprot)
    if err1016 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem1013TRowResult", err1016); }
    p.Success.Push(_elem1013)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ScannerGetResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *ScannerGetResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err1019 := p.Io.Read(iprot)
  if err1019 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1019); }
  return err
}

func (p *ScannerGetResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ScannerGetResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ia = NewIllegalArgument()
  err1022 := p.Ia.Read(iprot)
  if err1022 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err1022); }
  return err
}

func (p *ScannerGetResult) ReadFieldIa(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ScannerGetResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("scannerGet_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Ia != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerGetResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1023 := range p.Success.Iter() {
      Iter1024 := Iter1023.(*TRowResult)
      err = Iter1024.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *ScannerGetResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *ScannerGetResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *ScannerGetResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ScannerGetResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ia != nil {
    err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err); }
    err = p.Ia.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err); }
  }
  return err
}

func (p *ScannerGetResult) WriteFieldIa(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ScannerGetResult) TStructName() string {
  return "ScannerGetResult"
}

func (p *ScannerGetResult) ThriftName() string {
  return "scannerGet_result"
}

func (p *ScannerGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScannerGetResult(%+v)", *p)
}

func (p *ScannerGetResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ScannerGetResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ia.CompareTo(data.Ia); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ScannerGetResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  case 2: return p.Ia
  }
  return nil
}

func (p *ScannerGetResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    thrift.NewTField("ia", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Id: id of a scanner returned by scannerOpen
 *  - NbRows: number of results to return
 */
type ScannerGetListArgs struct {
  thrift.TStruct
  Id ScannerID "id"; // 1
  NbRows int32 "nbRows"; // 2
}

func NewScannerGetListArgs() *ScannerGetListArgs {
  output := &ScannerGetListArgs{
    TStruct:thrift.NewTStruct("scannerGetList_args", []thrift.TField{
    thrift.NewTField("id", thrift.I32, 1),
    thrift.NewTField("nbRows", thrift.I32, 2),
    }),
  }
  {
  }
  return output
}

func (p *ScannerGetListArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "id" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "nbRows" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerGetListArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1025, err1026 := iprot.ReadI32()
  if err1026 != nil { return thrift.NewTProtocolExceptionReadField(1, "id", p.ThriftName(), err1026); }
  p.Id = ScannerID(v1025)
  return err
}

func (p *ScannerGetListArgs) ReadFieldId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ScannerGetListArgs) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1027, err1028 := iprot.ReadI32()
  if err1028 != nil { return thrift.NewTProtocolExceptionReadField(2, "nbRows", p.ThriftName(), err1028); }
  p.NbRows = v1027
  return err
}

func (p *ScannerGetListArgs) ReadFieldNbRows(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ScannerGetListArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("scannerGetList_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerGetListArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.Id) == 0 { return nil}
  err = oprot.WriteFieldBegin("id", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Id))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err); }
  return err
}

func (p *ScannerGetListArgs) WriteFieldId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ScannerGetListArgs) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.NbRows) == 0 { return nil}
  err = oprot.WriteFieldBegin("nbRows", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "nbRows", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.NbRows))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "nbRows", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "nbRows", p.ThriftName(), err); }
  return err
}

func (p *ScannerGetListArgs) WriteFieldNbRows(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ScannerGetListArgs) TStructName() string {
  return "ScannerGetListArgs"
}

func (p *ScannerGetListArgs) ThriftName() string {
  return "scannerGetList_args"
}

func (p *ScannerGetListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScannerGetListArgs(%+v)", *p)
}

func (p *ScannerGetListArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ScannerGetListArgs)
  if !ok {
    return 0, false
  }
  if p.Id != data.Id {
    if p.Id < data.Id {
      return -1, true
    }
    return 1, true
  }
  if p.NbRows != data.NbRows {
    if p.NbRows < data.NbRows {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *ScannerGetListArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Id
  case 2: return p.NbRows
  }
  return nil
}

func (p *ScannerGetListArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("id", thrift.I32, 1),
    thrift.NewTField("nbRows", thrift.I32, 2),
    })
}

/**
 * Attributes:
 *  - Success
 *  - Io
 *  - Ia
 */
type ScannerGetListResult struct {
  thrift.TStruct
  Success thrift.TList "success"; // 0
  Io *IOError "io"; // 1
  Ia *IllegalArgument "ia"; // 2
}

func NewScannerGetListResult() *ScannerGetListResult {
  output := &ScannerGetListResult{
    TStruct:thrift.NewTStruct("scannerGetList_result", []thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    thrift.NewTField("ia", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *ScannerGetListResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "ia" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerGetListResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1034, _size1031, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
  }
  p.Success = thrift.NewTList(_etype1034, _size1031)
  for _i1035:= 0; _i1035 < _size1031; _i1035++ {
    _elem1036 := NewTRowResult()
    err1039 := _elem1036.Read(iprot)
    if err1039 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem1036TRowResult", err1039); }
    p.Success.Push(_elem1036)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ScannerGetListResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *ScannerGetListResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err1042 := p.Io.Read(iprot)
  if err1042 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1042); }
  return err
}

func (p *ScannerGetListResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ScannerGetListResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ia = NewIllegalArgument()
  err1045 := p.Ia.Read(iprot)
  if err1045 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err1045); }
  return err
}

func (p *ScannerGetListResult) ReadFieldIa(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ScannerGetListResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("scannerGetList_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Ia != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerGetListResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Success.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1046 := range p.Success.Iter() {
      Iter1047 := Iter1046.(*TRowResult)
      err = Iter1047.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *ScannerGetListResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *ScannerGetListResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *ScannerGetListResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ScannerGetListResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ia != nil {
    err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err); }
    err = p.Ia.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err); }
  }
  return err
}

func (p *ScannerGetListResult) WriteFieldIa(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ScannerGetListResult) TStructName() string {
  return "ScannerGetListResult"
}

func (p *ScannerGetListResult) ThriftName() string {
  return "scannerGetList_result"
}

func (p *ScannerGetListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScannerGetListResult(%+v)", *p)
}

func (p *ScannerGetListResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ScannerGetListResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ia.CompareTo(data.Ia); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ScannerGetListResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.Io
  case 2: return p.Ia
  }
  return nil
}

func (p *ScannerGetListResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.LIST, 0),
    thrift.NewTField("io", thrift.STRUCT, 1),
    thrift.NewTField("ia", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Id: id of a scanner returned by scannerOpen
 */
type ScannerCloseArgs struct {
  thrift.TStruct
  Id ScannerID "id"; // 1
}

func NewScannerCloseArgs() *ScannerCloseArgs {
  output := &ScannerCloseArgs{
    TStruct:thrift.NewTStruct("scannerClose_args", []thrift.TField{
    thrift.NewTField("id", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *ScannerCloseArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "id" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerCloseArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1048, err1049 := iprot.ReadI32()
  if err1049 != nil { return thrift.NewTProtocolExceptionReadField(1, "id", p.ThriftName(), err1049); }
  p.Id = ScannerID(v1048)
  return err
}

func (p *ScannerCloseArgs) ReadFieldId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ScannerCloseArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("scannerClose_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerCloseArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if int64(p.Id) == 0 { return nil}
  err = oprot.WriteFieldBegin("id", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Id))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err); }
  return err
}

func (p *ScannerCloseArgs) WriteFieldId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ScannerCloseArgs) TStructName() string {
  return "ScannerCloseArgs"
}

func (p *ScannerCloseArgs) ThriftName() string {
  return "scannerClose_args"
}

func (p *ScannerCloseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScannerCloseArgs(%+v)", *p)
}

func (p *ScannerCloseArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ScannerCloseArgs)
  if !ok {
    return 0, false
  }
  if p.Id != data.Id {
    if p.Id < data.Id {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *ScannerCloseArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Id
  }
  return nil
}

func (p *ScannerCloseArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("id", thrift.I32, 1),
    })
}

/**
 * Attributes:
 *  - Io
 *  - Ia
 */
type ScannerCloseResult struct {
  thrift.TStruct
  Io *IOError "io"; // 1
  Ia *IllegalArgument "ia"; // 2
}

func NewScannerCloseResult() *ScannerCloseResult {
  output := &ScannerCloseResult{
    TStruct:thrift.NewTStruct("scannerClose_result", []thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    thrift.NewTField("ia", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *ScannerCloseResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "io" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "ia" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerCloseResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Io = NewIOError()
  err1052 := p.Io.Read(iprot)
  if err1052 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1052); }
  return err
}

func (p *ScannerCloseResult) ReadFieldIo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ScannerCloseResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Ia = NewIllegalArgument()
  err1055 := p.Ia.Read(iprot)
  if err1055 != nil { return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err1055); }
  return err
}

func (p *ScannerCloseResult) ReadFieldIa(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ScannerCloseResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("scannerClose_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.Ia != nil:
    if err = p.WriteField2(oprot); err != nil {
      return err
    }
  case p.Io != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ScannerCloseResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Io != nil {
    err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
    err = p.Io.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IOError", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err); }
  }
  return err
}

func (p *ScannerCloseResult) WriteFieldIo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ScannerCloseResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ia != nil {
    err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err); }
    err = p.Ia.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err); }
  }
  return err
}

func (p *ScannerCloseResult) WriteFieldIa(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ScannerCloseResult) TStructName() string {
  return "ScannerCloseResult"
}

func (p *ScannerCloseResult) ThriftName() string {
  return "scannerClose_result"
}

func (p *ScannerCloseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ScannerCloseResult(%+v)", *p)
}

func (p *ScannerCloseResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ScannerCloseResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Io.CompareTo(data.Io); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Ia.CompareTo(data.Ia); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ScannerCloseResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Io
  case 2: return p.Ia
  }
  return nil
}

func (p *ScannerCloseResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("io", thrift.STRUCT, 1),
    thrift.NewTField("ia", thrift.STRUCT, 2),
    })
}


